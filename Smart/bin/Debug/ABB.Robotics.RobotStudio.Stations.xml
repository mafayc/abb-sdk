<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABB.Robotics.RobotStudio.Stations</name>
    </assembly>
    <members>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ArrowAnnotation">
            <summary>
            Represents an arrow annotation displayed in the 3D graphics.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Annotation">
            <summary>
            Represents a graphical annotation displayed in the 3D graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Annotation.Transform">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Annotation.Transform"/> of the object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Annotation.Visible">
            <summary>
            Gets or sets a value indicating whether the annotation will
            be visible in the graphics.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsCableControlPoint">
            <summary>
            Represents a point through which a <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsCable"/> is routed when it is created.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsCableControlPoint.#ctor(ABB.Robotics.Math.Vector3)">
            <summary>
            Creates a control point at a point in space.
            The cable will initially be routed through this point but is after that free to move in any way.
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsCableControlPoint.#ctor(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Creates a control point that is attached to a Part.
            The cable will become locked to the part at the specified position with the specified direction.
            </summary>
            <param name="position"></param>
            <param name="direction"></param>
            <param name="attachedTo"></param>
            <remarks>
            If the part is not already added to the physics simulation, it will be added as a kinematic object.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCableControlPoint.Position">
            <summary>
            Gets or sets the position of the control point.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCableControlPoint.Direction">
            <summary>
            Gets or sets the direction of the cable at the control point.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCableControlPoint.AttachedTo">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> that the cable is attached to at the control point.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsCable">
            <summary>
            Represents a cable that is simulated by the physics system.
            </summary>
            <remarks>
            Only available in 64-bit build.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsCable.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.PhysicsCableControlPoint},System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsCable"/>.
            </summary>
            <param name="initialControlPoints">A list of <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsCableControlPoint"/>s through which the cable is initially routed. At least two are required.</param>
            <param name="radius">Radius of the cable.</param>
            <param name="segmentLength">Approximate length of the discretized cable segments.</param>
            <remarks>
            The length of the cable will be determined by the control points.
            A smaller segment length will mean more accurate simulation but higher CPU usage.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCable.Segments">
            <summary>
            ABB internal use
            </summary>
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCable.Radius">
            <summary>
            Gets or sets the radius of the cable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCable.SegmentLength">
            <summary>
            Gets the approximate length of each discretized cable segment.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCable.Resolution">
            <summary>
            Gets the number of discretized cable segments per unit length (meter).
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsCable.GetPhysicsMaterial">
            <summary>
            Gets the material properties of the cable.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsCable.SetPhysicsMaterial(ABB.Robotics.RobotStudio.Stations.PhysicsMaterial)">
            <summary>
            Sets the material properties of the cable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCable.Color">
            <summary>
            Gets or sets the color of the cable.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsCable.Length">
            <summary>
            Gets the actual length of the cable.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsCable.CanAdjustLength">
            <summary>
            Returns if the cable length can be adjusted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsCable.AdjustLength(System.Double,System.Double)">
            <summary>
            Adjusts the length of the cable while preserving its routing.
            </summary>
            <param name="delta">The amount (in meters) to change the length.</param>
            <param name="segLength">Approximate length of the discretized cable segments.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ClipPlane">
            <summary>
            Defines a plane that can be used to clip geometry in a GraphicControl.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ClipPlane.#ctor">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.ClipPlane"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ClipPlane.Plane">
            <summary>
            Returns a Plane that corresponds to the clip plane.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ClipPlane.Transform">
            <summary>
            Gets the Transform that defines the clip plane.
            </summary>
            <remarks>
            When associated with a GraphicControl, all geometry in the negative z space will be hidden.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ClipPlane.Gfx">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ClipPlaneCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.ClipPlane"/> objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration">
            <summary>
            Specifies the behavior of the simulation for an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration.AutoStartProgram">
            <summary>
            Automatically start program execution (for active tasks) when the simulation starts.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration.AutoStopSimulation">
            <summary>
            Automatically stop the simulation when program execution (for all active controllers) stops.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration.RunMode">
            <summary>
            Gets or sets the number of cycles for RAPID execution.
            </summary>
            <remarks>
            Valid values are 1-32767, -1 (infinite) or -3 (as is).
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration.Controller">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/> that this configuration corresponds to.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration.TaskConfigurations">
            <summary>
            Gets a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfiguration"/> objects that specify simulation configurations
            for the individual tasks in the controller.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfigurationCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfigurationCollection.Item(ABB.Robotics.RobotStudio.Stations.RsIrc5Controller)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration"/> for a specified <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfiguration">
            <summary>
            Specifies the behavior of the simulation for a task in an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfiguration.EntryPoint">
            <summary>
            Gets or sets the name of the RAPID procedure that should be started when simulation starts.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfiguration.Active">
            <summary>
            Gets or sets a value that indicates if task execution should be started when simulation starts.
            </summary>
            <remarks>
            See also <see cref="P:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration.AutoStartProgram"/>.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfiguration.Task">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/> that this configuration corresponds to.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfigurationCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfiguration"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfigurationCollection.Item(ABB.Robotics.RobotStudio.Stations.RsTask)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfiguration"/> for a specified <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/>.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Conveyor">
            <summary>
            ABB Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Conveyor.Acceleration">
            <summary>
            The acceleration/deceleration used when changing velocity. If zero, the velocity is reached instantly.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Conveyor.Layout">
            <summary>
            ABB Internal Use only.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Conveyor.TravelDistance">
            <summary>
            Length along the motion path or rotation indicating how far the conveyor has travelled.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Conveyor.CurrentVelocity">
            <summary>
            The current velocity of the conveyor. This value is only valid during simulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Conveyor.TargetVelocity">
            <summary>
            The target velocity of the Conveyor. It is the velocity the conveyor will
            have if not stopped.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Conveyor.ConveyorObjects">
            <summary>
            Gets a readonly list of conveyor objects that are moved by the conveyor.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.MoveBeltTo(System.Double)">
            <summary>
            Sets the new target travel distance, along the motion path of the conveyor, and moves the belt accordingly.
            </summary>
            <param name="travelDistance">The travel distance to be applied.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.PlaceObject(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Place one object on the conveyor. Moves the object to the conveyor reference frame.
            </summary>
            <param name="movedObject">The object to place on the conveyor.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.PlaceObject(ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double)">
            <summary>
            Place one single object onto the conveyor at the specified distance along the conveyor belt. Moves the object to the conveyor.
            </summary>
            <param name="movedObject">The object to place on the conveyor.</param>
            <param name="distance">The distance along the conveyor to place the object.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.PlaceObject(ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double,ABB.Robotics.Math.Matrix4)">
            <summary>
            Place an object on the conveyor. Moves the object to the offset relative its conveyor position.
            </summary>
            <param name="movedObject">The object to place on the conveyor.</param>
            <param name="distance">The distance along the conveyor to place the object.</param>
            <param name="offsetFrame">The offset that should be applied to the moved object.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.RemoveObject(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Removes an object from the conveyor.
            </summary>
            <param name="workpiece">Graphical object to be removed</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.RemoveObject(RobotStudio.API.Internal.ConveyorObject)">
            <summary>
            Removes a single object from the conveyor
            </summary>
            <param name="conveyorObject">The conveyor object to be removed.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.GetGlobalBeltFrame(System.Double)">
            <summary>
            Calculates the global transformation matrix of the belt after a specific travel distance along the conveyor.
            </summary>
            <param name="travelDistance">Distance from ReferenceFrame.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.GetTravelDistance(ABB.Robotics.Math.Vector3)">
            <summary>
            Calculates the closest travel distance from ReferenceFrame, along the motion path or rotation of the conveyor.
            </summary>
            <param name="globalPosition">Position vector in the global coordinate system.</param>
            <exception cref="T:System.NotSupportedException">Indicates that the motion is too complex to handle this calculation and does not support this feature.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.ResetTravelDistance">
            <summary>
            Sets TravelDistance to zero without affecting motion and recalculates relations of objects. To be able to start over
            easily for closed conveyors where same positions eventually will reach ReferencePosition again.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Conveyor.GraphicComponents">
            <summary>
            Gets a GraphicComponentCollection object that represents all the graphic components on this conveyor mechanism.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Conveyor.MoveBelt">
            <summary>
            Moves the conveyor belt to the target travel distance.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConveyorParameterization">
            <summary>
            ABB Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConveyorParameterization.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConveyorParameterization.GetTravelDistance(ABB.Robotics.Math.Vector3)">
            <summary>
            Tries to find the closest position along the motion path of the belt.
            </summary>
            <param name="position"></param>
            <exception cref="T:System.NotSupportedException">Indicates that the motion is too complex to handle this calculation.</exception>
            <remarks>It is not necessary to implement this </remarks>
            <returns>double</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConveyorLinearParameterization">
            <summary>
            ABB Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConveyorLinearParameterization.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConveyorConnection">
             <summary>
             ABB Internal use only.
            
              Forwards information about the state of a conveyor to a controller. Simulates an Encoder interface. One per controller-conveyor mapping.
             </summary>
             <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.DeviceName">
            <summary>
            The name of the I/O device (I/O unit in RW versions prior to 6.x).
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.MaximumDistance">
            <summary>
            Length (mm to Ctrl)
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.MinimumDistance">
            <summary>
            Length (mm to Ctrl)
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.MechanicalUnitName">
            <summary>
            The name of the mechanical unit that represents this conveyor connection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.Irc5Controller">
            <summary>
            The Controller associated with the conveyor.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.TravelOffset">
            <summary>
             Specifies the offset location from zero position along the motion path of a conveyor.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.SynchronizationSwitchOffset">
            <summary>
            Optional parameter for setting the position of the synchronization switch.
            Defined in relation to the connection base frame.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.SensorName">
            <summary>
            The name of the sensor used by the conveyor connection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.CountsPerMeter">
            <summary>
            (5000-10000 on Ctrl)
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.QueueTrackingDistance">
            <summary>
            Length (Zeropoint for Sync switch/accepted object/trigged position)
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.StartWindowWidth">
            <summary>
            Length (Window in wich objects can be connected using WaitWobj)
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.SyncSeparation">
            <summary>
            Not used for simulation. Distance between SyncSignals to be registered as new object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.Transform">
            <summary>
            Read only.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.WorkobjectConnected">
            <summary>
            Raised when workobject is connected.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.WorkobjectDropped">
            <summary>
            Raised when currently connected workobject is dropped.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.Gfx">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConveyorConnection.UpdateVelocity(System.Double)">
            <summary>
            Reports the current velocity of the conveyor.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConveyorConnectionCollection">
            <summary>
            ABB Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters">
            <summary>
            The Denavit-Hartenberg parameters (also called DH parameters) are the four parameters associated with a particular
            convention for attaching reference frames to the links of a spatial kinematic chain, or robot manipulator.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.D">
            <summary>
            Offset along previous z to the common normal.
            </summary>
            <remarks>Also known as Offset.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.Theta">
            <summary>
            Angle about previous z, from old x to new x.
            </summary>
            <remarks>Also known as Rotation.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.A">
            <summary>
            Length of the common normal. Assuming a revolute joint, this is the radius about previous z.
            </summary>
            <remarks>Also kown as Length and r.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.Alpha">
            <summary>
            Angle about common normal, from old z axis to new z axis.
            </summary>
            <remarks>Also known as Twist.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the DenavitHartenbergParameters struct using specified parameter values.
            </summary>
            <param name="d">Offset along previous z to the common normal.</param>
            <param name="theta">Angle about previous z, from old x to new x.</param>
            <param name="a">Length of the common normal. Assuming a revolute joint, this is the radius about previous z.</param>
            <param name="alpha">Angle about common normal, from old z axis to new z axis.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.EdgeGraph">
            <summary>
            Helper class to simplify edge traversal for a set of connected edges in a body
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Edge})">
            <summary>
            Creates a new EdgeGraph from a collection of edges
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.Dispose">
            <summary>
            Releases the resources allocated by this EdgeGraph
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EdgeGraph.IsConnected">
            <summary>
            Returns true if the graph is connected, i.e. all edges and vertices are connected to one another
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EdgeGraph.IsLinear">
            <summary>
            Returns true if the graph is linear.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EdgeGraph.IsCycle">
            <summary>
            Returns true if the edges and vertices of the graph form a closed cycle
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EdgeGraph.IsTree">
            <summary>
            Returns true if the graph is tree-shaped. 
            </summary>
            <remarks>
            IsTree will be true also for linear graphs (as they can be considered degenerate trees).
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.GetEdges">
            <summary>
            Returns all edges in the graph
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.GetVertices">
            <summary>
            Returns all vertices in the graph
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.GetLeaves">
            <summary>
            Returns all vertices that are leaves (endpoints), i.e. all vertices that are connected to only one edge.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EdgeGraph.SplitDisjunct">
            <summary>
            Splits the graph so that each new graph is connected
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignalChanged"/> event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalChangedEventArgs.Signal">
            <summary>
            Gets the I/O signal that has changed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.AfterFreehandEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.AfterFreehand"/> event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.AfterFreehandEventArgs.Object">
            <summary>
            Gets the object that was manipulated.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.AfterFreehandEventArgs.OriginalGlobalMatrix">
            <summary>
            Gets the original position and orientation of the object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicHoverEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicHover"/> event
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicHoverEventArgs.HoverObject">
            <summary>
            Gets the object over which the mouse pointer hovers.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicHoverEventArgs.HoverPosition">
            <summary>
            Gets the 3D position over which the mouse pointer hovers.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton">
            <summary>
            Represents a clickable button in a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Id">
            <summary>
            Gets the identifier that was specified when the button was created.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Enabled">
            <summary>
            Gets or sets if the button can be clicked.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Checked">
            <summary>
            Get or sets if the button is rendered with a check highlight.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Position">
            <summary>
            Gets or sets the position of the button in the graphics window, relative to the upper left corner.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton.Scale">
            <summary>
            Gets or sets the size of the graphical button relative to the button image.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton"/> objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButtonCollection.Add(System.String,System.Int32,System.Int32,System.Drawing.Bitmap)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicButton"/> and adds it to this collection.
            </summary>
            <param name="id">A unique identifier for the button.</param>
            <param name="x">Distance in pixels from the left edge of the graphic window.</param>
            <param name="y">Distance in pixels from the top edge of the graphic window.</param>
            <param name="bmp">An image for the button.</param>
            <returns>The created button.</returns>
            <remarks>If id corresponds to an existing CommandBarButton,
            the Enabled and Checked state will automatically be updated and the command will be executed when the button is clicked.</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject">
            <summary>
            Interface for an object that can be moved or rotated in the graphics.
            </summary>
            <remarks>
            Use <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.FreehandObject"/> to set the active freehand object.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject.BeforeManipulation(ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode,ABB.Robotics.Math.Axis)">
            <summary>
            Called before the user starts moving the object.
            </summary>
            <param name="mode">Mode of manipulation</param>
            <param name="axis">Axis of manipulation</param>
            <returns>True to continue or false to cancel the manipulation.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject.AfterManipulation">
            <summary>
            Called after the user stops moving the object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject.SetTransform(ABB.Robotics.Math.Matrix4)">
            <summary>
            Sets a new transform on the object.
            </summary>
            <param name="transform"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject.GetTransform">
            <summary>
            Gets the current transform of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject2">
            <summary>
            Interface for an object that can be moved or rotated in the graphics.
            </summary>
            <remarks>
            Use <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.FreehandObject"/> to set the active freehand object.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject2.GetFeedback">
            <summary>
            Returns a string that is displayed while the object is manipulated.
            </summary>
            <returns></returns>
            <remarks>
            Called after <see cref="M:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject.SetTransform(ABB.Robotics.Math.Matrix4)"/>.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.MouseRectangleEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.MouseRectangle"/> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicPick"/> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicHoverEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicHover"/> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation">
            <summary>
            Specifies values to indicate how solid objects will be rendered.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.Surface">
            <summary>
            Surface rendering. This is the default.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.Wire">
            <summary>
            Render the outlines of surfaces.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.SurfaceAndWire">
            <summary>
            Render both surfaces and outlines.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.HiddenLineRemoval">
            <summary>
            Render outlines except where they are behind surfaces.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicRepresentation.TriangleWireframe">
            <summary>
            Render triangles as lines.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel">
            <summary>
            Specifies values to indicate the detail in which objects are rendered.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel.Auto">
            <summary>
            The detail level is selected automatically.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel.Fine">
            <summary>
            Use the best detail level available.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel.Medium">
            <summary>
            Use the medium detail level.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicDetailLevel.Coarse">
            <summary>
            Use the fastest detail level available.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicStereoMode">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.StereoMode"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicStereoMode.None">
            <summary>
            Normal rendering.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicStereoMode.OculusRift">
            <summary>
            Oculus Rift VR.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicStereoMode.SideBySide">
            <summary>
            Side-by-side stereo.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.GraphicStereoMode.OpenVR">
            <summary>
            OpenVR, used for HTC Vive VR.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes">
            <summary>
            Specifies values to indicate the type of objects which will be selectable by picking
            </summary>
            <example><code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Set Selection Mode Example" lang="cs" title="Set Selection Mode Example" /></example>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Disable">
            <summary>
            No selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Mechanism">
            <summary>
            <see cref="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Mechanism"/> selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Assembly">
            <summary>
            <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup"/> selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Part">
            <summary>
            <see cref="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Part"/> selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Entity">
            <summary>
            <see cref="T:ABB.Robotics.RobotStudio.Stations.Body"/> selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Surface">
            <summary>
            <see cref="T:ABB.Robotics.RobotStudio.Stations.Face"/> selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Curve">
            <summary>
            <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire"/> selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Frame">
            <summary>
            <see cref="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Frame"/>, <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget"/>, <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> or <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/> selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Path">
            <summary>
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/> selection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SelectionModes.Instruction">
            <summary>
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction"/> selection.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode">
            <summary>
            Specifies values to indicate how the pick point will be adjusted ("snapped") when
            picking geometric objects.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Disable">
            <summary>
            No snapping.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Snap">
            <summary>
            Adjust to the closest of either <see cref="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Center"/>, <see cref="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Mid"/> or <see cref="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.End"/> points.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Center">
            <summary>
            Adjust to the center point of the picked surface.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Mid">
            <summary>
            Adjust to the mid point of the closest edge.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.End">
            <summary>
            Adjust to the closest end point of the closest edge.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Edge">
            <summary>
            Adjust to the closest point on the closest edge.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Gravity">
            <summary>
            Adjust to the center of gravity of the picked <see cref="T:ABB.Robotics.RobotStudio.Stations.Body"/> or <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.LocalOrigin">
            <summary>
            Adjust to the local origin (translation of the global transform) of the picked object.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.SnapMode.Grid">
            <summary>
            Adjust to the closest point on the UCS grid.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode">
            <summary>
            Specifies values to indicate how the user will be able to move or rotate a selected object by
            using the mouse.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.Disable">
            <summary>
            Freehand manipulation is disabled.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.Move">
            <summary>
            Linear move an object along the x, y, and z axes.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.Rotate">
            <summary>
            Rotate an object around the x, y and z axes.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.JogJoint">
            <summary>
            Jog the individual links of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.JogLinear">
            <summary>
            Linear move the TCP of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism"/> along the x, y and z axes.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandMode.JogReorient">
            <summary>
            Rotate the TCP of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism"/> around the x, y and z axes.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference">
            <summary>
            Specifies the reference coordinate system for freehand manipulation
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.Global">
            <summary>
            Global coordinate system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.Local">
            <summary>
            The local system of the selected object.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.UCS">
            <summary>
            The current <see cref="P:ABB.Robotics.RobotStudio.Stations.Station.UCS"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.WorkObject">
            <summary>
            The active <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Forms.FreehandReference.Tool">
            <summary>
            The active <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/>.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicCapabilities">
            <summary>
            Contains information about the capabilities of the graphics adapter
            used for rendering a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl"/>.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControlSettings">
            <summary>
            Contains settings used for initializing a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl"/>
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControlSettings.MultiSampleCount">
            <summary>
            Specifies the sample count for anti-aliased rendering.
            </summary>
            <remarks>Must be between 1 and <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicCapabilities"/>.MaxMultiSampleCount</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl">
            <summary>
            Displays graphical objects in a 3D view
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.#ctor">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl"/> using default settings.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.#ctor(ABB.Robotics.RobotStudio.Stations.Forms.GraphicControlSettings)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl"/> using the specified settings.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Capabilities">
            <summary>
            Returns information about the capabilities of the graphics adapter
            used for rendering a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RootObject">
            <summary>
            Gets or sets the root of the object hierarchy which will be displayed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.TemporaryGraphics">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection" /> that is displayed
            in this control.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Picker">
            <summary>
            Gets the object which will handle mouse selection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.PickingEnabled">
            <summary>
            Gets or sets whether mouse selection is enabled.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowFloor">
            <summary>
            Gets or sets a value indicating if a rectangular "floor" will be displayed at z = 0.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FloorColor">
            <summary>
            Gets or sets the color of the floor. The floor can be made transparent
            by setting the alpha component to less than 255.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FloorSize">
            <summary>
            Gets or sets the size of the floor.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FloorAutoSize">
            <summary>
            Gets or sets a value indicating whether the floor will be automatically
            resized according to the contents of the station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowUCSFrame">
            <summary>
            Gets or sets a value indicating whether a frame representing UCS will be displayed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowUCSGrid">
            <summary>
            Gets or sets a value indicating whether a grid representing UCS will be displayed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GridSpaceX">
            <summary>
            Gets or sets the spacing of the UCS grid in the x direction.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GridSpaceY">
            <summary>
            Gets or sets the spacing of the UCS grid in the y direction.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.BackColor">
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GradientBackground">
            <summary>
            Gets or sets a value indicating whether the control will have a gradient background.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Representation">
            <summary>
            Gets or sets the manner in which solid objects will be rendered.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.EnvironmentMapping">
            <summary>
            Gets or sets a value indicating whether a reflective effect will be applied.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Projection">
            <summary>
            Gets or sets a value indicating how 3D objects are projected.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowCoordinateSystem">
            <summary>
            Gets or sets a value indicating if a coordinate system is displayed in the lower left corner.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ShowButtons">
            <summary>
            Gets or sets a value indicating if click buttons can be shown in this GraphicControl.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.DetailLevel">
            <summary>
            Gets or sets a value indicating the detail in which geometric objects
            are rendered.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.BackFaceCulling">
            <summary>
            Gets or sets a value indicating whether surfaces facing away from the viewer
            will be discarded.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.TwoSidedLighting">
            <summary>
            Gets or sets a value indicating whether surfaces facing away from the viewer
            will be lit and shaded.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenSizeCulling">
            <summary>
            Gets or sets the (approximate) minimum number of pixels an object must cover
            to be rendered.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.NavigationSensitivity">
            <summary>
            Gets or sets the responsiveness of mouse navigation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CaptureMouse">
            <summary>
            Gets or sets whether the control will receive mouse events even
            when the mouse is outside the control area.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.LookFrom">
            <summary>
            Gets or sets the point of view.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.LookAt">
            <summary>
            Gets or sets the point which will act as the center of the view.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FieldOfView">
            <summary>
            Gets or sets the angular extent of the view (in degrees).
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Camera">
            <summary>
            Associates this view with a Camera object.
            </summary>
            <remarks>If the Camera property is non-null, the view will be controlled by the camera object.
            If the camera moves, the viewpoint will move accordingly. If the camera is locked, the user
            will not be able to zoom/rotate/translate the view. </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.SuspendRedraw">
            <summary>
            Suspends redraw of the graphics view.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.SuspendUpdate">
            <summary>
            Suspends automatic update of graphics models during simulation and idle processing.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ClipPlane">
            <summary>
            Associates this view with a ClipPlane object.
            </summary>
            <remarks>
            All geometry in the negative z space of the ClipPlane transform will be hidden.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.AutoTransparency">
            <summary>
            Gets or sets if objects that cover a large part of the view should automatically be made transparent.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.MouseRectangle">
            <summary>
            Occurs when the user has drawn a selection rectangle with the mouse.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RootObjectChanged">
            <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RootObject" /> property has changed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Initialized">
            <summary>
            Occurs when the control has finished loading.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Update">
            <summary>
            Ensures that the graphics gets updated to reflect recent changes.
            </summary>
            <remarks>
            There is normally no need to call this function since the graphics
            are updated automatically during idle processing and simulation.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.UpdateAll">
            <summary>
            Updates the contents of all graphic controls.
            </summary>
            <remarks>
            There is normally no need to call this function since the graphics
            are updated automatically during idle processing and simulation.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CopySettings(ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl,ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl)">
            <summary>
            Copies all view and picker settings from one GraphicControl to another.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.LoadOptions">
            <summary>
            Load properties from options.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.LoadOptions(System.Boolean)">
            <summary>
            Load properties from options. 
            </summary>
            <param name="loadDefaults">Also load default properties for appearance.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GetObjectVisible(ABB.Robotics.RobotStudio.ProjectObject,System.Boolean)">
            <summary>
            Gets a value indicating whether an object is visible in this GraphicControl.
            </summary>
            <param name="obj">The graphic object.</param>
            <param name="recursive">Return true only if all descendants are visible.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.SetObjectVisible(ABB.Robotics.RobotStudio.ProjectObject,System.Boolean)">
            <summary>
            Sets a value indicating whether an object is visible in this GraphicControl.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CanExamineObject(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Checks whether an object can be examined.
            </summary>
            <param name="obj">The graphic object.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ExamineObject(ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3,System.Single)">
            <summary>
            Zooms in on an object.
            </summary>
            <param name="obj">The graphic object.</param>
            <param name="lookDirection">Look direction</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ExamineObject(ABB.Robotics.RobotStudio.ProjectObject,System.Single)">
            <summary>
            Zooms in on an object.
            </summary>
            <param name="obj">The graphic object.</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ExaminePoint(ABB.Robotics.Math.Vector3,System.Double,System.Single)">
            <summary>
            Zooms in on a point.
            </summary>
            <param name="point" />
            <param name="radius" />
            <param name="time">Time (in seconds) for the operation</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CanUnexamine">
            <summary>
            Returns <b>true</b> if <see cref="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Unexamine(System.Single)" /> can be called.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Unexamine(System.Single)">
            <summary>
            Undoes the previous Examine operation(s).
            </summary>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Move(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Single)">
            <summary>
            Adjusts the view to a new center and view point.
            </summary>
            <param name="lookAt">Center point.</param>
            <param name="lookFrom">V point.</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Zoom(System.Single,System.Single)">
            <summary>
            Zooms the view closer to or further from the center point.
            </summary>
            <param name="amount">Equivalent to the number of pixels the mouse would move
            to zoom the same amount. Use a positive value to zoom in and a negative to zoom out.</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Rotate(System.Single,System.Single,System.Single)">
            <summary>
            Rotates the view around the center point.
            </summary>
            <param name="x">Equivalent to the number of pixels the mouse would move horizontally
            to rotate the same amount.</param>
            <param name="y">Equivalent to the number of pixels the mouse would move vertically
            to rotate the same amount.</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Pan(System.Single,System.Single,System.Single)">
            <summary>
            Pans the view.
            </summary>
            <param name="x">Equivalent to the number of pixels the mouse would move horizontally
            to pan the same amount.</param>
            <param name="y">Equivalent to the number of pixels the mouse would move vertically
            to pan the same amount.</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ViewAll(ABB.Robotics.Math.Vector3,System.Single)">
            <summary>
            Adjusts the view to display all objects from a new direction.
            </summary>
            <param name="direction">New view direction.</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ViewAll(System.Single)">
            <summary>
            Adjusts the view to display all objects without changing the view direction.
            </summary>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ViewCenter(ABB.Robotics.Math.Vector3,System.Single)">
            <summary>
            Sets the view center.
            </summary>
            <param name="center">The point around which azimuth and altitude changes when changing the viewpoint.</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.SyncCamera(ABB.Robotics.RobotStudio.Stations.Camera,System.Boolean,System.Single)">
            <summary>
            Syncs the view with a Camera object.
            </summary>
            <param name="camera">Camera object.</param>
            <param name="updateView">If true, move view to camera; if false, move camera to view.</param>
            <param name="time">Time (in seconds) for the operation (if updateView=true).</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.CalcFreehand(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Drawing.Point,System.Drawing.Point,System.Boolean)">
            <summary>
            Calculates how movement of the mouse in window coordinates corresponds to
            linear movement or rotation of an object in 3D.
            </summary>
            <param name="startPoint">Reference point for the object.</param>
            <param name="direction">Direction in which to move the object, or axis around which to rotate the obejct.</param>
            <param name="mouse1">First mouse position.</param>
            <param name="mouse2">Second mouse position.</param>
            <param name="rotate">Calculate rotation rather than linear movement.</param>
            <returns>The delta (in m or radians) that the object should be moved or rotated.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(System.Int32,System.Int32)">
            <summary>
            Creates an image of specified size from this view.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot">
            <summary>
            Creates an image from this view.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(ABB.Robotics.RobotStudio.Stations.ScreenshotOptions)">
            <summary>
            Creates an image from this view.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(System.Int32,System.Int32,ABB.Robotics.RobotStudio.Stations.ScreenshotOptions)">
            <summary>
            Creates an image of specified size from this view.
            </summary>
            <remarks>
            Width and height must not be larger than Capabilities.MaxTextureSize.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(ABB.Robotics.RobotStudio.ProjectObject,System.Int32,System.Int32,ABB.Robotics.RobotStudio.Stations.ScreenshotOptions)">
            <summary>
            Creates an image of a specified object.
            </summary>
            <remarks>
            Width and height must not be larger than Capabilities.MaxTextureSize.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ScreenShot(ABB.Robotics.RobotStudio.ProjectObject,System.Int32,System.Int32,ABB.Robotics.RobotStudio.Stations.ScreenshotOptions,ABB.Robotics.Math.Vector3)">
            <summary>
            Creates an image of a specified object.
            </summary>
            <remarks>
            Width and height must not be larger than Capabilities.MaxTextureSize.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.FlyTo(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Single)">
            <summary>
            Adjusts the view.
            </summary>
            <param name="lookAt">The point which will act as the center of the view</param>
            <param name="lookFrom">Point of view</param>
            <param name="time">Time (in seconds) for the operation.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GetView">
            <summary>
            Returns the underlying GraphicView object.
            </summary>
            <returns />
            <remarks>Internal use only.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.GetAllGraphicControls">
            <summary>
            Returns an array containing all graphic controls in the process.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectPoint(System.Int32,System.Int32,ABB.Robotics.RobotStudio.ProjectObject@)">
            <summary>
            Returns the point in 3D that corresponds to a window coordinate, and the object at that point.
            </summary>
            <param name="x">Window x coordinate (relative to upper left corner of this).</param>
            <param name="y">Window y coordinate (relative to upper left corner of this).</param>
            <param name="hitObject">Object (Part or Face) at the specified coordinate</param>
            <returns>Point in 3D space, or null if there is no object/floor at the specified coordinate.</returns>
            <remarks>Does not take into account selection modes and snap modes</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectPoint(System.Int32,System.Int32)">
            <summary>
            Returns the point in 3D that corresponds to a window coordinate.
            </summary>
            <param name="x">Window x coordinate (relative to upper left corner of this).</param>
            <param name="y">Window y coordinate (relative to upper left corner of this).</param>
            <returns>Point in 3D space, or null if there is no object/floor at the specified coordinate.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.RayFromPoint(System.Int32,System.Int32)">
            <summary>
            Returns a ray in 3D space that corresponds to a screen coordinate
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectPointToScreen(ABB.Robotics.Math.Vector3)">
            <summary>
            Projects a point in 3D space (x,y,z) to window coordinates (x,y) relative to the upper left corner of this control.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.ProjectRay(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.ProjectObject@)">
            <summary>
            Performs a ray test
            </summary>
            <param name="start">Start of the ray in world coordinates</param>
            <param name="direction">Direction of the ray in world coordinates</param>
            <param name="hitObject">Hit object (Part or Face)</param>
            <returns>Hit point, or null if no object or floor was hit</returns>
            <remarks> Does not take into account selection modes and snap modes</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.IsStereoModeAvailable(ABB.Robotics.RobotStudio.Stations.Forms.GraphicStereoMode)">
            <summary>
            Returns true if the given stereo mode is currently available
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker">
            <summary>
            Provides mouse selection (picking) in a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl" />.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.#ctor(ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl)">
            <summary>
            Internal use only
            </summary>
            <param name="graphicControl"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionMode">
            <summary>
            Gets or sets the type of objects that will be selectable by picking
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.EnableSelection">
            <summary>
            Gets or sets a value indicating whether picking will cause the project selection
            to be updated
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.ShowLocalCoordinateSystem">
            <summary>
            Gets or sets a value indicating whether the origin of selected objects
            will be shown as a coordinate system
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SnapMode">
            <summary>
            Gets or sets the way the pick point will be adjusted when picking geometric objects
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.FreehandMode">
            <summary>
            Gets or sets the way the user will be able to move or rotate a selected object by
            using the mouse
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.FreehandReference">
            <summary>
            Gets or sets reference coordinate system for freehand manipulation
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MultiJog">
            <summary>
            Gets or sets a value indicating whether multi robot jogging is enabled
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MultiJogExclude">
            <summary>
            Gets or sets the robots that are <b>not</b> used in multi robot jogging.
            </summary>
            <value>ArrayList containing Mechanism objects.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionRadius">
            <summary>
            Gets or sets the tolerance (in pixels) used when picking line objects
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionPreview">
            <summary>
            Gets or sets a value indicating whether objects under the cursor will be
            temporarily highlighted
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionHighlight">
            <summary>
            This property is obsolete.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionColor">
            <summary>
            Gets or sets the color of selected objects
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MultiJogEnabled">
            <summary>
            ABB internal use only
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MarkerPosition">
            <summary>
            Gets or sets the position of the marker which indicates the last pick point
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.MarkerPositionChanged">
            <summary>
            Occurs when the MarkerPosition property changes.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicHover">
            <summary>
            Occurs when the user hovers the mouse over an object in a graphic view.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicPickPreview">
            <summary>
            Occurs when the user moves the mouse in the graphic view.
            </summary>
            <remarks> Only occurs if SelectionPreview is true.</remarks>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicPick">
            <summary>
            Occurs when the user picks an object in a graphic view.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.AfterFreehand">
            <summary>
            Occurs when an object has been moved or rotated by freehand manipulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.FreehandObject">
            <summary>
            Gets or sets a <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.IFreehandObject"/> for freehand manipulation.
            </summary>
            <remarks>
            By default, freehand manipulation works on supported objects in the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection"/>.
            Use this property to ovveride this behavior and enable freehand manipulation of an application-defined object.
            Make sure to reset the property to null after use to restore the default behavior.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.FreehandKeyState">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicPick"/> event
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedObject">
            <summary>
            Gets the picked <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/>.
            </summary>
            <remarks>
            The type of object depends on the selected <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SelectionMode"/>.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedTemporaryGraphic">
            <summary>
            Gets the picked <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic"/> object.
            </summary>
            <remarks>
            Only objects with the <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Pickable"/> flag set to true can be picked.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedPosition">
            <summary>
            Gets the picked position in global coordinates.
            </summary>
            <remarks>
            The position is adjusted according to the active <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.SnapMode"/>.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedMaterial">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> of the picked object at the picked position.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.CancelSelection">
            <summary>
            Gets or sets a value that indicates if the picked object should be added to the <see cref="T:ABB.Robotics.RobotStudio.ProjectSelection"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.Cursor">
            <summary>
            Gets or sets a <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.Cursor"/> that is used to indicate picking preview.
            </summary>
            <remarks>
            This property is only used for the <see cref="E:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPicker.GraphicPickPreview"/> event.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.MouseRectangleEventArgs">
            <summary>
            Provides data for the MouseRectangle event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.MouseRectangleEventArgs.Rectangle">
            <summary>
            Gets the selection rectangle.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.MouseRectangleEventArgs.Keys">
            <summary>
            Gets the depressed keyboard keys.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic">
            <summary>
            A simple non-persistent graphics object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Delete">
            <summary>
            Deletes this object from the graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Matrix">
            <summary>
            Gets or sets the global transform of this object, or the offset if the object is attached.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Topmost">
            <summary>
            Gets or sets a value that indicates if this object should be rendered on top of other objects in the graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Visible">
            <summary>
            Gets or sets a value that indicates if this object is visible in the graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.FixedSize">
            <summary>
            Gets or sets a value that indicates if this object should be rendered in a fixed size,
            regardless of the distance from the view point.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Pickable">
            <summary>
            Gets or sets a value that indicates if this object can be picked in the graphics.
            </summary>
            <remarks>
            Picked objects are returned in <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicPickEventArgs.PickedTemporaryGraphic"/>.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Color">
            <summary>
            Gets or sets the color of this object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.SetAlpha(System.Single)">
            <summary>
            Sets the alpha of this objcect.
            </summary>
            <param name="alpha">Alpha to set. Should be in the range 0..1.</param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Texture">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Texture"/> of this object, for supported types.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Tag">
            <summary>
            Gets or sets user-defined data associated with this object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Attach(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Attaches this to an object in the station.
            </summary>
            <param name="obj">The object to attach to, or NULL to break the attachment.
            This must be a graphical object, e.g. a GraphicComponent, RsTarget, RsWorkObject,
            RsToolData or RsPathProcedure.</param>
            <exception cref="T:System.ArgumentException">The argument is not a graphical object.</exception>
            <remarks>The <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Matrix"/> property represents an offset from the object's origin.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.GetBoundingBox(System.Boolean)">
            <summary>
            Computes the (axis-aligned) bounding box for this object.
            </summary>
            <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
            <returns></returns>
            <remarks>The result is undefined for objects with FixedSize = true.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Highlight(System.Boolean,System.Drawing.Color)">
            <summary>
            Highlights this object in the specified color.
            </summary>
            <param name="highlight">True if the object should be highlighted, False to turn the highlighting off.</param>
            <param name="color">Highlight color</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Highlight(System.Boolean)">
            <summary>
            Highlights this object using the default highlight color and style for selections.
            </summary>
            <param name="highlight">True if the object should be highlighted, False to turn the highlighting off.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Highlight(ABB.Robotics.RobotStudio.Stations.HighlightStyle,System.Drawing.Color)">
            <summary>
            Highlights this object in the specified color and style.
            </summary>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Copy">
            <summary>
            Returns a copy of this TemporaryGraphic object.
            </summary>
            <returns>The copied TemporaryGraphic object.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.ContinueTrace(ABB.Robotics.Math.Vector3,System.Drawing.Color,System.Boolean)">
            <summary>
            Adds a new point to a trace.
            </summary>
            <param name="point">The endpoint of the new segment.</param>
            <param name="color">The color of the new segment.</param>
            <param name="discontinue">Creates a discontinuity, e.g. no line is drawn from the previous point</param>
            <exception cref="T:System.InvalidOperationException">This was not created by DrawTrace().</exception>
            <remarks />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.UpdateParticleSystem(ABB.Robotics.RobotStudio.Stations.ParticleSystemData)">
            <summary>
            Updates a particle system created by <see cref="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawParticleSystem(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.ParticleSystemData)"/>
            </summary>
            <param name="data">
            
            </param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.UpdateCable(System.Double,ABB.Robotics.Math.Vector3[])">
            <summary>
            Updates a cable created by <see cref="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCable(ABB.Robotics.Math.Matrix4,System.Double,ABB.Robotics.Math.Vector3[],System.Drawing.Color)"/>. 
            </summary>
            <param name="radius">New radius</param>
            <param name="points">New points</param>
            <remarks>
            The number of points can be different than when the cable was created.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.Text">
            <summary>
            Sets the text of this object.
            </summary>
            <remarks> Only valid for objects created with the DrawText method. </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic" /> objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.#ctor(System.Int32)">
            <summary>
            ABB Internal use
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified position.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.IsSynchronized">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.SyncRoot">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.Remove(ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic)">
            <summary>
            Removes a TemporaryGraphic object from this TemporaryGraphicCollection object.
            </summary>
            <param name="temporaryGraphic">The TemporaryGraphic object to be removed.</param>
            <exception cref="T:System.InvalidOperationException">
            The TemporaryGraphic object has not been added to the collection.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.RemoveAll">
            <summary>
            Removes all TemporaryGraphic objects from this TemporaryGraphicCollection object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.Update">
            <summary>
            Updates the graphics to reflect all changes
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawArc(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Creates an arc.
            </summary>
            <param name="center">The position and orientation of the arc. The arc is created
            in the z=0 plane.</param>
            <param name="radius">The radius of the arc.</param>
            <param name="startAngle">The start angle (relative to the x-axis) of the arc</param>
            <param name="endAngle">The end angle (relative to the x-axis) of the arc</param>
            <param name="width">The line width of the arc, in pixels.</param>
            <param name="color">The color of the arc.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawArrow(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Creates an arrow.
            </summary>
            <param name="start">The start (tip) of the arrow.</param>
            <param name="end">The end of the arrow.</param>
            <param name="tipLength">The length of the arrow tip</param>
            <param name="width">The line width of the arrow, in pixels.</param>
            <param name="color">The color of the arrow.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawBox(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3,System.Drawing.Color)">
            <summary>
            Creates a box.
            </summary>
            <param name="origin">The position and orientation of the corner of the box.</param>
            <param name="size">The size of the box in x, y and z directions.</param>
            <param name="color">The color of the box.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCircle(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Creates a circle.
            </summary>
            <param name="center">The position and orientation of the circle. The circle is created
            in the z=0 plane.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="width">The line width of the circle, in pixels.</param>
            <param name="color">The color of the circle.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCone(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Creates a cone.
            </summary>
            <param name="center">The position and orientation of the cone. The base of the cone
            will be in the z=0 plane.</param>
            <param name="radius">The radius of the base.</param>
            <param name="height">The height of the cone.</param>
            <param name="color">The color of the cone.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCylinder(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Creates a cylinder.
            </summary>
            <param name="center">The position and orientation of the cylinder. The base of the
            cylinder will be in the z=0 plane.</param>
            <param name="radius">The radius of the cylinder.</param>
            <param name="height">The height of the cylinder.</param>
            <param name="color">The color of the cylinder.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCylinder(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Creates a cylinder with different bottom and top radii, e.g. a truncated cone.
            </summary>
            <param name="center">The position and orientation of the cylinder. The base of the
            cylinder will be in the z=0 plane.</param>
            <param name="bottomRadius">The bottom radius of the cylinder.</param>
            <param name="topRadius">The top radius of the cylinder.</param>
            <param name="height">The height of the cylinder.</param>
            <param name="color">The color of the cylinder.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawLine(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,System.Drawing.Color)">
            <summary>
            Creates a line.
            </summary>
            <param name="start">The start of the line.</param>
            <param name="end">The end of the line</param>
            <param name="width">The width of the line, in pixels.</param>
            <param name="color">The color of the line.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPyramid(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Int32,System.Drawing.Color)">
            <summary>
            Creates a pyramid.
            </summary>
            <param name="center">The position and orientation of the pyramid. The base of the
            pyramid will be in the z=0 plane.</param>
            <param name="radius">The radius of the pyramid.</param>
            <param name="height">The height of the pyramid.</param>
            <param name="numSides">The number of sides in the pyramid.</param>
            <param name="color">The color of the pyramid.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawSphere(ABB.Robotics.Math.Vector3,System.Double,System.Drawing.Color)">
            <summary>
            Creates a sphere.
            </summary>
            <param name="center">The position of the sphere.</param>
            <param name="radius">The radius of the sphere.</param>
            <param name="color">The color of the sphere.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawMarker(ABB.Robotics.Math.Vector3,System.Double,System.Double,System.Boolean,System.Drawing.Color)">
            <summary>
            Creates a fixed size Marker
            </summary>
            <param name="point">The position of the center point of the Marker</param>
            <param name="size">The size of the Marker.</param>
            <param name="width">The line width of the Marker, in pixels.</param>
            <param name="fixedSize">The fixed size of the Marker.</param>
            <param name="color">The color of the Marker.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawFrame(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
            <summary>
            Creates a color-coded frame representing a coordinate system
            </summary>
            <param name="origin">The position and orientation of the frame</param>
            <param name="size">The size of the frame.</param>
            <param name="width">The line width of the frame, in pixels.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawFrame(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Creates a color-coded frame representing a coordinate system
            </summary>
            <param name="origin">The position and orientation of the frame</param>
            <param name="size">The size of the frame.</param>
            <param name="width">The line width of the frame, in pixels.</param>
            <param name="label">A text to show beside the frame</param>
            <param name="labelSize">Text size</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawText(ABB.Robotics.Math.Vector3,System.String)">
            <summary>
            Creates a text markup.
            </summary>
            <param name="start">The 3D position that the text is anchored to.</param>
            <param name="text">The text to display.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawText(ABB.Robotics.Math.Vector3,System.String,System.Single,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Creates a text markup.
            </summary>
            <param name="start">The 3D position that the text is anchored to.</param>
            <param name="text">The text to display.</param>
            <param name="fontSize">Font size</param>
            <param name="backgroundColor">Background color</param>
            <param name="textColor">Text color</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawText(ABB.Robotics.Math.Vector3,System.String,System.Single,System.Drawing.Color,System.Drawing.Color,ABB.Robotics.Math.Vector2,System.Boolean)">
            <summary>
            Creates a text markup.
            </summary>
            <param name="start">The 3D position that the text is anchored to.</param>
            <param name="text">The text to display.</param>
            <param name="fontSize">Font size</param>
            <param name="backgroundColor">Background color</param>
            <param name="textColor">Text color</param>
            <param name="textOffset">Offset (in pixels) from the anchor point to the lower left corner of the text box.</param>
            <param name="arrow">Draw an arrow between the anchor point and the text box</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPart(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.Part,System.Double)">
            <summary>
            Adds an existing part with an added transparency.
            </summary>
            <param name="origin">The position and orientation of the part.</param>
            <param name="part">The part to add.</param>
            <param name="opacity">Relative opacity, where 0 is completely transparent and
            1 is the original material.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPart(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.Part)">
            <summary>
            Adds an existing part.
            </summary>
            <param name="origin">The position and orientation of the part.</param>
            <param name="part">The part to add.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawTrace(ABB.Robotics.Math.Vector3,System.Double,System.Double)">
            <summary>
            Creates a trace, e.g. a set of contiguous line segments that follows a path of points.
            </summary>
            <param name="start">The start point of the trace.</param>
            <param name="width">The width of the trace lines (in pixels).</param>
            <param name="maxLength">The maximum length of the trace.</param>
            <returns />
            <remarks>Call TemporaryGraphic.ContinueTrace() to add new points to the trace.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawLineStrip(System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Vector3},System.Double,System.Drawing.Color)">
            <summary>
            Creates contiguous lines between a collection of points.
            </summary>
            <param name="points">The points between which to draw lines.</param>
            <param name="width">The width of the lines (in pixels)</param>
            <param name="color">The color of the the lines.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawTexturedRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Bitmap)">
            <summary>
            Creates a textured rectangle
            </summary>
            <param name="origin">The position (lower-left corner) and orientation of the rectangle. The rectangle will be drawn in the X-Y plane.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="texture">The texture to apply to the rectangle.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawTexturedRectangle(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.Stations.Texture)">
            <summary>
            Creates a surface rectangle
            </summary>
            <param name="origin">One corner of the rectangle.</param>
            <param name="side1">The first side of the rectangle.</param>
            <param name="side2">The second side of the rectangle.</param>
            <param name="texture">The texture to apply to the rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawRectangleWithMaterial(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.Stations.Material)">
            <summary>
            Creates a surface rectangle <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic"/> with a <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/>.
            </summary>
            <param name="origin">One corner of the rectangle.</param>
            <param name="side1">The first side of the rectangle.</param>
            <param name="side2">The second side of the rectangle.</param>
            <param name="material">The material to apply to the rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawSurfaceRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Creates a surface rectangle
            </summary>
            <param name="origin">The position (lower-left corner) and orientation of the rectangle. The rectangle will be drawn in the X-Y plane.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawSurfaceRectangle(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Drawing.Color)">
            <summary>
            Creates a surface rectangle
            </summary>
            <param name="origin">One corner of the rectangle.</param>
            <param name="side1">The first side of the rectangle.</param>
            <param name="side2">The second side of the rectangle.</param>
            <param name="color">The color of the rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawSurfaceCircle(ABB.Robotics.Math.Matrix4,System.Double,System.Drawing.Color)">
            <summary>
            Creates a surface circle
            </summary>
            <param name="origin">The position (center-point) and orientation of the circle. The circle will be drawn in the X-Y plane.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="color">The color of circle.</param>
            <returns />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawMesh(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.MeshPart)">
            <summary>
            Draws a mesh.
            </summary>
            <param name="origin">The position and orientation of the mesh.</param>
            <param name="mesh">The mesh.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPointCloud(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3[],System.Drawing.Color,System.Double)">
            <summary>
            Creates a point cloud.
            </summary>
            <param name="origin">The position and orientation of the point cloud.</param>
            <param name="points">The position of the points (relative to origin).</param>
            <param name="color">Color of the points.</param>
            <param name="pointSize">Point size (in pixels).</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawPointCloud(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3[],System.Drawing.Color[],System.Double)">
            <summary>
            Creates a point cloud.
            </summary>
            <param name="origin">The position and orientation of the point cloud.</param>
            <param name="points">The position of the points (relative to origin).</param>
            <param name="colors">Colors of the points. Must have the same number of elements as points.</param>
            <param name="pointSize">Point size (in pixels).</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawParticleSystem(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.Stations.ParticleSystemData)">
            <summary>
            Creates a particle system.
            </summary>
            <param name="origin"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.DrawCable(ABB.Robotics.Math.Matrix4,System.Double,ABB.Robotics.Math.Vector3[],System.Drawing.Color)">
            <summary>
            Creates a cable-like primitive along a sequence of points.
            The cable can be dynamically updated using <see cref="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic.UpdateCable(System.Double,ABB.Robotics.Math.Vector3[])"/>.
            </summary>
            <param name="origin"></param>
            <param name="radius">Cable radius</param>
            <param name="points">Center points along the cable</param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through this TemporaryGraphicCollection object.
            </summary>
            <returns>
            An IEnumerator object that represents this TemporaryGraphicCollection object.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic[],System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a particular Array index.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicConverter">
            <summary>
            Abstract base class for 3D graphics and CAD converters
            </summary>
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.DisplayName">
            <summary>
            Display Name of the file format (e.g. "VRML", "Catia V5")
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.LicenseFeature">
            <summary>
            Gets or sets a license feature that is required to operate the converter.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.Extensions">
            <summary>
            Returns a collection of supported file extensions. Each extensions should be on the form ".xxx"
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.SupportsImport">
            <summary>
            Gets or sets if the converter supports import.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.SupportsExport">
            <summary>
            Gets or sets if the converter supports export.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.GetExportExtensions(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Gets the file extensions valid for export of the specified object.
            </summary>
            <param name="projectObject"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.GetExportFilter(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Gets a filter string for use in a file dialog for exporting the specified object.
            </summary>
            <param name="projectObject"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.FileFormatFilter">
            <summary>
            Gets a filter string for use in a file dialog when importing geometry.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.ImportAsync(System.String,ABB.Robotics.RobotStudio.Stations.GraphicImportSettings,ABB.Robotics.RobotStudio.IProgressCallback)">
            <summary>
            Override this to provide an Import implementation
            </summary>
            <remarks>
            The CanImport property must be set to true for this method to be called.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.CanExport(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Gets if the converter can export the specified object.
            </summary>
            <param name="projectObject"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.CanImportAsPart(System.String)">
            <summary>
            Returns true if the converter can convert an assembly to a single Part when importing (if the <see cref="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.AsPart"/> flag is true).
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.Export(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.Stations.GraphicExportSettings)">
            <summary>
            Override this to provide an Export implementation
            </summary>
            <remarks>
            The CanExport property must be set to true for this method to be called.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.SupportsCancel">
            <summary>
            Gets if the converter supports cancellation of an export operation.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicConverter.Hidden">
            <summary>
            Indicates that the converter should not be visible in GUI but available for API use.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings">
            <summary>
            Provides settings for <see cref="M:ABB.Robotics.RobotStudio.Stations.GraphicConverter.ImportAsync(System.String,ABB.Robotics.RobotStudio.Stations.GraphicImportSettings,ABB.Robotics.RobotStudio.IProgressCallback)"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.#ctor">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings"/> object with default settings.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.LevelsOfDetail">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels"/> that should be created.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.IsSurfaceModel">
            <summary>
            Gets or sets if the geometry should be treated as a surface model.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.IncludeHiddenElements">
            <summary>
            Gets or sets if hidden elements should be included in the imported model.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.AsPart">
            <summary>
            Gets or sets if an assembly should be converted to a single <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/> during import.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicImportSettings.SeparateInstances">
            <summary>
            Gets or sets if instanced geometry should be separated.
            </summary>
            <remarks>
            If false, instanced geometry will share a single definition.
            If true, each instance will have a separate copy of the definition.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicExportSettings">
            <summary>
            Base class for graphic export settings. 
            </summary>
            <exclude/>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GenericGraphicExportSettings">
            <summary>
            Contains common graphic export settings.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GenericGraphicExportSettings.#ctor">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.GenericGraphicExportSettings"/> with default settings.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GenericGraphicExportSettings.Scale">
            <summary>
            Scaling of positions from SI units (meters)
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GenericGraphicExportSettings.LeftHandedMatrices">
            <summary>
            Write transformations as left-handed matrices.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GenericGraphicExportSettings.IncludeInvisibleObjects">
            <summary>
            Include invisible objects in the exported file.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GenericGraphicExportSettings.BinaryFormat">
            <summary>
            Specify format if both binary and text is supported.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild">
            <summary>
            Represents an object that can act as the child in an <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment"/>.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IAttachableParent">
            <summary>
            Represents an object that can act as the parent in an <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IAttachableParent.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Test if the supplied child can be attached.
            </summary>
            <param name="child">The child to be tested.</param>
            <returns>True, if the supplied child can be attached, false otherwise</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IAttachableParent.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
            <summary>
            Attaches a child object to this object.
            </summary>
            <param name="child">The child to be attached.</param>
            <param name="mount">Specifies whether the child should be mounted, i.e. moved, on to the location of the parent</param>
            <param name="offset">Specifies the offset matrix to be used from the attachment point.
            This is only used when mount is set to True.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IAttachableParent.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Detaches a child object from this object.
            </summary>
            <param name="child">The child to be detached.</param>
            <returns>True, if the detachment succeded</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties">
            <summary>
            Represents an object that has a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.Properties">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection"/> that represents all the properties of this object.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.PropertyChanged">
            <summary>
            Raised when any property except Value changes on one of the properties in the <see cref="P:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.Properties"/> collection.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.PropertyValueChanged">
            <summary>
            Raised when the Value property changes on one of the properties in the <see cref="P:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.Properties" /> collection.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IHasFrames">
            <summary>
            Represents an object that has a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IHasFrames.Frames">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.FrameCollection"/> object that represents all the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame"/>s on this object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IHasGeometry">
            <summary>
            Represents a geometric entity or primitive.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IHasGeometry.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Finds the closest vertex, of the object, to the point.</summary>
            <param name="testPoint">The point.</param>
            <returns>The vertex.</returns>
            <example>Find closest Vertex.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Methods Example" lang="cs" title="Body Methods Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IHasGraphicComponents">
            <summary>
            Represents an object that has a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IHasGraphicComponents.GraphicComponents">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection"/> that contains the <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IHasIOConnections">
            <summary>
            Represents an object that has a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IHasIOConnections.Connections">
            <summary>
            Gets an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection"/> that represents all the I/O connections on this object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals">
            <summary>
            Represents an object that has a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignals">
            <summary>
            Gets an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignalCollection"/> that represents all the I/O signals on this object.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignalChanged">
            <summary>
            Raised when any property except Value changes on one of the signals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignals" /> collection.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignalValueChanged">
            <summary>
            Raised when the Value property changes on one of the signals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignals" /> collection
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IHasPropertyBindings">
            <summary>
            Represents an object that has a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IHasPropertyBindings.Bindings">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection"/> that represents all the bindings of this object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IHasTransform">
            <summary>
            Represents an object that has a <see cref="P:ABB.Robotics.RobotStudio.Stations.IHasTransform.Transform"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IHasTransform.Transform">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.IHasTransform.Transform"/> of this object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IConveyorParameterization">
            <summary>
            ABB Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IConveyorParameterization.GetBeltFrame(System.Double)">
            <summary>
            Calculates local transformation matrix after specified travel distance along the motion path or rotation of the conveyor.
            </summary>
            <param name="travelDistance">Distance from the conveyor's ReferenceFrame.</param>
            <returns>Matrix4</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IConveyorParameterization.GetTravelDistance(ABB.Robotics.Math.Vector3)">
            <summary>
            Calculates the closest travel distance from ReferenceFrame, along the motion path or rotation of the conveyor.
            </summary>
            <param name="position">Position in local coordinate system.</param>
            <returns>double</returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IConveyorParameterization.BeltRange">
            <summary>
            Defines the total range of the parameterization.
            </summary>
            <remarks>
            The range of a closed belt shall never exceed the actual range of one complete lap.
            The range of a rotational parameterization is defined in radians, at a maximum of a complete circle (2 * PI).
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IConveyorParameterization.IsRotational">
            <summary>
            If true, travel distance is an angle in radians. 
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal">
            <summary>
            Specifies information from the robot motion system that can be recorded.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderSignals">
            <summary>
            Gives access to the identities of the built in data recorder signals.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals">
            <summary>
            Gives access to built in data recorder signals, that represents information from the controller.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetJointSignalByMechanicalUnit(System.Guid,System.String,System.Int32)">
            <remarks>You can get slow performance, if this method is called inside a loop.
            Use GetSignals and GetJointIdByMechanicalUnit instead.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetEventLogSignal(System.Guid,System.Int32)">
            <remarks>You can get slow performance, if this method is called inside a loop.
            Use GetSignals and GetEventLogId instead.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.BuiltInControllerSourceSignals.GetMotionSignal(System.Guid,System.String,ABB.Robotics.RobotStudio.Stations.BuiltInDataRecorderMotionSignal)">
            <remarks>You can get slow performance, if this method is called inside a loop.
            Use GetSignals and GetMotionId instead.</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BuiltInSmartComponentSourceSignals">
            <summary>
            Gives access to built in data recorder signals, that represents information from SmartComponents.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.LightType">
            <summary>
            Specifies the type of light source that a <see cref="T:ABB.Robotics.RobotStudio.Stations.Light"/> represents.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.LightType.Ambient">
            <summary>
            Represents an infinite light in camera coordinates, that is used for ambient lighting.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.LightType.Infinite">
            <summary>
            Represents a light source with no position, just a direction. Can cast shadows.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.LightType.Point">
            <summary>
            Represents a light source with a position, direction and angle of influence. Can cast shadows.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.LightType.Spot">
            <summary>
            Represents a light source that casts light in all directions. Cannot cast shadows.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Light">
            <summary>
            Represents a light source in a station.
            </summary>
            <remarks>
            Requires <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.AdvancedLighting"/> to be enabled.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Light.#ctor(ABB.Robotics.RobotStudio.Stations.LightType)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Light"/> source of the specified type.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Light.CreateSpotLight(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Light"/> that represents a spot light source.
            </summary>
            <param name="position">Position of the light source.</param>
            <param name="direction">Direction of the light.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Light.CreateInfiniteLight(ABB.Robotics.Math.Vector3)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Light"/> that represents an infinite light source.
            </summary>
            <param name="direction">Direction of the light.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Light.CreatePointLight(ABB.Robotics.Math.Vector3)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Light"/> that represents a point light source.
            </summary>
            <param name="position">Position of the light source.</param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.MaxLightCount">
            <summary>
            Returns the maximum number of lights that can be enabled at any given time
            </summary>
            <remarks>
            If this number is exceeded, some of the lights in the station will be ignored.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.MaxShadowCount">
            <summary>
            Returns the maximum number of lights that can cast shadows at any given time.
            </summary>
            <remarks>
            If this number is exceeded, some of the lights in the station will not cast shadows.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Type">
            <summary>
            Returns the type of light.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.CastShadows">
            <summary>
            Gets or sets if this light casts shadows
            </summary>
            <remarks>
            Having multiple lights casting shadows can increase 3D rendering time noticeably.
            Note that point lights does not support shadows.
            Enabling shadows for the ambient light will turn on ambient occlusion.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Enabled">
            <summary>
            Gets or sets if this light is enabled, i.e. turned on
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Color">
            <summary>
            Gets or sets the color of the light.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.AmbientIntensity">
            <summary>
            Gets or sets the ambient intensity of the light.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.DiffuseIntensity">
            <summary>
            Gets or sets the diffuse intensity of the light.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.SpecularIntensity">
            <summary>
            Gets or sets the specular intensity of the light.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Position">
            <summary>
            Gets or sets the position of the light source. Not applicable to infinite lights.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Direction">
            <summary>
            Gets or sets the direction of the light. Not applicable to point lights.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Range">
            <summary>
            Gets or sets the maximum range of the light in meters
            </summary>
            <remarks>
            Set to 0 for infinite range
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.SpotAngle">
            <summary>
            Angle of the spotlight cone, in radians
            </summary>
            <remarks>
            Only used for spotlights.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Light.Transform">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Light.Transform"/> of the light.
            </summary>
            <remarks>
            In most cases, it is easier to set the Position and Direction properties directly.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.LightCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Light"/> objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.LightCollection.ResetLights">
            <summary>
            Resets all lights to their defaults
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Markup">
            <summary>
            Represents a text and pointer markup displayed in the 3D graphics.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Markup.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Markup.#ctor">
            <summary>
            Creates a new Markup
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Text">
            <summary>
            Gets or sets the text of the markup
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.FontSize">
            <summary>
            Gets or sets the font size (in pixels) of the markup text.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.BackgroundColor">
            <summary>
            Gets or sets the background color of the markup.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.TextColor">
            <summary>
            Gets or sets the color of the markup text.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Image">
            <summary>
            Gets or sets an image that is displayed in the markup
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Topmost">
            <summary>
            Gets or sets a value indicating that the markup will not be obscured by other objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Transform">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Markup.Transform"/> of the object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Markup.Visible">
            <summary>
            Gets or sets a value indicating whether the markup will
            be visible in the graphics.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MarkupCollection">
            <summary>
            A collection of Markup objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ParticleSystemData">
            <summary>
            Provides parameters for drawing a particle system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.SpawnRate">
            <summary>
            Number of particles to spawn per second
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.LifeTime">
            <summary>
            Maximum lifetime of particles (in seconds)
            </summary>
            <remarks>
            A particle is removed when either
            - its lifetime is reached
            - its size reaches zero
            - its opacity reaches zero
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartPositionRnd">
            <summary>
            Amount to randomize the start position of particles.
            </summary>
            <remarks> The position is randomized by ±0.5 * StartPositionRnd </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartVelocity">
            <summary>
            Initial velocity vector of particles (in m/s).
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartVelocityRnd">
            <summary>
            Amount to randomize the start velocity.
            </summary>
            <remarks> The velocity is randomized by ±0.5 * StartVelocityRnd </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.Acceleration">
            <summary>
            Acceleration vector of particles (in m/s²).
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartSize">
            <summary>
            Initial diameter of particles (in m).
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.StartSizeRnd">
            <summary>
            Amount to randomize the initial size of particles.
            </summary>
            <remarks> The size is randomized by ±0.5 * StartSizeRnd</remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.SizeRate">
            <summary>
            Rate of change of the size of particles (in m/s)
            </summary>
            <remarks>Can be positive or negative</remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.Color">
            <summary>
            Color of particles.
            </summary>
            <remarks>Initial opacity of particles is derived from the A (alpha) property.</remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ParticleSystemData.OpacityRate">
            <summary>
            Rate of change of the opacity of particles (per second)
            </summary>
            <remarks>Set to a negative value to fade out particles. Opacity ranges from 1.0 to 0.0</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ParticleSystem">
            <summary>
            Represents a system of particles in the 3D graphics that move and transform according to the parameters in a
            <see cref="T:ABB.Robotics.RobotStudio.Stations.ParticleSystemData"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ParticleSystem.#ctor(ABB.Robotics.RobotStudio.Stations.ParticleSystemData)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.ParticleSystem"/> object.
            </summary>
            <param name="data">Parameters for the particle system.</param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ParticleSystem.Data">
            <summary>
            Gets or sets the parameters for this particle system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ParticleSystem.Transform">
            <summary>
            The position and orientation of the particle system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ParticleSystem.Visible">
            <summary>
            Gets or sets if the particle system is visible in the graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ParticleSystem.Gfx">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ParticleSystemCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.ParticleSystem"/> objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint">
            <summary>
            Controls how two physics enabled <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/>s can move in relation to eachother.
            </summary>
            <remarks>
            Only supported in 64-bit build.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.#ctor(ABB.Robotics.RobotStudio.Stations.PhysicsConstraintType,ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Matrix4)">
            <summary>
            Creates a physics constraint (joint) of the specified type. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.#ctor(ABB.Robotics.RobotStudio.Stations.PhysicsConstraintType,ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.Math.Ray)">
            <summary>
            Creates a physics constraint (joint) of the specified type. 
            </summary>
            <param name="type"></param>
            <param name="firstComponent"></param>
            <param name="secondComponent"></param>
            <param name="axis"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.ConstraintType">
            <summary>
            Gets the type of constraint.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.FirstComponent">
            <summary>
            Gets the first <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> of the constraint.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.SecondComponent">
            <summary>
            Gets the second <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> of the constraint.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.GetElasticity">
            <summary>
            Returns the elasticity along the <b>constrained</b> degrees of freedom
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.SetElasticity(System.Double[])">
            <summary>
            Sets the elasticity along the <b>constrained</b> degrees of freedom
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.GetMotorParameters(System.Int32)">
            <summary>
            Gets motor parameters for the specified degree of freedom
            </summary>
            <param name="dof">Degree of freedom.
            Must be 0 for a rotational or prismatic constraint, 0 or 1 for a cylindrical constraint.
            </param>
            <returns></returns>
            <remarks>
            Not supported for ball or lock constraint.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.GetMotorDisplayParameters(System.Int32)">
            <summary>
            This property is obsolete and will be removed in a future version
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.SetMotorParameters(ABB.Robotics.RobotStudio.Stations.PhysicsMotorParameters,System.Int32)">
            <summary>
            Sets motor parameters for the specified degree of freedom
            </summary>
            <param name="motor"></param>
            <param name="dof">Degree of freedom.
            Must be 0 for a rotational or prismatic constraint, 0 or 1 for a cylindrical constraint.
            </param>
            <remarks>
            Not supported for ball or lock constraint.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.SetMotorDisplayParameters(ABB.Robotics.RobotStudio.Stations.PhysicsMotorDisplayParameters,System.Int32)">
            <summary>
            This method is obsolete and will be removed in a future version
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.GetLimitParameters(System.Int32)">
            <summary>
            Gets limit parameters for the specified degree of freedom
            </summary>
            <param name="dof">Degree of freedom.
            Must be 0 for a rotational or prismatic constraint, 0 or 1 for a cylindrical constraint.
            </param>
            <returns></returns>
            <remarks>
            Not supported for ball or lock constraint.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.SetLimitParameters(ABB.Robotics.RobotStudio.Stations.PhysicsLimitParameters,System.Int32)">
            <summary>
            Sets limit parameters for the specified degree of freedom
            </summary>
            <param name="limit"></param>
            <param name="dof">Degree of freedom.
            Must be 0 for a rotational or prismatic constraint, 0 or 1 for a cylindrical constraint.
            </param>
            <remarks>
            Not supported for ball or lock constraint.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.GetSpringParameters(System.Int32)">
            <summary>
            Gets spring parameters for the specified degree of freedom
            </summary>
            <param name="dof">Degree of freedom.
            Must be 0 for a rotational or prismatic constraint, 0 or 1 for a cylindrical constraint.
            </param>
            <returns>Spring parameters</returns>
            <remarks>
            Not supported for ball or lock constraint.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.SetSpringParameters(ABB.Robotics.RobotStudio.Stations.PhysicsSpringParameters,System.Int32)">
            <summary>
            Sets spring parameters for the specified degree of freedom
            </summary>
            <param name="spring">Spring parameters</param>
            <param name="dof">Degree of freedom.
            Must be 0 for a rotational or prismatic constraint, 0 or 1 for a cylindrical constraint.
            </param>
            <remarks>
            Not supported for ball or lock constraint.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.GetfrictionParameters(System.Int32)">
            <summary>
            This method is obsolete and will be removed in a future version.
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.SetFrictionParameters(ABB.Robotics.RobotStudio.Stations.PhysicsFrictionParameters,System.Int32)">
            <summary>
            This type is obsolete and will be removed in a future version.
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.GetFrictionForce(System.Int32)">
            <summary>
            Gets the frictional force/torque that is applied to this joint
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.SetFrictionForce(System.Double,System.Int32)">
            <summary>
            Sets the frictional force/torque that should applied to this joint
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.NumDof">
            <summary>
            Gets the number of <i>configurable</i> degrees of freedom (number of limits, springs and motors).
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint.CopyPropertiesTo(ABB.Robotics.RobotStudio.Stations.PhysicsConstraint)">
            <summary>
            Copies all constraint properties to the given target constraint.
            </summary>
            <remarks>
            Source and target must be of the same type.
            Copied properties include motor, spring, limit, friction and elasticity parameters
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintType">
            <summary>
            Specifies the type of a <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintType.Rotational">
            <summary>
            Allows rotation in one direction around an axis
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintType.Ball">
            <summary>
            Allows rotation in any direction around a point
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintType.Lock">
            <summary>
            Locks the two component together with no degrees of freedom
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintType.Prismatic">
            <summary>
            Allows translation along an axis
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintType.Cylindrical">
            <summary>
            Allows translation along and rotation around an axis
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsMotorParameters">
            <summary>
            Specifies motor parameters for one degree of freedom of a <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotorParameters.Enabled">
            <summary>
            True if the motor is enabled
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotorParameters.LockedAtZeroSpeed">
            <summary>
            True if the motor should try to lock the joint when DesiredSpeed is zero
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotorParameters.DesiredSpeed">
            <summary>
            Desired linear/angular speed of the joint.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotorParameters.MaxForce">
            <summary>
            Maximum force/torque that the motor can apply in order to keep the desired speed
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsMotorDisplayParameters">
            <summary>
            This type is obsolete and will be removed in a future version.
            </summary>
            <exclude/>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotorDisplayParameters.Enabled">
            <summary>
            True if the motor is enabled
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotorDisplayParameters.LockedAtZeroSpeed">
            <summary>
            True if the motor should try to lock the joint when DesiredSpeed is zero
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotorDisplayParameters.DesiredSpeed">
            <summary>
            Desired linear/angular speed of the joint.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotorDisplayParameters.MaxForce">
            <summary>
            Maximum force/torque that the motor can apply in order to keep the desired speed
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsLimitParameters">
            <summary>
            Specifies limit paramters for one degree of freedom of a <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsLimitParameters.Enabled">
            <summary>
            True if the limit is enabled
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsLimitParameters.MinLimit">
            <summary>
            Minimum joint value (length or angle)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsLimitParameters.MaxLimit">
            <summary>
            Maximum joint value (length or angle)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsLimitParameters.MaxForce">
            <summary>
            Maximum force/torque that can be applied to satisfy the limit constraint
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsSpringParameters">
            <summary>
            Specifies spring parameters for one degree of freedom of a <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSpringParameters.Enabled">
            <summary>
            True if the spring is enabled
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSpringParameters.Position">
            <summary>
            Spring position
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSpringParameters.Elasticity">
            <summary>
            Spring elasticity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSpringParameters.DampingCoefficient">
            <summary>
            Damping coefficient
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSpringParameters.MaxForce">
            <summary>
            Maximum force/torque that can be applied to satisfy the spring constraint
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsFrictionParameters">
            <summary>
            Specifies spring parameters for one degree of freedom of a <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsFrictionParameters.Enabled">
            <summary>
            True if friction is enabled
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsFrictionParameters.MaxForce">
            <summary>
            Maximum force/torque that can be applied
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsFrictionParameters.FrictionCoefficient">
            <summary>
            Friction coefficient (between 0 and 1)
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintCollection">
            <summary>
            Represents a collection <see cref="T:ABB.Robotics.RobotStudio.Stations.PhysicsConstraint"/> objects
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintCollection.Add(ABB.Robotics.RobotStudio.Stations.PhysicsConstraint)">
            <summary>
            Adds a new item to the collection.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PhysicsConstraintCollection.Remove(ABB.Robotics.RobotStudio.Stations.PhysicsConstraint)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.AnnotationCollection">
            <summary>
            Represents a collection <see cref="T:ABB.Robotics.RobotStudio.Stations.Annotation"/> objects
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.AnnotationCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.AnnotationCollection.Add(ABB.Robotics.RobotStudio.Stations.Annotation)">
            <summary>
            Adds a new item to the collection.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.AnnotationCollection.Remove(ABB.Robotics.RobotStudio.Stations.Annotation)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsMotionControl">
            <summary>
            Specifies the physical behavior of a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotionControl.None">
            <summary>
            The object does not take part in the physics simulation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotionControl.Static">
            <summary>
            The object interacts with other objects in the physics simulation, but its position is fixed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotionControl.Kinematic">
            <summary>
            The object interacts with other objects in the physics simulation, but its motion is not affected.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMotionControl.Dynamic">
            <summary>
            The motion of the object is controlled by the physics simulation.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsCollisionProperties">
            <summary>
            Specifies settings for the collision detection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/> during physics simulation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsCollisionProperties.UseOriginalGeometry">
            <summary>
            Use the full geometry instead of a simplified representation.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial">
            <summary>
            Specifies bulk and surface physical properties of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.SurfaceViscosity">
            <summary>
            Surface viscosity
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.SurfaceRoughness">
            <summary>
            Surface roughness (friction coefficient)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.SurfaceAdhesion">
            <summary>
            Surface adhesion
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.SurfaceAdhesionOverlap">
            <summary>
            Surface adhesion overlap
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.Density">
            <summary>
            Bulk density
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.Damping">
            <summary>
            Bulk damping coefficient
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.PoissonsRatio">
            <summary>
            Poisson's ratio
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.Restitution">
            <summary>
            Restitution
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.YoungsModulus">
            <summary>
            Young's modulus
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.CableDamping">
            <summary>
            Damping coefficient for cable
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.CableYoungsModulus">
            <summary>
            Young's modulus for cable
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.Default">
            <summary>
            Gets a default material similar to steel.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PhysicsMaterial.CableDefault">
            <summary>
            Gets a default material for cables.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsSurfaceVelocity">
            <summary>
            Specifies properties for simulation of surface movement on a physics enabled <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/> .
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSurfaceVelocity.Direction">
            <summary>
            Direction of movement.
            </summary>
            <remarks>
            Ignored if <see cref="F:ABB.Robotics.RobotStudio.Stations.PhysicsSurfaceVelocity.ControlPoints"/> are specified.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSurfaceVelocity.Speed">
            <summary>
            Speed of movement.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSurfaceVelocity.ControlPoints">
            <summary>
            Points that specify a path of travel, instead of a single direction.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSurfaceVelocity.Enabled">
            <summary>
            Enables or disables surface movement.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PhysicsSimulationProperties">
            <summary>
            Specifies global properties of the physics simulation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSimulationProperties.Gravity">
            <summary>
            Specifies the gravity used by the physics simulation. Default is 9.81 m/s2.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSimulationProperties.Floor">
            <summary>
            Enable or disable the global floor that prevent objects from falling infinitely.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PhysicsSimulationProperties.FloorHeight">
            <summary>
            Specifies the position of the floor in the global z coordinate.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PointCloud">
            <summary>
            Represents a large number of point primitives in the 3D graphics.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PointCloud.#ctor">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.PointCloud"/> object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Points">
            <summary>
            Gets or sets the positions of the points.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.PointSize">
            <summary>
            Gets or sets the size of all points, in pixels.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Color">
            <summary>
            Get or set the color used for all points. Only used if <see cref="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Colors"/> is null.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Colors">
            <summary>
            Sets individual colors per point. If null, <see cref="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Color"/> is used for all points.
            </summary>
            <remarks>
            Must have the same number of elements as the <see cref="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Points"/> vector.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Transform">
            <summary>
            Gets or sets the position and orientation of the point cloud.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Visible">
            <summary>
            Gets or sets if the point cloud is visible in the graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PointCloud.Gfx">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PointCloudCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.PointCloud"/> objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsPathCallInstruction">
            <summary>
            An <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstruction"/> that represents a call to a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathCallInstruction.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathCallInstruction"/>.
            </summary>
            <param name="procedureName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/> to call.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathCallInstruction.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathCallInstruction.FindPathProcedure">
            <summary>
            Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/> that this instruction refers to
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch">
            <summary>
            Represents a stopwatch that (when displayed in the stopwatch UI) is automatically started and stopped by triggers during simulation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch.#ctor">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch"/> object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch.StartTrigger">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger"/> that starts the stopwatch.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch.StopTrigger">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger"/> that stops the stopwatch.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType">
            <summary>
            Represents the type of trigger for starting or stopping a <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType.None">
            <summary>
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch"/> is started or stopped manually.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType.SimulationStartStop">
            <summary>
            The trigger is activated when simulation starts (for <see cref="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch.StartTrigger"/>)
            or stops (for <see cref="P:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch.StopTrigger"/>).
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType.TargetChanged">
            <summary>
            The trigger is activated when robot motion changes to the robtarget specified by <see cref="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Name"/>.
            </summary>
            <remarks><see cref="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Source"/> should be an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.</remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTriggerType.IOValue">
            <summary>
            The trigger is activated when the I/O signal specified by <see cref="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Name"/>
            reaches the value specified by <see cref="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Value"/>.
            </summary>
            <remarks><see cref="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Source"/> should be an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/> or <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals"/>.</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger">
            <summary>
            Represents a triggger with a condition that should be met for a <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch"/> to be started or stopped.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.TriggerType">
            <summary>
            Type of trigger.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Source">
            <summary>
            The <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> that the trigger refers to.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Name">
            <summary>
            Name of the robtarget or I/O signal that the trigger refers to.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.StopwatchTrigger.Value">
            <summary>
            Value of the I/O signal for the trigger to be activated.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatchCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch"/> objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.StationServices">
            <exclude/>
            <summary>
            Contains high-level methods for working with stations.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.StationServices.PackAndGo(ABB.Robotics.RobotStudio.Stations.Station,System.String,ABB.Robotics.RobotStudio.Stations.PackAndGoLibraryCopyOptions,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a Pack &amp; Go file which includes a station and its dependencies.
            </summary>
            <param name="station">Station to pack.</param>
            <param name="path">Path to the Pack &amp; Go (.rspag) file.</param>
            <param name="libraryCopyOptions">Specifies how libraries should be packed.</param>
            <param name="abbLibraries">Include standard ABB library files in the package. Normally this is not needed.</param>
            <param name="includeBackup">Include backups of controller systems.</param>
            <param name="includeExternalMedia">Include media for external controller options.</param>
            <returns></returns>
            <remarks>
            This method uses an undo step to roll back any changes made to the station. If the call is wrapped in an outer undo step,
            make sure it is closed immediately and does not contain any other changes.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.StationServices.PackAndGo(ABB.Robotics.RobotStudio.Stations.Station,System.String)">
            <summary>
            Creates a Pack &amp; Go file which includes a station and its dependencies.
            </summary>
            <param name="station">Station to pack.</param>
            <param name="path">Path to the Pack &amp; Go (.rspag) file.</param>
            <returns></returns>
            <remarks>
            This method uses an undo step to roll back any changes made to the station. If the call is wrapped in an outer undo step,
            make sure it is closed immediately and does not contain any other changes.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.StationServices.UnpackAndWorkAsync(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Unpacks a Pack &amp; Go and optonally loads the contained station.
            </summary>
            <param name="filePath"></param>
            <param name="destinationPath"></param>
            <param name="mediaPoolPath"></param>
            <param name="restoreBackup"></param>
            <param name="overwrite"></param>
            <param name="loadStation">True if the unpacked station should be loaded in RobotStudio and become the active station, false to not load the station.</param>
            <returns>The <cee cref="T:Task{PackAndGoResult}"/> containing the result of the Unpack &amp; Work operation. <see cref="P:ABB.Robotics.RobotStudio.Stations.PackAndGoResult.Success"></see> indicates sucess or failure. </returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PackAndGoResult">
            <summary>
            Represents the result of StationServices.PackAndGo and StationServices.UnpackAndWork.
            </summary>
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PackAndGoResult.Reason">
            <summary>
            Gets or sets the reason for failure.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PackAndGoResult.Success">
            <summary>
            Gets if the operation was a success.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PackAndGoResult.MaxTargetPathLength">
            <summary>
            Gets or sets the maximum length of the target path. If this is exceeded, virtual controllers may malfunction.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PackAndGoResult.Data">
            <summary>
            ABB Internal use
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PackAndGoResult.RestoreFailed">
            <summary>
            Gets or sets if restore failed for any controller in the station.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag">
            <summary>
            Represents a tag that can be applied to any object that is part of a Station
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag.Visible">
            <summary>
            Gets or sets whether tagged objects should be visible in browsers and graphics.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ProjectObjectTagCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.ProjectObjectTag" /> objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConveyorBuilder">
            <summary>
            ABB Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConveyorBuilder.#ctor">
            <summary>
            ABB Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorBuilder.Name">
            <summary>
            Gets or sets the name of the conveyor.
            </summary>
            <value>Name of conveyor.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorBuilder.SizeProperty">
            <summary>
            Length for a linear conveyor or radius for a rotational conveyor. (meters)
            </summary>
            <remarks>
            For Linear parameterization this value indicates length of the conveyor belt.
            For Rotational parameterization this value indicates radius for the motion path of the conveyor belt.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IConveyorConnectionImplementation">
            <summary>
            ABB internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConveyorICIConnection">
            <summary>
            Used for simulation of an ICI Conveyor device. This is the main mode for
            conveyor tracking after ~6.06.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorLegacyConnection.ObjectQueue">
            <summary>
            Get a copy of the queue of objects. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConveyorLegacyConnection.NumObjectsInQueue">
            <summary>
            Returns the number of objects in the queue. 
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Asset">
            <summary>
            An asset is a piece of binary content that is embedded in a Smart Component.
            RobotStudio uses assets to store string resources and the Code Behind assembly.
            Any kind of binary data that is needed by the smart component can be added as an asset.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Asset.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Asset.OriginalSource">
            <summary>
            Gets or sets the path to the document that this <see cref="T:ABB.Robotics.RobotStudio.Stations.Asset"/> was created from.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Asset.AllowSave">
            <summary>
            Indicates if the user is allowed to save or view the asset data.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Asset.GetData">
            <summary>
            Gets the binary data content of this asset.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte" /> that represents the binary data content of this asset.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Asset.SetData(System.Byte[])">
            <summary>
            Sets the binary data content of this asset.
            </summary>
            <param name="data">An array of <see cref="T:System.Byte" /> that represents the binary data content of this asset.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.AssetCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Asset" />s contained by a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.AssetCollection.Changed">
            <summary>
            Raised when an item is added to or removed from the collection
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.Add(ABB.Robotics.RobotStudio.Stations.Asset)">
            <summary>
            Adds an <see cref="T:ABB.Robotics.RobotStudio.Stations.Asset" /> to the collection.
            </summary>
            <param name="asset">The asset to add to the collection.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.AssetCollection.Remove(ABB.Robotics.RobotStudio.Stations.Asset)">
            <summary>
            Removes an <see cref="T:ABB.Robotics.RobotStudio.Stations.Asset" /> from the the collection.
            </summary>
            <param name="asset">The asset to remove from the collection.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Attachment">
            <summary>
            You can attach an object (child) to another object (parent).
            Attachments can be created on part level and on mechanism level.
            When an object has been attached to a parent, moving the parent also moves the child.
            One of the most common attachments is to attach a tool to a robot
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Attachment.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Attachment.AttachmentParent">
            <summary>
            Gets the ProjectObject that is the parent of this Attachment.
            </summary>
            <example>Get AttachmentParent. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Attachments Properties Example" lang="cs" title="Attachments Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Attachment.AttachmentChild">
            <summary>
            Gets the ProjectObject that is the child of this Attachment.
            </summary>
            <example>Get AttachmentChild. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Attachments Properties Example" lang="cs" title="Attachments Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Attachment.Offset">
            <summary>
            Gets or sets the Offset of the Attachment, e.g the relative transform from parent to child.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.AttachmentCollection">
            <summary>
            A Collection of Attchment objects.
            </summary>
            <example>Get Attchment Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Attachments Properties Example" lang="cs" title="Attachments Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.Add(ABB.Robotics.RobotStudio.Stations.Attachment)">
            <summary>
            Used when moving <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" />s from one station to another.
            If you want to add an attachment within a station use <b>Attach</b> method on the <b>GraphicComponentGroup</b> , <b>Flange</b>, <b>Part</b> or <b>ToolDataInfo</b> class instead.
            </summary>
            <example>Move Attachment.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Move Attachments Example" lang="cs" title="Move Attachments Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.AttachmentCollection.Remove(ABB.Robotics.RobotStudio.Stations.Attachment)">
            <summary>
            Used when moving Attachments from one station to another.
            If you want to remove an attachment within a station use <b>Detach</b> method on the <b>GraphicComponentGroup</b>, <b>Flange</b>, <b>Part</b> or <b>ToolDataInfo</b> class instead.
            </summary>
            <example>Move Attachment.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Move Attachments Example" lang="cs" title="Move Attachments Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Body">
            <summary>
            A body is typically a single 3D solid or a 2D surface, but it can also be several disjoint lumps treated as one body.
            It is the highest level object in the geometric model. Several bodies can be grouped in a <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" />.<br /><img src="GeometryTopology.jpg" /></summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Name">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.BodyType">
            <summary>Returns the type of the body.</summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Shells">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.ShellCollection"/> that contains all the shells in the body.
            </summary>
            <example>Get Shells. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Wires">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.WireCollection"/> that contains all the wires in the body.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Faces">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.FaceCollection"/> that contains all the faces in the body.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.SurfaceArea">
            <summary>
            Gets the surface area of the body.
            </summary>
            <example>Get SurfaceArea. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Volume">
            <summary>
            Gets the volume of the body.
            </summary>
            <example>Get Volume. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.CenterOfGravity">
            <summary>
            Gets the center of gravity of the body as a <see cref="T:ABB.Robotics.Math.Vector3"/>.
            </summary>
            <example>Get CenterOfGravity. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.MomentOfInertia">
             <summary>
             Gets the moment of inertia of the body as a <see cref="T:ABB.Robotics.Math.Matrix3"/>.
             </summary>
            <remarks>
             The moment of inertia of an object about a given axis describes how difficult it is to change its angular motion about that axis. 
             For the same object, different axes of rotation will have different moments of inertia about those axes.
             The <b>moment of inertia</b> summarize all moments of inertia of an object as a matrix.
            </remarks>
             <example>Get MomentOfInertia. 
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
             </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Visible">
            <summary>
            Gets or sets whether the body should be visible in the graphics or not.
            </summary>
            <example>Get/Set Visible. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Color">
            <summary>
            Gets or sets the body color in the graphics.
            </summary>
            <remarks>
            Returns Color.Empty if color is ambiguous.
            </remarks>
            <example>Get/Set Color. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Opacity">
            <summary>
            Gets or sets the opacity of the body
            </summary>
            <remarks>
            Valid values are 0.0 (fully transparent) through 1.0 (fully opaque).
            Returns 1.0 if opacity is ambiguous.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Parent">
            <summary>
            Gets the parent object of the body.
            </summary>
            <example>Get Parent. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Body.Transform">
            <summary>
            Gets the transform object of the body.
            </summary>
            <example>Get Transform. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.IsPointInside(ABB.Robotics.Math.Vector3)">
            <summary>Tests if a point is inside the body.</summary>
            <param name="point">The point to test.</param>
            <returns>True if the point is inside the body, else false.</returns>
            <example>IsPointInside.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Methods Example" lang="cs" title="Body Methods Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Copy">
            <summary>Creates a copy of the  body.</summary>
            <returns>The copy.</returns>
            <example>Copy Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Methods Example" lang="cs" title="Body Methods Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.FindFeatures(System.Double,System.Double,System.Double,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>Finds features (holes, chamfers and blends) that satisfy specified conditions.</summary>
            <param name="blendRadius">The maximum radius of blends, or zero to disable.</param>
            <param name="chamferWidth">The maximum width of chamfers, or zero to disable.</param>
            <param name="holeDiameter">The maximum diameter of holes, or zero to disable.</param>
            <param name="progressDelegate">Progress notification callback (can be null).</param>
            <returns>The array of found features</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Defeature(System.Double,System.Double,System.Double,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>Removes features (holes, chamfers and blends).</summary>
            <param name="blendRadius">The maximum radius of blends to remove, or zero to disable.</param>
            <param name="chamferWidth">The maximum width of chamfers to remove, or zero to disable.</param>
            <param name="holeDiameter">The maximum diameter of holes to remove, or zero to disable.</param>
            <param name="progressDelegate">Progress notification callback (can be null).</param>
            <returns>The new defeatured body.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Intersect(ABB.Robotics.RobotStudio.Stations.Body)">
            <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of intersection of this body and the the one provided.</summary>
            <param name="body">The body to intersect this body with.</param>
            <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see>.</returns>
            <example>Intersect Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body BooleanOperations Example" lang="cs" title="Body BooleanOperations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.TryIntersect(ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.RobotStudio.Stations.Body[]@)">
            <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of intersection of this body and the the one provided.</summary>
            <param name="body">The body to intersect this body with.</param>
            <param name="bodies">The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see>.</param>
            <example>Intersect Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body BooleanOperations Example" lang="cs" title="Body BooleanOperations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Cut2(ABB.Robotics.RobotStudio.Stations.Body)">
            <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the cut of this body with the one provided.</summary>
            <param name="body">The body to cut this body with.</param>
            <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></returns>
            <example>Cut Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body BooleanOperations Example" lang="cs" title="Body BooleanOperations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.TryCut(ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.RobotStudio.Stations.Body[]@)">
            <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the cut of this body with the one provided.</summary>
            <param name="body">The body to cut this body with.</param>
            <param name="bodies">The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></param>
            <example>Cut Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body BooleanOperations Example" lang="cs" title="Body BooleanOperations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Join(ABB.Robotics.RobotStudio.Stations.Body,System.Boolean)">
            <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the union of this body with the one provided.</summary>
            <param name="body">The body to join this body with.</param>
            <param name="separateResultingBody">If true, returns an array with one element for each disjunct piece in the joined body. If false, returns an array with one element containing the joined body.</param>
            <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></returns>
            <example>Join Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Join Separate Example" lang="cs" title="Body Join Separate Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Join(ABB.Robotics.RobotStudio.Stations.Body)">
            <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the union of this body with the one provided.</summary>
            <param name="body">The body to join this body with.</param>
            <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></returns>
            <example>Join Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Join Separate Example" lang="cs" title="Body Join Separate Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.TryJoin(ABB.Robotics.RobotStudio.Stations.Body,System.Boolean,ABB.Robotics.RobotStudio.Stations.Body[]@)">
            <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the union of this body with the one provided.</summary>
            <param name="body">The body to join this body with.</param>
            <param name="separateResultingBody">If true, creates an array with one element for each disjunct piece in the joined body. If false, creates an array with one element containing the joined body.</param>
            <param name="joined">The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></param>
            <example>Join Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Join Separate Example" lang="cs" title="Body Join Separate Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Separate">
            <summary>Creates an array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see> consisting of the disjunct lumps of this body.</summary>
            <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body(s)</see></returns>
            <example>Separate Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Join Separate Example" lang="cs" title="Body Join Separate Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateFromFace(ABB.Robotics.RobotStudio.Stations.Face)">
            <summary>
            Creates a new Body consisting only of a copy of the given Face
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Check(System.String)">
            <summary>Checks a body's geometry, topology, and data structure for errors.</summary>
            <param name="logFile">Name of the logfile to be created.</param>
            <returns>The numbers of errors.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Check">
            <summary>Checks a body's geometry, topology, and data structure for errors.</summary>
            <returns>The numbers of errors.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Heal(ABB.Robotics.RobotStudio.Stations.Body)">
            <summary>Heals the <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> (performs all phases of the healing process) using intelligently selected tolerances.</summary>
            <param name="body">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> to be healed.</param>
            <returns>The new healed <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateArc(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single wire.
            The wire will start at the <c>start</c> position go via the <c>circumference</c> position and end in the <c>end</c> position</summary>
            <param name="start">The start position of the arc.</param>
            <param name="end">The end position of the arc.</param>
            <param name="circumference">The via position of the arc.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Arc.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateCircle(ABB.Robotics.Math.Matrix4,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single circle shaped wire.</summary>
            <param name="center">A matrix that defines the center position and rotation of the circle</param>
            <param name="radius">The radius of the circle</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Circle.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateEllipse(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single ellipse shaped wire.</summary>
            <param name="center">A position that defines the center position of the ellipse</param>
            <param name="majorAxisEnd">A position specifying the end of the major axis</param>
            <param name="minorAxisDist">The distace from the center to the minor axis, i.e. the radius of the minor axis</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Ellipse.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateEllipticArc(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single elliptical arc shaped wire.</summary>
            <param name="center">Defines the center position of the arc.</param>
            <param name="majorAxisEnd">Defines the end position of the major axis.</param>
            <param name="minorAxisEnd">Defines the end position of the minor axis.</param>
            <param name="startAngle">Defines the start angle.</param>
            <param name="endAngle">Defines the end angle.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Eliptic Arc.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateLine(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single line shaped wire.</summary>
            <param name="start">Defines the start position of the line.</param>
            <param name="end">Defines the end position of the line.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Line.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreatePolygon(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Int32)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single polygon shaped wire.</summary>
            <param name="start">Defines the center position of the polygon.</param>
            <param name="vertex">Defines the a position at one of the corners/vertices of the polygon,
            used to calculate distance between the center point and the vertices in the polygon.</param>
            <param name="numberEdges">Defines the nummber of edges in the polygon.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Polygon.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreatePolyLine(ABB.Robotics.Math.Vector3[])">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single polyline wire.</summary>
            <param name="vertices">Defines the vertices/positions used to create the polyline.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Polyline.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
            <remarks>
            The wire is considered closed if the first and last vertices coincide.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSpline(ABB.Robotics.Math.Vector3[],System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single spline wire.</summary>
            <param name="vertices">Defines the vertices/positions used to create the spline.</param>
            <param name="tolerance">Defines the tolerance used to shape the spline at each vertice.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Spline.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSpline(ABB.Robotics.Math.Vector3[],System.Double,System.Boolean)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single spline wire.</summary>
            <param name="vertices">Defines the vertices/positions used to create the spline.</param>
            <param name="tolerance">Defines the tolerance used to shape the spline at each vertice.</param>
            <param name="periodic">Create a periodic spline if the start and end vertices coincide.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Spline.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of one single rectangle shaped wire.</summary>
            <param name="corner">Defines the corner position and rotation of the rectangle.</param>
            <param name="length">Defines the length of the rectangle.</param>
            <param name="width">Defines the width of the rectangle.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Rectangle.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateCurves Example" lang="cs" title="Body CreateCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidBox(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid box.</summary>
            <param name="origin">Defines the origin position and rotation of the box.</param>
            <param name="size">Defines the length, height and width of the box. </param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Solid Box.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSolids Example" lang="cs" title="Body CreateSolids Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidCone(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid cone.</summary>
            <param name="center">Defines the center position and rotation of the cone.</param>
            <param name="radius">Defines the radius of the base circle of the cone.</param>
            <param name="height">Defines the height of the cone.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Solid Cone.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSolids Example" lang="cs" title="Body CreateSolids Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidCone(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid elliptical cone.</summary>
            <param name="center">Defines the center position and rotation of the cone.</param>
            <param name="radiusx">Defines the radius of the base ellipse in the x direction.</param>
            <param name="radiusy">Defines the radius of the base ellipse in the y direction.</param>
            <param name="height">Defines the height of the cone.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidCylinder(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid cylinder.</summary>
            <param name="center">Defines the center position and rotation of the cylinder.</param>
            <param name="radius">Defines the radius of the cylinder.</param>
            <param name="height">Defines the height of the cylinder.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Solid Cylinder.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSolids Example" lang="cs" title="Body CreateSolids Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidCylinder(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid elliptical cylinder.</summary>
            <param name="center">Defines the center position and rotation of the cylinder.</param>
            <param name="radiusx">Defines the radius of the cylinder in the x direction.</param>
            <param name="radiusy">Defines the radius of the cylinder in the y direction.</param>
            <param name="height">Defines the height of the cylinder.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidPyramid(ABB.Robotics.Math.Matrix4,System.Double,System.Double,System.Int32)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid pyramid.</summary>
            <param name="center">Defines the center position and rotation of the pyramid.</param>
            <param name="radius">Defines the distance from center point to the corners of the base of the pyramid.</param>
            <param name="height">Defines the height of the pyramid.</param>
            <param name="numberSides">Defines the number of sides of the pyramid.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Solid Pyramid.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSolids Example" lang="cs" title="Body CreateSolids Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidSphere(ABB.Robotics.Math.Vector3,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid sphere.</summary>
            <param name="center">Defines the center position of the sphere.</param>
            <param name="radius">Defines the radius of the sphere.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Solid Sphere.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSolids Example" lang="cs" title="Body CreateSolids Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidTorus(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a solid torus.</summary>
            <param name="center">Defines the center position and rotation of the torus.</param>
            <param name="majorRadius">Defines the major radius of the torus.</param>
            <param name="minorRadius">Defines the minor radius of the torus.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Solid Torus.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSolids Example" lang="cs" title="Body CreateSolids Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSolidCapsule(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
            <summary>
            Creates a new capsule (a cylinder with spherical endcaps).
            </summary>
            <param name="center">Defines the position and rotation of the capsule</param>
            <param name="radius">Defines the radius of the capsule</param>
            <param name="height">Defines the total height (including endcaps) of the capsule</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfaceCircle(ABB.Robotics.Math.Matrix4,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface circle.</summary>
            <param name="center">Defines the center position and rotation of the circle.</param>
            <param name="radius">Defines the radius of the circle.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Surface Circle.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSurfaces Example" lang="cs" title="Body CreateSurfaces Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfaceFromCurve(ABB.Robotics.RobotStudio.Stations.Wire)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface defined by the curve.</summary>
            <param name="wire">Defines the circumference of the surface</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <remarks>The wire supplied must be closed, i.e. the start and end point must coincide.</remarks>
            <example>Create Surface from Curve.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSurfaces Example" lang="cs" title="Body CreateSurfaces Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfacePolygon(ABB.Robotics.Math.Vector3[])">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface polygon defined by a cirquit of vertices.</summary>
            <param name="outerLoop">The vertices that define the outer edge of the polygon.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <remarks>The loop must be planar, but doesn't have to be closed (a closing vertex is added automatically).</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfacePolygon(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Int32)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface polygon.</summary>
            <param name="start">Defines the center position on the polygon.</param>
            <param name="vertex">Defines a corner vertex of the polygon, used to calculate the distance between
            center poit and the vertices of the polygon.</param>
            <param name="numberEdges">Defines the number of edges of the polygon.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Surface Polygon.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSurfaces Example" lang="cs" title="Body CreateSurfaces Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfacePolygonWithHoles(ABB.Robotics.Math.Vector3[],ABB.Robotics.Math.Vector3[][])">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a surface polygon defined by outer and inner vertices.</summary>
            <param name="outerLoop">The vertices that define the outer edge of the polygon.</param>
            <param name="innerLoops">Arrays of vertices that define edges of holes in the polygon.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <remarks>All loops must be coplanar, but they don't have to be closed (a closing vertex is added automatically).</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSurfaceRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of a rectangle polygon.</summary>
            <param name="corner">Defines the corner position and rotation of the rectangle.</param>
            <param name="length">Defines the length of the rectangle.</param>
            <param name="width">Defines the width of the rectangle.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Suface Rectangle.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CreateSurfaces Example" lang="cs" title="Body CreateSurfaces Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateIntersectionCurve(ABB.Robotics.RobotStudio.Stations.Face,ABB.Robotics.RobotStudio.Stations.Face)">
            <summary>Creates a new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see> consisting of the curve(s) at the intersection of two faces.</summary>
            <param name="face1">Defines the first face to use.</param>
            <param name="face2">Defines the second face to use.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateIntersectionCurve(ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.RobotStudio.Stations.Body)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see> consisting of the curve(s) at the intersection of two bodies.</summary>
            <param name="body1">Defines the first body to use.</param>
            <param name="body2">Defines the second body to use.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see></returns>
            <example>Create Intersection Curve.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body AdvancedCurves Example" lang="cs" title="Body AdvancedCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateBorderAroundFace(ABB.Robotics.RobotStudio.Stations.Face)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of the curve at the circumfence of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" />.</summary>
            <param name="face">Defines the face to use.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <example>Create Border Around Face.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body AdvancedCurves Example" lang="cs" title="Body AdvancedCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateBorderFromPoints(ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.Math.Vector3[])">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of the curve defined by the body and the points.</summary>
            <param name="body">Defines the body to use.</param>
            <param name="points">Defines the array of points to use.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <remarks>If the points specified are not on the body, the closest projection of them onto the body is used.</remarks>
            <example>Create Borders From Points.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body AdvancedCurves Example" lang="cs" title="Body AdvancedCurves Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Extrude(ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.RobotStudio.Stations.SweepOptions)">
            <summary>Creates new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s from the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> in the given projection direction.</summary>
            <param name="wire">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> object that shall be extruded.</param>
            <param name="projection">The direction and length of the projection.</param>
            <param name="alongWire">If not null, the Extrude operation will follow the specified wire instead of the projection vector.</param>
            <param name="sweepOptions">Sweep options for this operation.</param>
            <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.IOException" />
            <example>Extrude Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Extrude Example" lang="cs" title="Body Extrude Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Extrude(ABB.Robotics.RobotStudio.Stations.Face,ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.RobotStudio.Stations.SweepOptions)">
            <summary>Creates new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />(s) from the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> in the given projection direction.</summary>
            <param name="face">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> object that shall be extruded.</param>
            <param name="projection">The direction and length of the projection.</param>
            <param name="alongWire">If not null, the Extrude operation will follow the specified wire instead of the projection vector</param>
            <param name="sweepOptions">Sweep options for this operation.</param>
            <returns>The array of new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see>s.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.IOException" />
            <example>Extrude Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Extrude Example" lang="cs" title="Body Extrude Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Sweep(ABB.Robotics.RobotStudio.Stations.Face,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,ABB.Robotics.RobotStudio.Stations.SweepOptions)">
            <summary>
            Creates new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body"/> by sweeping the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.Face"/> around the given axis.
            </summary>
            <param name="face"></param>
            <param name="root"></param>
            <param name="axis"></param>
            <param name="angle"></param>
            <param name="sweepOptions"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.JoinCurves(ABB.Robotics.RobotStudio.Stations.Wire[])">
            <summary>Creates one or more bodies that consisting of one single wire
            each. The source wires that are connected will be joined and separate
            wires will result in new wire bodies.
            </summary>
            <remarks>The transformation matrices of the new wire bodies are reset and will be placed at origin of their part. The order of the wires of the resulting wire body is reversed, compared to the order of the wires in the array given as input.</remarks>
            <param name="wires">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects that shall be joined.</param>
            <returns>The array of new wire bodies.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <example>Join Curves.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CurveManipulations Example" lang="cs" title="Body CurveManipulations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.JoinCurves(ABB.Robotics.RobotStudio.Stations.Wire[],System.Double)">
            <summary>Creates one or more bodies that consisting of one single wire
            each. The source wires that are connected will be joined and separate
            wires will result in new wire bodies.
            </summary>
            <remarks>The transformation matrices of the new wire bodies are reset and will be placed at origin of their part. The order of the wires of the resulting wire body is reversed, compared to the order of the wires in the array given as input.</remarks>
            <param name="wires">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects that shall be joined.</param>
            <param name="tolerance">The largest distance between vertices that are considered coincident.</param>
            <returns>The array of new wire bodies.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <example>Join Curves.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CurveManipulations Example" lang="cs" title="Body CurveManipulations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.JoinEdges(ABB.Robotics.RobotStudio.Stations.Edge[],System.Double)">
            <summary>Creates one or more bodies consisting of one edge each. The source edges that are connected,
            or within the given tolerance, will be joined. The separate edged outside of the given tolerance will remain separated.
            The result will be an array of edges.
            </summary>
            <param name="edges">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />s to be joined.</param>
            <param name="tolerance">The largest distance between vertices that are considered coincident.</param>
            <returns>The array of new wire bodies.</returns>
            <remarks>The order of the edges of the resulting wire body is reversed, compared to the order of the edges in the array given as input.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.ProjectCurve(ABB.Robotics.RobotStudio.Stations.Wire[],ABB.Robotics.RobotStudio.Stations.Body[],ABB.Robotics.Math.Vector3)">
            <summary>Creates new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s representing the projection of one or
            more <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" />s onto the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s.</summary>
            <param name="wires">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects that shall be projected.</param>
            <param name="targets">The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s onto which to project the
            <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" />s.</param>
            <param name="direction">The direction of projection (used as a unit vector).</param>
            <returns>The array of new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />s. Returns an empty array if no intersection is found.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
            <example>Project Curve.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CurveManipulations Example" lang="cs" title="Body CurveManipulations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.SplitCurve(ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.Math.Vector3)">
            <summary>Splits a wire at a position. The position is valid if it lies
            closer than 10e-3 to the curve. If the split position is the same as any
            of the endpoints of the wire, nothing will happen.</summary>
            <param name="wire">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> object that shall be split.</param>
            <param name="pointOnWire">The split location on the wire.</param>
            <returns>The array of new wire bodies.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
            <example>Split Curve.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CurveManipulations Example" lang="cs" title="Body CurveManipulations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.TrimCurve(ABB.Robotics.RobotStudio.Stations.Wire,ABB.Robotics.RobotStudio.Stations.CurveSection)">
            <summary>Removes a section of a wire. The section is limited by a
            startpoint and an endpoint, both adjacent to the wire. The start point
            must be adjacent to the first edge in the supplied list, and the end point
            must be adjacent to the last edge in the list.</summary>
            <param name="wire">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> object that shall be trimmed.</param>
            <param name="curveSection">The section of the wire to trim.</param>
            <returns>The array of new wire bodies.</returns>
            <remarks>This version ignores section limiter (start and end) in the
            <see cref="T:ABB.Robotics.RobotStudio.Stations.CurveSection" /> object and simply removes the supplied edges only.
            </remarks>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
            <example>Trim Curve.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body CurveManipulations Example" lang="cs" title="Body CurveManipulations Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateParametricCurveU(ABB.Robotics.RobotStudio.Stations.Face,System.Double)">
            <summary>Creates a new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> consisting of the u-parametric curve(s) on the surface of the face.</summary>
            <param name="face">Defines the face to use.</param>
            <param name="vParam">V-parameter.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see>.</returns>
            <remarks>The face must be a spline surface.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateParametricCurveV(ABB.Robotics.RobotStudio.Stations.Face,System.Double)">
            <summary>Creates a new wire <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">Body</see> consisting of the v-parametric curve(s) on the surface of the face.</summary>
            <param name="face">Defines the face to use.</param>
            <param name="uParam">U-parameter.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
            <remarks>The face must be a spline surface.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSheetBody(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Face})">
            <summary>
            Creates a sheet (non-solid) body from the given faces.
            </summary>
            <remarks>
            All input faces must belong to the same Body.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreatePolyLine(System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Vector3})">
            <summary>
            Create wire from polygon
            </summary>
            <param name="points"></param>
            <returns></returns>
            TBD: This method is exposed from the Spatial-code for uPainting. Is it different from our existing CreatePolyLine? Either remove it or document it so that its clear what the difference is.
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateWireByApproximation(System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Vector3},System.Double)">
            <summary>
            Create Wire from points by approximation method using tolerance.  
            </summary>
            <param name="points"></param>
            <param name="tol"></param>
            <returns></returns>
            TBD: This method is exposed from the Spatial-code for uPainting. Is it different from our existing CreateSpline? Either remove it or document it so that its clear what the difference is.
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreatePolygonRibbonFromRays(System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Ray},ABB.Robotics.RobotStudio.Stations.Body,System.Double)">
            <summary>
            Creates a polygon ribbon sheet body from rays projected on the target body.
            </summary>
            <param name="rays"></param>
            <param name="target"></param>
            <param name="fenceHeight"></param>
            <returns></returns>
            TBD: Is this method needed or is it enough with CreateInterpolatedRibbonFromRays? When known, review naming. Merge the two methods?
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateSplineRibbonFromRays(System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Ray},ABB.Robotics.RobotStudio.Stations.Body,System.Double)">
            <summary>
            Creates a spline ribbon sheet body from rays projected on the target body.
            </summary>
            <param name="rays"></param>
            <param name="target"></param>
            <param name="fenceHeight"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.IntersectWithBoundary(ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.RobotStudio.Stations.Body)">
            <summary>
             Creates a sheet body containing copies of the faces of this body which are inside the specified boundary. 
             Output-faces which are partially inside the boundary will be split so that the returned sheet body fits 
             exactly with the boundary.
            </summary>
            <param name="target">The target bodiy that shall be intersected with the closed boundary.</param>
            <param name="closedRibbonBoundary">Faces of the target body which are inside this closed sheet body will be returned.</param>
            <returns>A sheet body which is a copy of the surface of the target body which is inside the specified boundary.</returns>
            <remarks>
            CreatePolygonRibbonFromRays and CreatesplineRibbonFromRays can be used to create closedRibbonBoundary
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateWireSlicesAlongWire(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Face},ABB.Robotics.RobotStudio.Stations.Body,System.Double)">
            <summary>
            Slices the input faces along the given Wire (using the planes defined by the Wire direction) and generates 
            a Body containing the resulting intersection Wires.
            </summary>
            <param name="faces">The faces to slice. Should form a contiguous surface.</param>
            <param name="wire">A Wire that is used to compute the slicing planes</param>
            <param name="distance">Distance between slicing planes</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Mirror(ABB.Robotics.Math.Plane)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> by mirroring this body.</summary>
            <param name="plane">Mirror plane.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.Scale(System.Double)">
            <summary>Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> by scaling this body.</summary>
            <param name="scale">Scale factor.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" />.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> that is closest to the provided point.</summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
            <example>Find closest Vertex.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Methods Example" lang="cs" title="Body Methods Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.GetMaterial">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> of the graphical representation of the body.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> of the graphical representation of the body.
            </summary>
            <param name="material">New material.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material,System.Boolean)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> of the graphical representation of the body.
            </summary>
            <param name="material">New material.</param>
            <param name="preserveOpacity">Preserve the opacity of the current material.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.ReplaceMaterial(ABB.Robotics.RobotStudio.Stations.Material,ABB.Robotics.RobotStudio.Stations.Material)">
            <summary>
            Replaces one <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> in the graphical representation with another.
            </summary>
            <param name="oldMaterial"></param>
            <param name="newMaterial"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.NormalizeTextureCoordinates(System.Boolean,System.Boolean)">
            <summary>
            Normalizes the texture coordinates of the graphical representation to the range [0-1].
            </summary>
            <param name="u">Normalize u coordinates.</param>
            <param name="v">Normalize v coordinages.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.MoveToPart(ABB.Robotics.RobotStudio.Stations.Part)">
            <summary>
            Moves this Body to a new parent Part
            </summary>
            <param name="part"></param>
            <remarks>
            Use this method to directly move a body. It is more efficient than first removing the body and then adding it to the new part.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateOffsetWire(ABB.Robotics.RobotStudio.Stations.Coedge[],System.Double,System.Boolean)">
            <summary>
            ABB internal use only
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.CreateWireFromEdges(ABB.Robotics.RobotStudio.Stations.Edge[])">
            <summary>
            ABB internal use only
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Body.FindChildFromGfxId(System.Int32)">
            <summary>
            Returns the face or wire with the given gfxId
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BodyCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> objects.
            </summary>
            <example>Body Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.Add(ABB.Robotics.RobotStudio.Stations.Body)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> to the collection.
            </summary>
            <param name="body">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> to add to the collection.</param>
            <example>Add Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" /></example>
            <remarks>
            This method also removes the body from it's current parent. 
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.BodyCollection.Remove(ABB.Robotics.RobotStudio.Stations.Body)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> from the collection.
            </summary>
            <param name="body">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Body" /> to remove from the collection.</param>
            <example>Remove Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Properties Example" lang="cs" title="Body Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BrushColorCollection">
            <exclude />
            <summary>
            For ABB Internal use only. Backward compatibility between versions is not guaranteed.
            A collection of colors used when rendering a PaintL, PaintC and SetBrush instructions.
            Those RAPID instructions are part of RobotWare Paint.
            The SetBrush instruction references a brush number and this collection provides the mapping from brush number to color representation in RobotStudio.
            </summary>
            <remarks>
            This collection has nothing to do with the color a paint robot is painting with, when executing its program.
            The colors in this collection are only used to visualize, in the robotStudio graphics, where different brushes are used.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.BrushColorCollection.Item(System.Int32)">
            <summary>
            Gets the color associated with the specified brush number.
            </summary>
            <value>The <see cref="T:System.Drawing.Color">color</see> associated with the specified brush number. </value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.BrushColorCollection.Add(System.Int32,System.Drawing.Color)">
            <summary>
            Adds an association between a brush number and a color.
            </summary>
            <param name="brushNumber">The brush number that should be associated with a visualization color. The brushes are defined in RobotWare Paint.</param>
            <param name="color">The visualization color that shall be associated with the specified brush number.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.BrushColorCollection.Contains(System.Int32)">
            <summary>
            Returns true if the collection contains the specified brush, otherwise false.
            </summary>
            <param name="brushNumber">The brush number to locate in the collection.</param>
            <returns>True if the collection contains a brush with the specified number, otherwise false.</returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.BrushColorCollection.Count">
            <summary>
            Returns the number of defined brush colors.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Camera">
            <summary>
            Represents a camera that can be used to control the view of a GraphicControl.
            </summary>
            <example>Camera Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Camera.#ctor">
            <summary>
            Initializes a new instance of the Camera class.
            </summary>
            <example>New Camera. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>       
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Camera.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LookFrom">
            <summary>
            Gets or sets the point of view of the camera.
            </summary>
            <example>Camera Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LookAt">
            <summary>
            Gets or sets the point which will act as the center of the camera view.
            </summary>
            <example>Camera Collection. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.UpDirection">
            <summary>
            Gets or sets the direction that corresponds to up on the screen.
            </summary>
            <remarks>
            This is normally equal to <see cref="F:ABB.Robotics.Math.Vector3.ZVector"/>.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Camera.SetView(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
            <summary>
            Sets <see cref="P:ABB.Robotics.RobotStudio.Stations.Camera.LookAt"/>, <see cref="P:ABB.Robotics.RobotStudio.Stations.Camera.LookFrom"/> and <see cref="P:ABB.Robotics.RobotStudio.Stations.Camera.UpDirection"/> in one operation.
            </summary>
            <param name="lookAt"></param>
            <param name="lookFrom"></param>
            <param name="upVec"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.FieldOfView">
            <summary>
            Gets or sets the field of view, in degrees
            </summary>
            <remarks>
            Only used for perspective cameras
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.Projection">
            <summary>
            Gets or sets a value indicating how 3D objects are projected.
            </summary>
            <example>Camera Collection. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LockZoom">
            <summary>
            Gets or sets a value (in meters) indicating how much the user is allowed to zoom the view.
            A negative value disables zoom lock.
            </summary>
            <example>Camera Collection. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LockRotate">
            <summary>
            Gets or sets a value (in radians) indicating how much the user is allowed to rotate the view.
            A negative value disables rotate lock.
            </summary>
            <example>Camera Collection. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.LockTranslate">
            <summary>
            Gets or sets a value (in meters) indicating how much the user is allowed to translate (pan) the view.
            A negative value disables translate lock.
            </summary>
            <example>Camera Collection. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.FollowObject">
            <summary>
            Gets or sets an object that the camera will follow.
            </summary>
            <example>Camera Collection. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.FollowBehavior">
            <summary>
            Gets or sets a value indicating how the camera will behave when it follows an object.
            </summary>
            <example>Camera Collection. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Camera.Visible">
            <summary>
            Gets or sets a value indicating whether the camera will
            be displayed in the graphics.
            </summary>
            <example>Camera Collection. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" />
            </example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CameraCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> objects.
            </summary>
            <example>Camera Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.Add(ABB.Robotics.RobotStudio.Stations.Camera)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> to the collection.
            </summary>
            <param name="camera">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> to add to the collection.</param>
            <example>Add Camera.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CameraCollection.Remove(ABB.Robotics.RobotStudio.Stations.Camera)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> from the collection .
            </summary>
            <param name="camera">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera" /> to remove from the collection.</param>
            <example>Remove Camera.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Camera Properties Example" lang="cs" title="Camera Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Coedge">
            <summary>
            A coedge is closely related to an edge. A coedge stores its relationships with adjacent edges and
            with superior owning entities. (In some contexts, the coedge may be viewed as the use of an edge
            by a face or wire.) The data structures formed by these relationships (stored as pointers) and their
            interpretation depend upon the nature of the owning entity.<br />
            <img src="GeometryTopology.jpg" />
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Body">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Coedge.Body"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Coedge"/> belongs to.
            </summary>
            <example>Get Body. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Coedge Properties Example" lang="cs" title="Coedge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Edge">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Coedge.Edge"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Coedge"/> is associated with.
            </summary>
            <example>Get Edge. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Coedge Properties Example" lang="cs" title="Coedge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.EndVertex">
            <summary>
            Gets the end vertex of the coedge.
            </summary>
            <example>Get EndVertex. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Coedge Properties Example" lang="cs" title="Coedge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Reversed">
            <summary>
            Gets whether the coedge is reversed or not.
            </summary>
            <example>Get Reversed. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Coedge Properties Example" lang="cs" title="Coedge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.StartVertex">
            <summary>
            Gets the start vertex of the coedge.
            </summary>
            <example>Get EndVertex. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Coedge Properties Example" lang="cs" title="Coedge Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Coedge.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Coedge" /> that is closest to the provided point.</summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
            <example>Codege FindClosestVertex.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Coedge Properties Example" lang="cs" title="Coedge Properties Example" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Next">
            <summary>
            Returns the next coedge connected to this.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Coedge.Previous">
            <summary>
            Returns the previous coedge connected to this.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CoedgeCollection">
            <summary>
            A collection of Coedge objects.
            </summary>
            <example>Coedge Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Coedge Properties Example" lang="cs" title="Coedge Properties Example" /></example>
            <remarks>
            The order of items in the collection is not guaranteed to match the topology of the parent.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionDetector">
            <summary>
            Provides collision detection on <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet">Collision Sets</see>.
            </summary>
            <remarks> All methods use the graphical (triangulated) representation of objects, which means the results are approximate. </remarks>
            <summary>
            Provides collision detection on <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet">Collision Sets</see>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.#ctor">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionDetector.AutoCheck">
            <summary>
            Gets or sets a value indicating whether to check for collisions
            whenever the graphic model is updated.
            </summary>
            <example>Get/Set AutoCheck. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionDetector.FastCheck">
            <summary>
            Gets or sets a value indicating whether to perform collision check only
            on bounding boxes and not on triangles.
            </summary>
            <example>Get/Set FastCheck. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.CollisionDetector.Collision">
            <summary>
            Occurs when a collision starts, ends or changes type.
            </summary>
            <example>Collision event.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollisions(ABB.Robotics.RobotStudio.Stations.CollisionSet)">
            <summary>
            Check collisions for a collision set.
            </summary>
            <param name="collisionSet">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Station" /> to check for collisions.</param>
            <example>Check Collision Set for collisions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollisions(ABB.Robotics.RobotStudio.Stations.Station)">
            <summary>
            Check collisions for all collision sets in the station.
            </summary>
            <param name="station">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Station" /> to check for collisions.</param>
            <example>Check Station for collissions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.ResetCollisions(ABB.Robotics.RobotStudio.Stations.CollisionSet)">
            <summary>
            Reset collisions and highlights for a collision set.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.ResetCollisions">
            <summary>
            Reset collisions, highlights and markups.
            </summary>
            <example>Reset Collisions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.MinimumDistance(ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)">
            <summary>
            Calculates the shortest distance between two graphic objects, as well as the
            closest points on the objects.
            </summary>
            <param name="object1">First object. Must be GraphicComponent, Body or Face.</param>
            <param name="object2">Second object. Must be GraphicComponent, Body or Face.</param>
            <param name="point1">Returns the closest point on the first object.</param>
            <param name="point2">Returns the closest point on the second object.</param>
            <returns>The shortest distance between the objects.</returns>
            <example>MinimumDistance.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
            <remarks> The algorithm uses the graphical representation of objects, so the result is an approximation. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.MinimumDistance(ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@)">
            <summary>
            Calculates the shortest distance between two graphic objects, as well as the
            closest points on the objects.
            </summary>
            <param name="object1">First object. Must be GraphicComponent, Body or Face.</param>
            <param name="object2">Second object. Must be GraphicComponent, Body or Face.</param>
            <param name="point1">Returns the closest point on the first object.</param>
            <param name="point2">Returns the closest point on the second object.</param>
            <param name="part1">Returns the closest Part in the first object.</param>
            <param name="part2">Returns the closest Part in the second object.</param>
            <returns>The shortest distance between the objects, or -1 if the calculation fails.</returns>
            <example>MinimumDistance.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
            <remarks> The algorithm uses the graphical representation of objects, so the result is an approximation. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.MinimumDistance(ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.DetectableUsage)">
            <summary>
            Calculates the shortest distance between two graphic objects, as well as the
            closest points on the objects.
            </summary>
            <param name="object1">First object. Must be GraphicComponent, Body or Face.</param>
            <param name="object2">Second object. Must be GraphicComponent, Body or Face.</param>
            <param name="point1">Returns the closest point on the first object.</param>
            <param name="point2">Returns the closest point on the second object.</param>
            <param name="part1">Returns the closest Part in the first object.</param>
            <param name="part2">Returns the closest Part in the second object.</param>
            <param name="detectableUsage">Specifies how the Detectable property is used when
            checking distance between two <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.</param>
            <returns>The shortest distance between the objects, or -1 if the calculation fails.</returns>
            <example>MinimumDistance.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
            <remarks> The algorithm uses the graphical representation of objects, so the result is an approximation. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.PointDistance(ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Part@)">
            <summary>
            Calculates the shortest distance from a point to a graphic object,
            as well as the closest point on the object.
            </summary>
            <param name="testPoint">Point to test (in world coordinates)</param>
            <param name="testObject">Object to test. Must be GraphicComponent, Body or Face.</param>
            <param name="hitPoint">Returns the closest point on the object.</param>
            <param name="hitPart">Returns the part where the closest point is.</param>
            <returns>The shortest distance between the point and the objects, or -1 if the calculation fails.</returns>
            <remarks> The algorithm uses the graphical representation of objects, so the result is an approximation. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.PointDistance(ABB.Robotics.Math.Vector3,ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Part@,System.Boolean)">
            <summary>
            Calculates the shortest distance from a point to a graphic object,
            as well as the closest point on the object.
            </summary>
            <param name="testPoint">Point to test (in world coordinates)</param>
            <param name="testObject">Object to test. Must be GraphicComponent, Body or Face.</param>
            <param name="hitPoint">Returns the closest point on the object.</param>
            <param name="hitPart">Returns the part where the closest point is.</param>
            <param name="checkDetectable">Skip objects with the Detectable flag set to false.</param>
            <returns>The shortest distance between the point and the objects, or -1 if the calculation fails.</returns>
            <remarks> The algorithm uses the graphical representation of objects, so the result is an approximation. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic,System.Double)">
            <summary>
            Calculates whether an object intersects with a TemporaryGraphic object.
            </summary>
            <param name="object1">GraphicComponent object.</param>
            <param name="object2">TemporaryGraphic object.</param>
            <param name="nearMiss">Near miss distance.</param>
            <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
            <remarks> The TemporaryGraphic object must be a triangular object (e.g. box, cylinder, sphere).</remarks>
            <example>Check Collision.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphic,System.Double,ABB.Robotics.RobotStudio.Stations.Part@)">
            <summary>
            Calculates whether any object in the active Station intersects with a TemporaryGraphic object.
            </summary>
            <param name="tempGfx">TemporaryGraphic object</param>
            <param name="nearMiss">Near miss distance.</param>
            <param name="part">Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/> that the TemporaryGraphic object intersects with.</param>
            <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
            <remarks> The TemporaryGraphic object must be a triangular object (e.g. box, cylinder, sphere).</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double,ABB.Robotics.RobotStudio.Stations.DetectableUsage,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@)">
            <summary>
            Calculates whether two objects intersect, or whether an object intersects any other object, and returns the intersecting Parts.
            </summary>
            <param name="object1">First object.</param>
            <param name="object2">Second object.</param>
            <param name="nearMiss">Near miss distance.</param>
            <param name="detectableUsage">Specifies how the Detectable property is used when
            checking for collision between two <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.</param>
            <param name="part1">Part in first object.</param>
            <param name="part2">Part in second object.</param>
            <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
            <remarks>If either object1 or object2 is NULL, it is checked against all other objects in the stations.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double,ABB.Robotics.RobotStudio.Stations.DetectableUsage,System.Boolean,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@)">
            <summary>
            Calculates whether two objects intersect, or whether an object intersects any other object, and returns the intersecting Parts.
            </summary>
            <param name="object1">First object.</param>
            <param name="object2">Second object.</param>
            <param name="nearMiss">Near miss distance.</param>
            <param name="detectableUsage">Specifies how the Detectable property is used when
            checking for collision between two <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.</param>
            <param name="excludeInvisible">Do not include invisible objects when checking for collision.</param>
            <param name="part1">Part in first object.</param>
            <param name="part2">Part in second object.</param>
            <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
            <remarks>If either object1 or object2 is NULL, it is checked against all other objects in the stations.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double,ABB.Robotics.RobotStudio.Stations.DetectableUsage,System.Boolean,System.Boolean,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@)">
            <summary>
            Calculates whether two objects intersect, or whether an object intersects any other object, and returns the intersecting Parts.
            </summary>
            <param name="object1">First object.</param>
            <param name="object2">Second object.</param>
            <param name="nearMiss">Near miss distance.</param>
            <param name="detectableUsage">Specifies how the Detectable property is used when
            checking for collision between two <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.</param>
            <param name="excludeInvisible1">Do not include invisible objects in object1 when checking for collision.</param>
            <param name="excludeInvisible2">Do not include invisible objects in object2 when checking for collision.</param>
            <param name="part1">Part in first object.</param>
            <param name="part2">Part in second object.</param>
            <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
            <remarks>If either object1 or object2 is NULL, it is checked against all other objects in the stations.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.RobotStudio.Stations.Part@)">
            <summary>
            Calculates whether two objects intersect, or whether an object intersects any other object, and returns the intersecting Parts.
            </summary>
            <param name="object1">First object.</param>
            <param name="object2">Second object.</param>
            <param name="nearMiss">Near miss distance.</param>
            <param name="part1">Part in first object.</param>
            <param name="part2">Part in second object.</param>
            <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
            <remarks>If either object1 or object2 is NULL, it is checked against all other objects in the stations.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckCollision(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Double)">
            <summary>
            Calculates whether two objects intersect, or whether an object intersects any other object.
            </summary>
            <param name="object1">First object.</param>
            <param name="object2">Second object.</param>
            <param name="nearMiss">Near miss distance.</param>
            <returns>A value indicating whether the objects collide or are closer than the near miss distance.</returns>
            <remarks>If either object1 or object2 is NULL, it is checked against all other objects in the stations.</remarks>
            <example>Check Collision.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionDetector.CheckLineIntersection(ABB.Robotics.RobotStudio.Stations.Station,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,ABB.Robotics.RobotStudio.Stations.Part@,ABB.Robotics.Math.Vector3@)">
            <summary>
            Calculates whether an line between two points intersects with any graphical object in a station.
            </summary>
            <param name="station">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Station" /> to check for intersection.</param>
            <param name="start">Start point of the intersection line.</param>
            <param name="end">End point of the intersection line.</param>
            <param name="radius">Radius of the intersection line.</param>
            <param name="closestPart">Returns the intersecting <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" /> closest to the start point.</param>
            <param name="intersectionPoint">Returns the intersection point.</param>
            <returns>A value indicating whether any object intersects with the line.</returns>
            <remarks>
            If radius is not zero, the returned intersection point will be approximate.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs">
            <summary>
            Provides data for the Collision event.
            </summary>
            <example>Collision events.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.CollisionSet">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.CollisionSet"/> that caused the collision.
            </summary>
            <example>Get Collision set. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.FirstPart">
            <summary>
            Gets the first colliding part.
            </summary>
            <example>Get First Part. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.SecondPart">
            <summary>
            Gets the second colliding part.
            </summary>
            <example>Get Second Part. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.CollisionEvent">
            <summary>
            Gets the collision event.
            </summary>
            <example>Get CollisionEvent. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionEventArgs.Point">
            <summary>
            Gets a point of collision.
            </summary>
            <remarks>
            The point is only valid for collision, not for near miss.
            The point is an undefined position along the intersection between the two colliding parts.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection">
            <summary>
            A collection of GraphicComponent collision objects.
            </summary>
            <example>CollisionObject Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.Add(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to the collection.
            </summary>
            <param name="collisionObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to add to the collection.</param>
            <example>Add CollisionObject.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionObjectCollection.Remove(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Remove a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the collection.
            </summary>
            <param name="collisionObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to remove from the collection.</param>
            <example>Remove CollisionObject.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionSet">
            <summary>
            Defines two groups of objects that will be tested for collision against each other.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSet.#ctor">
            <summary>
            Initializes a new instance of the CollisionSet class.
            </summary>
            <example>New CollisionSet.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSet.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.Parent">
            <summary>
            The Parent property returns a reference to the parent Station object.
            </summary>
            <remarks>
            You can use the Parent property to navigate up from the current object to
            the object one level higher.
            </remarks>
            <value>Returns a ProjectObject object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.FirstGroup">
            <summary>
            Gets the first group of objects
            </summary>
            <example>Get FirstGroup.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.SecondGroup">
            <summary>
            Gets the second group of objects
            </summary>
            <example>Get SecondGroup.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.Active">
            <summary>
            Gets or set whether this set will be included when checking collisions
            </summary>
            <example>Get/Set Active.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.NearMissDistance">
            <summary>
            Gets or sets the distance at which near miss occurs
            </summary>
            <remarks>
            A value of 0 means near miss is disabled.
            </remarks>
            <example>Get/Set NearMissDistance.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.Highlight">
            <summary>
            Gets or sets whether colliding objects will be highlighted.
            </summary>
            <example>Get/Set Highlight.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.HighlightLevel">
            <summary>
            Gets or sets which level of the object hierarchy should be highlighted.
            </summary>
            <remarks>
            Level Body or Face is only used for parts with geometry.
            If several bodies/faces in a part are colliding, only one will be highlighted and which one is undefined.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.CollisionColor">
            <summary>
            Gets or sets the color of colliding objects
            </summary>
            <example>Get/Set CollisionColor.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.NearMissColor">
            <summary>
            Gets or sets the color of objects in a near miss
            </summary>
            <example>Get/Set NearMissColor.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.ShowMarkup">
            <summary>
            Gets or sets if a markup should be displayed at the approximate point of collision or near miss.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.IncludeInvisible">
            <summary>
            Gets or sets if invisible objects should be considered for collision in this collision set.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSet.GetCurrentState">
            <summary>
            Returns the current state of collisions in the set.
            </summary>
            <returns>
            CollisionType.Collision if there is any collision occurring,
            CollisionType.NearMiss if there is any near miss (but no collision) occurring,
            CollisionType.None otherwise.
            </returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection">
            <summary>
            A collection of CollisionSet objects.
            </summary>
            <example>CollisionSet Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.Add(ABB.Robotics.RobotStudio.Stations.CollisionSet)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet" /> to the collection.
            </summary>
            <param name="collisionSet">The <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet" /> to add to the collection.</param>
            <example>Add CollisionSet.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CollisionSetCollection.Remove(ABB.Robotics.RobotStudio.Stations.CollisionSet)">
            <summary>
            Remove a <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet" /> from the collection.
            </summary>
            <param name="collisionSet">The <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionSet" /> to remove from the collection.</param>
            <example>Remove CollisionSet.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData">
            <summary>
            Represents information about the robot arm configuration, to be used when reaching a target.
            Given a tool and a target is is usually possible for the robot to reach it using different set of axes angles.
            This structure has a corresponding RAPID data type called <b>confdata</b>.
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> is used to unambigously denote one of a set of possible robot arm configurations.
            It is done by specifying in which quadrant, four of the robot axes, should be in. It is not necessecary to specify this value for all axes.
            Depending on the robot model, the axes used to denote configuration, and the interpretation of the configuration can vary. Please refer to the <b>RAPID Reference Manual</b>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Cf1">
            <summary>
            The quadrant of axis 1.
            </summary>
            <value>
            An integer specifying the quadrant of axis 1.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Cf4">
            <summary>
            The quadrant of axis 4.
            </summary>
            <value>
            An integer specifying the quadrant of axis 4.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Cf6">
            <summary>
            The quadrant of axis 6.
            </summary>
            <value>
            An integer specifying the quadrant of axis 6.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.Cfx">
            <summary>
            The quadrant of an axis that is not axis 1,4 or 6. Its usage depends on the robot model. For many robot models this value is not used.
            </summary>
            <value>
            An integer specifying the quadrant of an axis that is not axis 1,4 or 6. Its usage depends on the robot model. For many robot models this value us not used.
            Please refer to the RAPID documentation.
            </value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.GetJointValues">
            <summary>
            Returns the joint values that where set when this class was returned from GetConfiguration().
            </summary>
            <returns> An array of double specifying the joint values a specific mechanism had, when it was positioned in this configuration. If this information is not known, an empty array is returned.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.SetConfigurationData(ABB.Robotics.RobotStudio.Stations.ConfigurationData@,System.Int32[])">
            <summary>
            Sets the axis quadrants for a given configuration data, as specified by an array of integers.
            </summary>
            <param name="configData">The <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" /> instance that shall be modified.</param>
            <param name="values">An array of integer containing four elements which specifies the four axis quadrants.</param>
            <remarks>
            The length of values must be 4.
            </remarks>
            <exception cref="T:System.ArgumentException">When size of <b>values</b> are not 4.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.GetConfigurationData">
            <summary>
            Returns the axis quadrants as an array of integers.
            </summary>
            <returns>An array of integer containing four elements which specifies the four axis quadrants.</returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ConfigurationData.CompareCfg">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that compares two <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData"/> by quadrant values only.
            </summary>
            <remarks>
            Unlike the default equality comparer for <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData"/>, this does not take the saved joint values into account.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ConfigurationData.IsCompatible(ABB.Robotics.RobotStudio.Stations.ConfigurationData,ABB.Robotics.RobotStudio.Stations.ConfigurationData)">
            <summary>
            Checks if two configurations are compatible, i.e. can describe the same robot pose.
            </summary>
            <returns>
            True if Cf1, Cf4, Cf6 differ by at most one and Cfx are equal.
            </returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CurveSection">
            <summary>
            Represents a section of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> limited by two vertices.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CurveSection.#ctor(ABB.Robotics.RobotStudio.Stations.Edge[],ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
            <summary> 
            Initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.CurveSection"/> instance with the specified edges and start and end vectors.
            </summary>
            <param name="edges">The edges contained by this section.</param>
            <param name="sectionStart">The start vector of the section.</param>
            <param name="sectionEnd">The end vector of the section.</param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CurveSection.SectionEnd">
            <summary>
            Gets or sets the end vector of this section.
            </summary>
            <value>
            A <see cref="T:ABB.Robotics.Math.Vector3"/> which specifies the global end vector of the section in global coordinates.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.CurveSection.SectionStart">
            <summary>
            Gets or sets the start vector of this section.
            </summary>
            <value>
            A <see cref="T:ABB.Robotics.Math.Vector3"/> which specifies the global start vector of the section in global coordinates.
            </value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CurveSection.GetEdges">
            <summary>Returns an array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> objects that the <see cref="T:ABB.Robotics.RobotStudio.Stations.CurveSection" /> contains.</summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.CurveSection.SetEdges(ABB.Robotics.RobotStudio.Stations.Edge[])">
            <summary>Sets the edges that should be contained in the <see cref="T:ABB.Robotics.RobotStudio.Stations.CurveSection" />.</summary>
            <param name="value">The array of edges.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.PropertyChanged"/> and <see cref="E:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties.PropertyValueChanged"/> events.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalChangedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.IHasIOSignals.IOSignalChanged"/> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RapidSynchronizationEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.RsTask.RapidSynchronized"/> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.FileNotFoundNotification">
            <summary>
            Represents the method that will handle the file not found callback from the <see cref="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,ABB.Robotics.RobotStudio.Stations.FileNotFoundNotification)"/> method.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.CollisionDetector.Collision"/> event.
            </summary>
            <example>Collision Event Handler.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ExecuteActionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.Simulator.ExecuteAction"/> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:ABB.Robotics.RobotStudio.Stations.Simulator.EvaluateTrigger"/> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty">
            <summary> 
            An object attached to a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" /> that has value, type and
            attributes. The property value is used to control the behavior of the <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.IsValidName(System.String)">
            <summary>
            Checks if a string is a valid name for a dynamic property.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the DynamicProperty class.
            </summary>
            <param name="name">Name of the DynamicProperty.</param>
            <param name="valueType">The <see cref="T:System.Type"/> name of the DynamicProperty.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Name">
            <summary>
            Get the name of the DynamicProperty.
            </summary>
            <value>A <see cref="T:System.String"/> that represents the name of the DynamicProperty.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.ValueType">
            <summary>
            Get the associated <see cref="T:System.Type"/>.
            </summary>
            <value>Associated <see cref="T:System.Type"/>.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.ReadOnly">
            <summary>
            Gets or sets a value indicating if the value of this property shall be possible to modify in a user interface or not.
            </summary>
            <remarks>
            Even when the <see cref="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.ReadOnly"/> is set to true, it is possible to change the value programatically.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.UIVisible">
            <summary>
            Gets or set a value indicating if this property should normally be visible in a user interface or not. 
            It shall be used as a hint for user interface implementors.
            </summary>		
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.DisplayValue">
            <summary>
            Returns a string representation of <see cref="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Value"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Description">
            <summary>
            Gets a localized description for this property.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Attributes">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.AttributeCollection"/> describing different aspects of this property. 
            Certain attributes are used by the RobotStudio user interface, see <see cref="T:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey"/>.
            </summary>	
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.GetBindings">
            <summary>
            Returns an array of bindings from this property to other properties.
            </summary>
            <returns>
            An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding" /> containing the bindings.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.ValidateValue(System.Object)">
            <summary>
            Check if its possible to set the specified value on this property, given the property type and restrictions.
            </summary>
            <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo" /> that specifies the result of the validation.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.TrySetValue(System.Object)">
            <summary>
            Try to set the specified value on the property. A value validation is performed. The value is set only if it is valid.
            </summary>
            <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo" /> that specifies the result of the validation.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicProperty.GetValidTypes">
            <summary>
            Returns an array of all <see cref="T:System.Type">Types</see> that are valid
            for constructing a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty" />.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty">DynamicProperties</see> attached to a
            <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Item(System.String)">
            <summary>
            Gets the item with the specified id.
            </summary>
            <param name="id">The id of the item to get.</param>
            <exception cref="T:System.ArgumentException">
            The id value is not in the collection.</exception>
            <value>The item with the specified id.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index value is greater than the number of items in the collection.</exception>
            <value>The item at the specified index.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Count">
            <summary>
            Gets the number of properties contained in the <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection"/>.
            </summary>
            <value>
            The number of properties contained in the <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection"/>.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Parent">
            <summary>
            The Parent property returns a reference to the parent smart component.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Changed">
            <summary>
            Raised when an item is added to or removed from the collection
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Add(ABB.Robotics.RobotStudio.Stations.DynamicProperty)">
            <summary>
            Adds a property to this DynamicPropertyCollection object.
            </summary>
            <param name="dynamicProperty">The property to be added.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Remove(System.String)">
            <summary>
            Removes an property from this DynamicPropertyCollection object.
            </summary>
            <param name="name">The id of the property to be removed.</param>
            <exception cref="T:System.ArgumentException">
            An property with the specified id has not been added to the collection</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.Contains(System.String)">
            <summary>
            Determines if the <b>DynamicPropertyCollection</b> contains a specific id.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over the keys in the <b>DynamicPropertyCollection</b>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> for the DynamicPropertyCollection.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection.CopyTo(ABB.Robotics.RobotStudio.Stations.DynamicProperty[],System.Int32)">
            <remarks></remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Edge">
            <summary>
            An Edge is bounded by one or more vertices, referring to one <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> at each end. Edges are
            closely related to <see cref="T:ABB.Robotics.RobotStudio.Stations.Coedge">Coedges</see>, which allows the Edge to occur in more than one
            <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" />, thus makes it possible to create solids.<br /><img src="GeometryTopology.jpg" /></summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.Body">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Edge.Body"/> the edge is part of.
            </summary>
            <example>Get Body
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Edge Properties Example" lang="cs" title="Edge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.EdgeType">
            <summary>
            Returns the type of the edge.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.CenterPoint">
            <summary>
            Gets the center point of the edge.
            </summary>
            <remarks>Center point is only defined for eliptic edges,
            this property will throw an exception if used on non eliptic edges.
            </remarks>
            <example>Get Center Point 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Edge Properties Example" lang="cs" title="Edge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.EndVertex">
            <summary>	
            Gets the end vertex of the edge.
            </summary>
            <example>Get End Vertex
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Edge Properties Example" lang="cs" title="Edge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.Length">
            <summary>	
            Gets the length of the edge.
            </summary>
            <example>Get Length
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Edge Properties Example" lang="cs" title="Edge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.MidPoint">
            <summary>	
            Gets the mid point of the edge.
            </summary>
            <example>Get Mid Point
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Edge Properties Example" lang="cs" title="Edge Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Edge.StartVertex">
            <summary>	
            Gets the start vertex of the edge.
            </summary>
            <example>Get Start Vertex
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Edge Properties Example" lang="cs" title="Edge Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetTangent(System.Double)">
            <summary>Returns the tangent of the edge at the given parameter value.</summary>
            <param name="parameter">Parameter value.</param>
            <returns>Tangent direction.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetTangent(ABB.Robotics.Math.Vector3)">
            <summary>Gets the tangent of the edge at the supplied point.</summary>
            <param name="pointOnCurve">The point at which to get the tangent.</param>
            <returns>The tangent to the edge at the supplied point</returns>
            <example>Get tangent.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Edge Properties Example" lang="cs" title="Edge Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetParameterRange(ABB.Robotics.RobotStudio.Stations.ParameterRange@)">
            <summary>Gets the parameter (t-value) range of the edge.</summary>
            <param name="range">Returns the range.</param>
            <returns>False if the range is unbounded.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.IsParameterValid(System.Double)">
            <summary>
            Returns true if the given parameter is valid for this Edge, i.e. within its parameter range.
            </summary>
            <param name="parameter">The parameter value to test</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.Facet(System.Double,System.Double,System.Double,System.Double,System.Double,ABB.Robotics.Math.Vector3[]@,System.Double[]@)">
            <summary>Returns facets that approximate the edge.</summary>
            <param name="start">Starting parameter.</param>
            <param name="end">Ending parameter. If less than start, the two are reversed.</param>
            <param name="maxTolerance">The desired maximum distance between the approximating facets and the real curve. Ignored if zero.</param>
            <param name="maxLength">The desired maximum length of each facet. Ignored if zero.</param>
            <param name="maxAngle">The desired maximum angle between the tangets of the two endpoints of any facet. Ignored if zero.</param>
            <param name="points">Returns the facet points on the curve.</param>
            <param name="parameters">Returns the parameters (t-values) of the facet points on the curve.</param>
            <returns>True if success.</returns>
            <remarks>At least one of the "max" arguments must be non-zero.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetLengthAtParameter(System.Double)">
            <summary>Returns the distance along this edge from the start.</summary>
            <param name="parameter">Parameter value.</param>
            <returns>Distance.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetParameterAtLength(System.Double)">
            <summary>Returns the parameter value at the given distance from the start.</summary>
            <param name="length">Distance from start.</param>
            <returns>Parameter value.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetPointAtParameter(System.Double)">
            <summary>Returns the point on the edge that corresponds to the given parameter value.</summary>
            <param name="parameter">Parameter value.</param>
            <returns>Point on the edge.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetParameterAtPoint(ABB.Robotics.Math.Vector3)">
            <summary>Returns the parameter on the edge that corresponds to the given point value.</summary>
            <param name="point">Point value.</param>
            <returns>Parameter on the edge.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.GetCurvature(System.Double)">
            <summary>Returns the curvature of a point on the edge that corresponds to the given parameter value.</summary>
            <param name="parameter">Parameter value.</param>
            <returns>Curvature.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Edge.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> that is closest to the provided point.</summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
            <example>Find Closest Vertex
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Edge Properties Example" lang="cs" title="Edge Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationActorState">
            <summary>
            Specifies the state of a simulated object.
            </summary>
            <remarks>
            The simulation will be stopped automatically when there are no objects in the Active state.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationActorState.Active">
            <summary>
            An object in this state will keep the simulation running.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationActorState.Stopped">
            <summary>
            An object in this state will not be updated during simulation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationActorState.Passive">
            <summary>
            An object in this state will be updated during simulation but will not keep the simulation running.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ValueValidationResult">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.Result"/>
            </summary>
            <remarks>
            Standard validation is performed according to <see cref="T:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey"/>s in <see cref="P:ABB.Robotics.RobotStudio.Stations.DynamicProperty.Attributes"/>.
            Custom validation is performed in code behind, see <see cref="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryPropertyValueValid(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty,System.Object)"/>.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.Valid">
            <summary>
            The value is valid.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.InvalidType">
            <summary>
            The value is of the wrong type.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.BelowMin">
            <summary>
            The value is below the minimum value.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.AboveMax">
            <summary>
            The value is above the maximum value.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.NotAllowed">
            <summary>
            The value is not within the set of allowed values.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.TooShort">
            <summary>
            The value is a string which is too short.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.TooLong">
            <summary>
            The value is a string which is too long.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.InvalidProject">
            <summary>
            The value is a <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> which does not belong to the same <see cref="T:ABB.Robotics.RobotStudio.Project"/> as the <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.InvalidSyntax">
            <summary>
            The value is an expression with invalid syntax.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationResult.Invalid">
            <summary>
            The value is invalid for any other reason.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.JointType">
            <summary>
            Specifies the motion type of a mechanism joint.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.JointType.Rotational">
            <summary>
            Rotational motion.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.JointType.Prismatic">
            <summary>
            Linear motion.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.JointType.Undefined">
            <summary>
            Undefined motion.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId">
            <summary>
            Specifies the different types of messages that can be generated from the RAPIDSync system.
            For each element it is documented how many strings the corresponding message has, and their meaning.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessageSeverity">
            <summary>
            Specifies the different severity levels defined for log messages.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SyncDirection">
            <summary>
            Specifies the direction of a RAPID synchronization operation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SyncDirection.ToStation">
            <summary>
            Update station objects from RAPID code.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SyncDirection.ToController">
            <summary>
            Update RAPID code from station objects.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.FaceType">
            <summary>
            Specifies the type of a face. A face can be either represented analytically by a simple
            equation, or a parametric spline.<br /><img src="GeometryTopology.jpg" /></summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalType">
            <summary>Specifies the type and direction of an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" />.</summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.DigitalInput">
            <summary>
            Digital input
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.DigitalOutput">
            <summary>
            Digital output
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.AnalogInput">
            <summary>
            Analog input
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.AnalogOutput">
            <summary>
            Analog output
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.DigitalGroupInput">
            <summary>
            Group input
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IOSignalType.DigitalGroupOutput">
            <summary>
            Group output
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BodyType">
            <summary>
            Specifies the type of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Body"/><br/><img src="GeometryTopology.jpg" />
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.BodyType.WireBody">
            <summary>
            The body consists of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire"/>s.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.BodyType.SolidBody">
            <summary>
            The body is a solid.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.BodyType.SheetBody">
            <summary>
            The body is a sheet.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.BodyType.Unknown">
            <summary>
            Unknown topology.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.EdgeType">
            <summary>
            Specifies the type of an <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge"/>.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.DetailLevels">
            <summary>
            Specifies the detail levels used when creating a graphical representation
            of a geometric entity (faceting).
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetailLevels.Default">
            <summary>
            Specifies that the default detail levels (specified in options) will be used.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetailLevels.Coarse">
            <summary>
            Corresponds to a coarse detail level which is faster to render and uses less storage.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetailLevels.Medium">
            <summary>
            Corresponds to the default detail level which is a compromise between performance and quality.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetailLevels.Fine">
            <summary>
            Corresponds to a fine detail level which is more faithful to the original geometry.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicProjection">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.Projection"/> and <see cref="P:ABB.Robotics.RobotStudio.Stations.Camera.Projection"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.GraphicProjection.Perspective">
            <summary>
            Perspective projection.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.GraphicProjection.Orthographic">
            <summary>
            Orthographic (parallel) projection.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.FollowObjectBehavior">
            <summary>
            Specifies how a <see cref="T:ABB.Robotics.RobotStudio.Stations.Camera"/> behaves when it follows an object.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.FollowObjectBehavior.FixDirection">
            <summary>
            The view point moves with the object, and the view direction is fixed in global coordinates.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.FollowObjectBehavior.FixLookFrom">
            <summary>
            The view point is fixed, and the view direction follows the object.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.FollowObjectBehavior.FollowLocal">
            <summary>
            The view point moves with the object, and the view direction is fixed in local coordinates.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MeshFlags">
            <summary>
            Specifies how a <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> is rendered.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshFlags.DisableBackFaceCull">
            <summary>
            Disable culling of back-facing triangles.
            The front face is defined by counterclockwise winding.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshFlags.NoDefaultWire">
            <summary>
            When doing surface renderering, don't default to wireframe if the MeshFace doesn't have triangle primitives.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionEvent">
            <summary>
            Specifies a collision or near miss event.
            </summary>
            <example>Collision events.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="CollisionDetection Example" lang="cs" title="CollisionDetection Example" /></example>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionEvent.NearMissStarted">
            <summary>
            Near miss started.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionEvent.CollisionStarted">
            <summary>
            Collision started.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionEvent.CollisionEnded">
            <summary>
            Collision ended.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionEvent.NearMissEnded">
            <summary>
            Near miss ended.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionType">
            <summary>
            Specifies the collision type.
            </summary><seealso cref="T:ABB.Robotics.RobotStudio.Stations.CollisionEvent" />
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionType.None">
            <summary>
            No collision.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionType.NearMiss">
            <summary>
            The objects do not intersect, but are closer than a specified near miss distance.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionType.Collision">
            <summary>
            The objects intersect.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IntersectionType">
            <summary>
            Specifies how an object intersects with a volume
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IntersectionType.Outside">
            <summary>
            The object is outside the volume.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IntersectionType.Intersects">
            <summary>
            The object intersects with the volume.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.IntersectionType.Inside">
            <summary>
            The object is completely inside the volume.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.DetectableUsage">
            <summary>
            Specifies how the <see cref="T:ABB.Robotics.RobotStudio.Stations.CollisionDetector"/> uses the Detectable property
            when checking for collision or minimum distance between two <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetectableUsage.Ignore">
            <summary>
            The Detectable property is ignored
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetectableUsage.Either">
            <summary>
            The pair is skipped if either object has Detectable set to false.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetectableUsage.Both">
            <summary>
            The pair is skipped if both objects has Detectable set to false.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetectableUsage.First">
            <summary>
            The pair is skipped if the first object has Detectable set to false.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.DetectableUsage.Second">
            <summary>
            The pair is skipped if the second object has Detectable set to false.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RapidStorageType">
            <summary>
            Specifies the RAPID storage type of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration"/>. Please refer to the RAPID reference manual for more information.
            </summary>
            <remarks>
            This enumeration is used to express compile time information about a RAPID data declaration.
            For example a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> with its <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> set to <b>Constant</b> is possible to modify in RobotStudio. So it is not considered constant in the station. Only at runtime in the controller.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.Constant">
            <summary>
            Corresponds to CONST in RAPID.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.Persistent">
            <summary>
            Corresponds to PERS in RAPID.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.TaskPersistent">
            <summary>
            Corresponds to TASK PERS in RAPID.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.Variable">
            <summary>
            Corresponds to VAR in RAPID.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RapidStorageType.Invalid">
            <summary>
            Invalid storage type.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus">
            <summary>
            Specifies if it is known if a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> is reachable with its current configuration.
            </summary><seealso cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData" />
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus.NoSolutions">
            <summary>
            The target is not reachable.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus.Undefined">
            <summary>
            The target does not have a defined configuration.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus.Defined">
            <summary>
            The target has a configuration which has not been verified.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationStatus.Executed">
            <summary>
            The target configuration is verified.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MechanismType">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.MechanismType"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Undefined">
            <summary>
            The mechanism type is undefined.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Tool">
            <summary>
            The mechanism is a tool.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Robot">
            <summary>
            The mechanism is a TCP robot.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.ExternalAxis">
            <summary>
            The mechanism is external equipment such as a positioner or track.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MechanismType.Other">
            <summary>
            A generic mechanism.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult">
            <summary>Specifies the result of a forward kinematic calculation.</summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult.InsideLimits">
            <summary>
            The operation succeeded.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult.OutsideLimits">
            <summary>
            The joint values were outside the limits.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult.ForwardKinematicsFailed">
            <summary>
            The operation failed.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SystemState">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemState"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SystemState.Starting">
            <summary>
            The virtual controller is starting.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SystemState.Connecting">
            <summary>
            RobotStudio is connecting to the virtual controller and retrieving information.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SystemState.Started">
            <summary>
            The virtual controller is up and running.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SystemState.Stopping">
            <summary>
            The virtual controller is being stopped.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SystemState.Stopped">
            <summary>
            The virtual controller is stopped.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SystemState.Restarting">
            <summary>
            The virtual controller is restarting.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Paused">
            <summary>
            The simulation is paused.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Running">
            <summary>
            The simulation is running.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.SimulationState.Stopped">
            <summary>
            The simulation is stopped.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.VirtualTimeMode">
            <summary>
            Specifies how simulation time is controlled in relation to virtual controllers during simulation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualTimeMode.VirtualFreeRun">
            <summary>
            Virtual controllers are run continously and asynchronously from the simulation.
            </summary>
            <remarks>
            This mode will cause the timing and synchronization of simulation events to be less accurate.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualTimeMode.VirtualTimeSlice">
            <summary>
            Virtual time is controlled by the simulation engine. Virtual controllers will be stepped forward one 'slice'
            of time for each simulation step.
            </summary>
            <remarks>
            This mode will cause the virtual controller to be unresponsive for example when the simulation is paused.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.AxisDirection">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ApproachVector"/>, in tool coordinates.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.Undefined">
            <summary> Undefined approach direction. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.PositiveX">
            <summary> Positive x direction. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.PositiveY">
            <summary> Positive y direction. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.PositiveZ">
            <summary> Positive z direction. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.NegativeX">
            <summary> Negative x direction. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.NegativeY">
            <summary> Negative y direction. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.AxisDirection.NegativeZ">
            <summary> Negative z direction. </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.EventActivationMode">
            <summary>
            Specifies values to indicate the activation mode of an <see cref="T:ABB.Robotics.RobotStudio.Stations.EventTableEntry"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventActivationMode.Off">
            <summary>
            The event is disabled.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventActivationMode.Simulation">
            <summary>
            The event will only be triggered during simulation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventActivationMode.Always">
            <summary>
            The event can be triggered at any time.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Operator"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.None">
            <summary>
            The default value, used for digital signals.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.Equal">
            <summary>
            The event is triggered when the signal value is equal to <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Value"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.NotEqual">
            <summary>
            The event is triggered when the signal value is not equal to <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Value"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.Greater">
            <summary>
            The event is triggered when the signal value is greater than <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Value"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.GreaterOrEqual">
            <summary>
            The event is triggered when the signal value is greater than or equal to <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Value"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.Less">
            <summary>
            The event is triggered when the signal value is less than <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Value"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventRelationalOperator.LessOrEqual">
            <summary>
            The event is triggered when the signal value is less than or equal to <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Value"/>.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.EventLogicOperator">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operator"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.AND">
            <summary>
            The event is triggered when both <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand1"/> and <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand2"/> evaluate to true.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.OR">
            <summary>
            The event is triggered when either <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand1"/> or <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand2"/> evaluates to true.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.NOT">
            <summary>
            The event is triggered when <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand1"/> evaluates to false.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.Timer">
            <summary>
            The event is triggered a specified time after <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand1"/> is triggered.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.EventLogicOperator.NOP">
            <summary>
            The event is triggered when <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand1"/> is triggered.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.FrameType">
            <summary>
            Specifies the usage of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame" />.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.FrameType.Generic">
            <summary>
            A generic frame.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.FrameType.AttachmentPoint">
            <summary>
            A point where another object can be attached.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.FrameType.MountingPoint">
            <summary>
            A point on this object where it can be attached to another object.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification">
            <summary>
            Specifies the classification of a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MechanicalUnitType">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.MechanicalUnitType"/>
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MechanicalUnitActivationMode">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.ActivationMode"/>
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ParameterAccessMode">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.AccessMode"/>
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsPointType">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.PointType"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.None">
            <summary>
            The parameter is not a point.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.ToPoint">
            <summary>
            The parameter represents the destination point.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.CirPoint">
            <summary>
            The parameter represents a circle point.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.ToJointPos">
            <summary>
            The parameter represents the destionation joint position.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.RsPointType.ViaPoint">
            <summary>
            The parameter represents a via point.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MotionType">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.MotionType"/>
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.Joint">
            <summary>
            Joint motion (e.g. MoveJ)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.Linear">
            <summary>
            Linear motion (e.g. MoveL)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.Circular">
            <summary>
            Circular motion (e.g. MoveC)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.None">
            <summary>
            No motion.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MotionType.Undefined">
            <summary>
            Undefined motion.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus">
            <summary>
            Specifies the result of a subscription to an Information Stream Channel such as an I/O signal.
            Some of the values are only relevant for specific channel types, some are common.
            </summary>
            <remarks>
            Currently only I/O signals are supported.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.Undefined">
            <summary>
            Undefined status.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.Succeeded">
            <summary>
            Subscription succeeded.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.InvalidIOSignalName">
            <summary>
            The I/O signal does not exist.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.InvalidIOSignalType">
            <summary>
            The I/O signal is of a different type than expected.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionStatus.MaximumNumberOfSubscriptionsExceeded">
            <summary>
            The maximum numver of subscriptions has been reached.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.TextureType">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.Texture.TextureType"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.TextureType.Default">
            <summary>
            The texture is a surface color texture.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.TextureType.EnvironmentMap">
            <summary>
            The texture is an environment map.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.TextureType.NormalMap">
            <summary>
            The texture is a normal map.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BlendMode">
            <summary>
            Specifies how a texture is blended with the underlying color
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.BlendMode.Disable">
            <summary>
            No blend, only the texture is displayed.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.BlendMode.Modulate">
            <summary>
            The texture color is blended with the color.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.BlendMode.Decal">
            <summary>
            The texture is diplayed on top of the color according to the alpha level of the texture.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PackAndGoLibraryCopyOptions">
            <exclude/>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PackAndGoLibraryCopyOptions.Copy">
            <summary>
            Libraries will be copied into the package.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PackAndGoLibraryCopyOptions.Disconnect">
            <summary>
            Libraries will be merged with the station file.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.PackAndGoLibraryCopyOptions.DoNotPack">
            <summary>
            Don't pack libraries.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PackAndGoFailureReason">
            <exclude/>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ControllerMappingState">
            <summary>
            Defines the different mapping states for an RsIrc5Controller. See <see cref="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.MappingState"/> property.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ControllerMappingState.Unmapped">
            <summary>Controller has not been mapped to the station</summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ControllerMappingState.Mapped">
            <summary>Controller has been fully mapped to the station</summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ControllerMappingState.NotUpdated">
            <summary>Controller has been mapped to the station, but the mapping could be out of sync or incorrect.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode">
            <summary>
            Specifies how a virtual controller should be started or restarted
            </summary>    
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode.WarmStart">
            <summary>
            Warm start
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode.IStart">
            <summary>
            I-start (reset system)
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode.PStart">
            <summary>
            P-start (reset RAPID)
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions">
            <summary>
            Specifies how a screenshot of the graphics should be rendered.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideTemporaryGraphics">
            <summary>
            Hide temporary items such as markers.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideCoordinateSystem">
            <summary>
            Hide the coordinate system.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideButtons">
            <summary>
            Hide the buttons.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideFloor">
            <summary>
            Hide the floor.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.NoHighlights">
            <summary>
            No highlights on objects.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.HideMarkups">
            <summary>
            Hide markups and labels.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.SimpleLighting">
            <summary>
            Force simple lighting.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.AdvancedLighting">
            <summary>
            Force advanced lighting, if supported.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.NoShadows">
            <summary>
            Disable shadows
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.TransparentBackground">
            <summary>
            Render to a transparent background
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.NoMultiSample">
            <summary>
            Disable multisampling
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.ColorKeys">
            <summary>
            ABB Internal use
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ScreenshotOptions.DefaultLights">
            <summary>
            Use default lights.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MappingFailureReason">
            <exclude/>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.CollisionHighlightLevel">
            <summary>
            Specifies values for <see cref="P:ABB.Robotics.RobotStudio.Stations.CollisionSet.HighlightLevel"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionHighlightLevel.Part">
            <summary>
            The colliding <see cref="F:ABB.Robotics.RobotStudio.Stations.CollisionHighlightLevel.Part"/> will be highlighted.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionHighlightLevel.Body">
            <summary>
            The colliding <see cref="F:ABB.Robotics.RobotStudio.Stations.CollisionHighlightLevel.Body"/> will be highlighted.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.CollisionHighlightLevel.Face">
            <summary>
            The colliding <see cref="F:ABB.Robotics.RobotStudio.Stations.CollisionHighlightLevel.Face"/> will be highlighted.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ZoneVisualization">
            <summary>
            Specifies how zone data for move instructions in a path is visualized.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ZoneVisualization.None">
            <summary>
            Zones are not visualized
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ZoneVisualization.Programmed">
            <summary>
            Programmed zones are visualized as a circle with a radius of pzone_tcp.
            If the effective zone is smaller, it is visualized as a line perpendicular to the path.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.TrigValidity">
            <summary>
            Indicates the validity of an action instruction triggered by a condition, e.g. SetBrush.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.TrigValidity.InsideZone">
            <summary>
            Indicates that the trig plane is inside the zone of the subsequent move instruction,
            meaning that the event might not be triggered depending on the actual movement.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.TrigValidity.OutsidePath">
            <summary>
            Indicates that the trig plane is outside of the path of the subsequent move instruction,
            meaning that the event will not be triggered.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.TrigValidity.UnfitAxis">
            <summary>
            Indicates that the trig plane axis is not chosen to align with the major axis of movement
            of the subsequent move instruction.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.BodyPrimitiveType">
            <summary>
            Type of body, if known
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ReachabilityState">
            <summary>
            Whether the robot can reach the target of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction"/> or not.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ReachabilityState.Unknown">
            <summary>
            Not known if the target is reachable.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ReachabilityState.Reachable">
            <summary>
            The target is reachable.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ReachabilityState.ReachableWithOtherConfiguration">
            <summary>
            The target is reachable using another robot configuration.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ReachabilityState.Unreachable">
            <summary>
            The target is not reachable.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ReachabilityState.Pending">
            <summary>
            The reachability is about to be calculated.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConveyorParameterizationType">
            <summary>
            ABB Internal use only.
            Specifies the topology and extension of a conveyor belt.
            </summary>
            <exclude/>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorParameterizationType.Closed">
            <summary>
            The conveyor belt is closed, making it possible for objects to follow the belt infinitely.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorParameterizationType.Open">
            <summary>
            The conveyor belt has a physical limit and will drop objects that reach any of its limits.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConveyorSignal">
            <summary>
            ABB Internal use only.
            For identifying conveyor specific signals in the controller.
            </summary>
            <exclude/>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.Connected">
            <summary>
            DI signal for connection
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.DropWObj">
            <summary>
            DO signal to drop a connected object on the encoder
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.NullSpeed">
            <summary>
            DI signal indicating zero speed on the conveyor
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.ObjectsInQueue">
            <summary>
            GI showing the number of objects in the object queue. These objects have passed the
            synchronization switch but have not gone outside the start window.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.ObjLost">
            <summary>
            DI signal to indicate that an object has gone past the start window without being connected
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.Position">
            <summary>
            AI signal for conveyor position
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.Rem1PObj">
            <summary>
            DO signal to drop first pending object in encoder interface queue
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.RemAllPObj">
            <summary>
            DO signal to drop all pending objects in encoder interface queue
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.Velocity">
            <summary>
            AI signal for conveyor speed
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.WaitWObj">
            <summary>
            DO signal to indicate that a connection is desired
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.Cnt1FromEnc16bit">
            <summary>
            GI counter value from encoder to main controller - low word
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.Cnt1ToEnc16bit">
            <summary>
            GO counter value from main controller to encoder - low word
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.Cnt2FromEnc16bit">
            <summary>
            GI counter value from encoder to main controller - high word
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.Cnt2ToEnc16bit">
            <summary>
            GO counter value from main controller to encoder - high word
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.CntToEncStr">
            <summary>
            DO strobe for a 32-bit position to the encoder node from the job queue
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.NewObjStrobe">
            <summary>
            DI new position from the encoder node to enter the job queue.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.CntFromEnc32bit">
            <summary>
            GI counter value from encoder to main controller
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.CntToEnc32bit">
            <summary>
            GO counter value from main controller to encoder
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.DataReady">
            <summary>
            DI signal indicating a poll of the encoder interface
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.DirOfTravel">
            <summary>
            DI signal indicating a travel direction.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.ForceJob">
            <summary>
            DO run this job even if the checkpoint should fail
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConveyorSignal.PosInJobQ">
            <summary>
            DO send the position to MC to be stored in the job queue. (0 = Queuetracking disabled. Same mode as DSQC 354)
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ConfigurationMode">
            <summary>
            Specifies how the stored target configuration is used in <see cref="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpToAsync(ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean,ABB.Robotics.RobotStudio.Stations.ConfigurationMode)"/> and
            <see cref="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.JumpToAsync(System.Boolean,ABB.Robotics.RobotStudio.Stations.ConfigurationMode)"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationMode.Exact">
            <summary>
            The solution must match the stored configuration.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationMode.Compliant">
            <summary>
            The solution must match the stored configuration within +-1 for Cf1, Cf4 and Cf6, while Cfx must be equal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ConfigurationMode.Ignore">
            <summary>
            The stored configuration is ignored.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.JumpResult">
            <summary>
            Specifies the result of <see cref="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpToAsync(ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean,ABB.Robotics.RobotStudio.Stations.ConfigurationMode)"/> and
            <see cref="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.JumpToAsync(System.Boolean,ABB.Robotics.RobotStudio.Stations.ConfigurationMode)"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.JumpResult.Success">
            <summary>
            Jump succeeded.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.JumpResult.InvalidConfiguration">
            <summary>
            The target configuration could not be honored with the given <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationMode"/>.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.JumpResult.NoSolutions">
            <summary>
            The target could not be reached with any configuration.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.JumpResult.OutsideLimits">
            <summary>
            The solution was outside the joint limits of the mechanism.
            This should normally only happen for jointtargets.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.HighlightStyle">
            <summary>
            Specifies the style for highlighting objects in the 3D graphics
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.HighlightStyle.None">
            <summary>
            Removes the highlight
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.HighlightStyle.Overlay">
            <summary>
            Overlays the object with a color
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.HighlightStyle.Outline">
            <summary>
            Adds an outline to the object
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Stations.Simulator.EvaluateTrigger"/> event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.#ctor(ABB.Robotics.RobotStudio.Stations.EventTableTrigger,System.Double)">
            <summary>
            ABB internal use
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.Trigger">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.EventTableTrigger"/> to evaluate.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.Time">
            <summary>
            Gets the current simulation time.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.Execute">
            <summary>
            Gets or sets a value indicating whether the action(s) associated with <see cref="P:ABB.Robotics.RobotStudio.Stations.EvaluateTriggerEventArgs.Trigger"/> should be executed
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTable.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.AttachmentParent">
            <summary>
            Gets or sets the attachment parent.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionAttach.AttachmentChild">
            <summary>
            Gets or sets the attachment child.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionCustom.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionDetach.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionDetach.AttachmentParent">
            <summary>
            Gets or sets the attachment parent.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionDetach.AttachmentChild">
            <summary>
            Gets or sets the attachment child.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionIO.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionIO.Value">
            <summary>
            Gets or sets a value.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionIO.Controller">
            <summary>
            Gets or sets the controller that this trigger applies to. Controller must be either an RsIrc5Controller
            (real signals), Station (station signals) or SmartComponent.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.VirtualSignal">
            <summary>
            Gets or sets a virtual signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.VirtualSignalValue">
            <summary>
            Gets or sets the virtual signal value.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.Mechanism">
            <summary>
            Gets or sets a mechanism.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMechanicalPose.ToPoseName">
            <summary>
            Gets or sets a pose name.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionMonitor.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMonitor.MonitorEnabled">
            <summary>
            Gets or sets m onitor enabled.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMonitor.Mechanism">
            <summary>
            Gets or sets a mechanism.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionMove.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionMove.Object">
            <summary>
            Gets or sets the moved object.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionNothing.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionShow.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionShow.Object">
            <summary>
            Gets or sets the .
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionTimer.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableActionTimer.TimerEnabled">
            <summary>
            Gets or sets timer enabled.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableActionVstaMacro.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableEntry.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.Comment">
            <summary>
            Gets or sets a comment to this EventTableEntry object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.Group">
            <summary>
            Gets or sets a group name to this EventTableEntry object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.Cyclic">
            <summary>
            Gets or sets a cyclic.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableEntry.EventActivationMode">
            <summary>
            Gets or sets a activation mode to this EventTableEntry object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTrigger.TimeStamp">
            <summary>
            Time when the trigger is executed.
            </summary>
            <remarks>
            If the time stamp is undefined, this value is -1.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCollision.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCollision.CollisionEventType">
            <summary>
            Gets or sets a collision event type.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCollision.CollisionSet">
            <summary>
            Gets or sets a collision set.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerCustom.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Value">
            <summary>
            Gets or sets the signal value that will cause the event to trigger.
            </summary>
            <remarks>
            For analog signals, this value is compared to the signal value according to <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Operator"/>.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Operator">
            <summary>
            Gets or sets the operator.
            </summary>
            <remarks>
            The operator is only used for analog signals. The actual value is
            considered to be the left operand and the trigger value the right operand.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerIO.Controller">
            <summary>
            Gets or sets the controller that this trigger applies to. Controller must be either an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>
            (real signals), a <see cref="T:ABB.Robotics.RobotStudio.Stations.Station"/> (station signals) or a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand1">
            <summary>
            Gets or sets the first operand.
            </summary>
            <value>Must be either EventTableTriggerIO or EventTableTriggerLogic</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operand2">
            <summary>
            Gets or sets the second operand. Only valid if <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operator" /> is AND or OR.
            </summary>
            <value>Must be either EventTableTriggerIO or EventTableTriggerLogic</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operator">
            <summary>
            Gets or sets the logic operator simulated by this.
            </summary>
            <value />
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Delay">
            <summary>
            Gets or sets the delay. Only valid if <see cref="P:ABB.Robotics.RobotStudio.Stations.EventTableTriggerLogic.Operator" /> is Timer.
            </summary>
            <value />
            <remarks>The accuracy is dependant on the simulation time step.</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ExecuteActionEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Stations.Simulator.ExecuteAction"/> event.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ExecuteActionEventArgs.Action">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.EventTableAction"/> to execute.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ExecuteActionEventArgs.Time">
            <summary>
            Gets the current simulation time.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues">
            <summary>
            Represents the axis positions in radians of the robots external axes.
            </summary><seealso cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /><seealso cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_a">
            <summary>
            Gets the position for robot external axis <b>a</b>.		
            </summary>
            <value>
            The position for robot external axis <b>a</b> in radians.
            The special value 9E9 means that no position is defined for this axis. A typical reason is that the axis is not used.returned.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_b">
            <summary>
            Gets the position for robot external axis <b>b</b>.		
            </summary>
            <value>
            The position for robot external axis <b>b</b> in radians.
            The special value 9E9 means that no position is defined for this axis. A typical reason is that the axis is not used.returned.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_c">
            <summary>
            Gets the position for robot external axis <b>c</b>.		
            </summary>
            <value>
            The position for robot external axis <b>c</b> in radians.
            The special value 9E9 means that no position is defined for this axis. A typical reason is that the axis is not used.returned.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_d">
            <summary>
            Gets the position for robot external axis <b>d</b>.		
            </summary>
            <value>
            The position for robot external axis <b>d</b> in radians.
            The special value 9E9 means that no position is defined for this axis. A typical reason is that the axis is not used.returned.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_e">
            <summary>
            Gets the position for robot external axis <b>e</b>.		
            </summary>
            <value>
            The position for robot external axis <b>e</b> in radians.
            The special value 9E9 means that no position is defined for this axis. A typical reason is that the axis is not used.returned.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.Eax_f">
            <summary>
            Gets the position for robot external axis <b>f</b>.		
            </summary>
            <value>
            The position for robot external axis <b>f</b> in radians.
            The special value 9E9 means that no position is defined for this axis. A typical reason is that the axis is not used.returned.
            </value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.SetAxisValues(ABB.Robotics.RobotStudio.Stations.ExternalAxisValues@,System.Double[],System.Int32[])">
            <summary>
            Sets only the values of the active external axes. One array contains the values for the active axes, and another arrays specifies the positions in the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" />, where the values will be set.
            A RAPID robtarget specifies the axis positions for six robot axes and six external axes. More than 6 external axes can be controlled, but not simultaneously.
            Behind the scenes, all the axes position values are treated as an array of length 12. The first six elements contains the position values for the robot axes, and the last six, contains the position values for the external axes.
            Please refer to <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit" /> for more information about logical axis, and activation/deactivation of external axes.
            It is common that none, or only a few of the external axes are used. If for example two axes are used, the two array parameters shall have the lenght two.
            </summary>
            <param name="externalAxes">The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> which values shall be set. Which axes (Eax_1 - Eax_6), that will be affected depends on the <b>logicalAxis</b></param>
            <param name="activeAxisValues">An array of double that contains the values to set.</param>
            <param name="logicalAxis">An array of integers that specifies in which positions (Eax_1 to Eax_6) the values shall be set.</param>
            <exception cref="T:System.ArgumentException">
            The different reasons are:
            The axisValue is not of the same length as the logicalAxis array.
            The arrays have a length that is not between 1 and 6.
            The values in the logicalAxis array are not in the range 7 to 12.
            </exception><seealso cref="!:RsMechanicalUnit" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.SetAxisValues(ABB.Robotics.RobotStudio.Stations.ExternalAxisValues@,System.Double[])">
            <summary>
            Sets the values of the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" />, given the specified array of doubles.
            </summary>
            <exception cref="T:System.ArgumentException">
            The axisValue array is not of length 6.
            </exception>
            <remarks>
            The length of axisValues must be 6.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.GetAxisValues(System.Int32[])">
            <summary>
            Returns the axes values for the active external axes in Eax_1 to Eax_6 as an array.
            </summary>
            <param name="logicalAxis">An array of integers that specifies for the positions (Eax_1 to Eax_6) to get the values for.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues.GetAxisValues">
            <summary>
            Returns the external axes values in Eax_1 to Eax_6 as an array.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Face">
            <summary>
            A face is a bounded portion of a single geometric surface, the two-dimensional analog of a body.
            The boundary is represented by one or more loops or edges. Each face is simply connected,
            implying that one can traverse from any point on the interior of the face to any other point
            on the interior of the face without crossing the boundary of the face.
            In general, it is not meaningful to distinguish exterior and interior loops of edges,
            though for certain surface types this may be possible and some algorithms may do so.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Visible">
            <summary>
            Gets or sets whether the face is visible or not in the graphics.
            </summary>
            <example>Get/Set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Face Properties Example" lang="cs" title="Face Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Color">
            <summary>
            Gets or sets color of the face in the graphics.
            </summary>
            <example>Get/Set Color.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Face Properties Example" lang="cs" title="Face Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Opacity">
            <summary>
            Gets or sets the opacity of the face.
            </summary>
            <remarks>
            Valid values are 0.0 (fully transparent) through 1.0 (fully opaque).
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Loops">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.LoopCollection"/> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Face"/>.
            </summary>
            <example>Get LoopCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Face Properties Example" lang="cs" title="Face Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Face.Body">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Face.Body"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Face"/> belongs to.
            </summary>
            <example>Get Body.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Face Properties Example" lang="cs" title="Face Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Face.FaceType">
            <summary>
            Returns the type of the face.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetNormalToSurface(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)">
            <summary>Calculates the closest point and the corresponding normal.</summary>
            <param name="testPoint">The test point.</param>
            <param name="hitPoint">The closest point.</param>
            <param name="hitPointNormal">Normal to the closest point.</param>
            <returns>True if successful.</returns>
            <remarks>All parameters are in world coordinates.</remarks>
            <example>GetNormalToSurface.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Face Properties Example" lang="cs" title="Face Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.ReverseNormal">
            <summary>
            Reverses the sense of a face; i.e., makes the face material void
            (flips the normal). Also, alters the senses of the coedges to avoid
            changing the shape of the face.
            </summary>
            <returns>True if successful.</returns>
            <remarks>
            This method does not check to see if the face belongs to a solid, nor
            does it compensate for side effects caused by reversal of the face.
            The user must ensure that this method is called only for independent
            faces.
            </remarks>
            <example>Reverse Normal.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Face Properties Example" lang="cs" title="Face Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> that is closest to the provided point.</summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
            <example>Find closest Vertex.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Face Properties Example" lang="cs" title="Face Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetURange(ABB.Robotics.RobotStudio.Stations.ParameterRange@)">
            <summary>Returns the parameter range of a surface in the u-parameter direction.</summary>
            <param name="uRange">Parameter range.</param>
            <returns> False if the range is unbounded.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetVRange(ABB.Robotics.RobotStudio.Stations.ParameterRange@)">
            <summary>Returns the parameter range of a surface in the v-parameter direction.</summary>
            <param name="vRange">Parameter range.</param>
            <returns> False if the range is unbounded.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetCenterPoint(ABB.Robotics.Math.Vector3@)">
            <summary>
            Returns the center point of a planar surface.
            </summary>
            <param name="centerPoint"></param>
            <returns> True if the face is planar, false otherwise. </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetEdges">
            <summary>
            Returns an array containing the edges of this face.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetVertices">
            <summary>
            Returns an array containing the vertices of this face.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetBoundingBox(System.Boolean,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)">
            <summary>Computes the (axis-aligned) bounding box for this object.</summary>
            <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
            <param name="min">The first corner of the bounding box.</param>
            <param name="max">The second corner of the bounding box.</param>
            <remarks>The Face must containing a station.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetBoundingBox(System.Boolean)">
            <summary>Computes the (axis-aligned) bounding box for this object.</summary>
            <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.GetMaterial">
            <summary>
            Returns the material used to render this face
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material,System.Drawing.SizeF)">
            <summary>Sets the material of the face and re-scales the texture cooordinates.</summary>
            <param name="material">Material to use when rendering this face.</param>
            <param name="scale">Scale factor for u and v texture coordinates. Range from 0 to 1.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material)">
            <summary>Sets the material of the face.</summary>
            <param name="material">Material to use when rendering this face.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material,System.Boolean)">
            <summary>Sets the material of the face.</summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Face.Connected(ABB.Robotics.RobotStudio.Stations.Face[])">
            <summary>Checks whether a set of faces are connected, e.g. form a continous surface.</summary>
            <param name="faces">Faces to check.</param>
            <returns>True if all faces are connected.</returns>
            <remarks>Two faces are considered connected if they share at least one Edge.</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.FaceCollection">
            <summary>
            A collection of Face objects.
            </summary>
            <example>Face Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Face Properties Example" lang="cs" title="Face Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Flange">
            <summary>
            Represents a flange of a <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" />. A flange is an entity that is created when modeling a mechanism.
            Using the flange you can attach other objects deriving from <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to the link of the flange.
            A robot usually has a flange modeled at its wrist. That makes it possible to for example attach a tool on the wrist of a robot.
            </summary><seealso cref="T:ABB.Robotics.RobotStudio.Stations.MechanismBuilder" />
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Flange.Link">
            <summary>
            Gets the link (a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> ), on which the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/> is placed.
            </summary>
            <value>
            The link (a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> ), on which the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/> is placed. Mechanisms are built up of links connected with joints.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Flange.Name">
            <summary>
            Gets name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/>.
            </summary>
            <value>
            The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/>.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Flange.Offset">
            <summary>
            Gets the offset from the link, where the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/> is placed.
            </summary>
            <value>
            A <see cref="T:ABB.Robotics.Math.Matrix4"/> that specifies the position of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/>, relative the link.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Flange.GlobalMatrix">
            <summary>
            Gets the global position of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/>.
            </summary>
            <value>
            A <see cref="T:ABB.Robotics.Math.Matrix4"/> that specifies the position of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/>, in world coordinates.
            </value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Flange.GetFrame">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame" /> that is associated with the <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange" />.
            This frame always has the same name as the flange.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Flange.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean)">
            <summary>
            Attaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to the link of this flange.
            Please refer to the documentation of <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details about attaching objects to each other.
            </summary>
            <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to attach to the link of this flange.</param>
            <param name="mount">Specifies if the position of the child shall be affected by the attachment or not. See <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details.</param>
            <returns>True if an attachment could be created, false otherwise</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Flange.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Detaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> from the link of this flange.
            Please refer to the documentation of <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details about detaching objects.
            </summary>
            <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to detach from the link of this flange.</param>
            <returns>True if the child could be detached, false otherwise</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Frame">
            <summary>
            Represents a simple modelling frame.
            </summary>
            <example>Frame Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Frame Properties Example" lang="cs" title="Frame Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.#ctor">
            <summary>
            Initializes a new instance of the Frame class.
            </summary>
            <example>Create Frame.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Frame Properties Example" lang="cs" title="Frame Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.Parent">
            <summary>
            Returns a reference to the parent Station.
            </summary>
            <remarks>
            You can use the Parent property to navigate up from the current object to
            the object one level higher.
            </remarks>
            <value>Returns a ProjectObject representing the current object's parent.</value>
            <example>Get Parent.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Frame Properties Example" lang="cs" title="Frame Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.Name">
            <summary>
            Gets or sets the name of the object
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.Transform">
            <summary>
            Gets the transform of the Frame.
            </summary>
            <example>Get Transform.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Frame Properties Example" lang="cs" title="Frame Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.Visible">
            <summary>
            Gets or sets a value indicating whether the frame will
            be displayed in the graphics.
            </summary>
            <example>Get/Set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Frame Properties Example" lang="cs" title="Frame Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.FrameSize">
            <summary>
            Gets or sets the size of the graphical frame.
            </summary>
            <example>Get/Set FrameSize.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Frame Properties Example" lang="cs" title="Frame Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.FrameType">
            <summary>
            Gets or sets a value indicating how the frame is used.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Frame.ShowName">
            <summary>
            Gets or sets a value indicating whether the name of the frame will
            be displayed in the graphics.
            </summary>
            <value></value>
            <example>Get/Set ShowName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Frame Properties Example" lang="cs" title="Frame Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Checks if an <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild"/> can be attached to this frame.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
            <summary>
            Attaches an <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild"/> to this frame.
            </summary>
            <param name="child">The object to attach.</param>
            <param name="mount">True if the object should be moved to the frame.</param>
            <param name="offset">The offset from the frame (if mount is true).</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Detaches an attached object from this frame.
            </summary>
            <param name="child"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.Highlight(System.Drawing.Color)">
            <summary>
            Sets the highlight color of the frame.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.Highlight">
            <summary>
            Sets the highlight color of the frame to the default highlight color.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Frame.ResetHighlight">
            <summary>
            Resets the highlight color of the target to the default color.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.FrameCollection">
            <summary>
            Represents a collection of Frames in a Station.
            </summary>
            <example>Get FramesCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Frame Properties Example" lang="cs" title="Frame Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">
            <summary>
            The base class of all objects in the station that represent physical objects or entities.
            </summary>
            <example>GraphicComponent Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ChildInstances">
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Parent">
            <summary>
            The Parent property returns a reference to the parent GraphicComponent object.
            </summary>
            <remarks>
            You can use the Parent property to navigate up from the current object to
            the object one level higher.
            </remarks>
            <value>Returns a ProjectObject object.</value>
            <example>Get Parent.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Library">
            <summary>
            Returns the GraphicComponentLibrary that contains the definition of this component, or null.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Transform">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Transform"/> of the object.
            </summary>
            <remarks>
            The <see cref="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Transform"/> is read-only on mechanism links.
            </remarks>
            <example>Get Transform.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Visible">
            <summary>
            Gets or sets whether the object should be displayed in the graphics or not.
            </summary>
            <example>Get/Set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Color">
            <summary>
            Gets or sets the color of the object in the graphics.
            </summary>
            <remarks>
            Returns Color.Empty if color is ambiguous.
            </remarks>
            <example>Get/Set Color.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material,System.Boolean)">
            <summary>
            Sets the material of the object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Opacity">
            <summary>
            Gets or sets the opacity of the object.
            </summary>
            <remarks>
            Valid values are 0.0 (fully transparent) through 1.0 (fully opaque).
            Returns 1.0 if opacity is ambiguous.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.PickingEnabled">
            <summary>
            Gets or sets if the component can be picked and selected in 3D graphic windows.
            </summary>
            <example>Get/Set PickingEnabled.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Detectable">
            <summary>
            Gets or sets a value indicating the the component can be detected by sensors.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ClipPlane">
            <summary>
            Gets or sets a ClipPlane that will hide all geometry in the negative z space of its transform.
            </summary>
            <remarks>
            Setting a clip plane on a GraphicComponent will override the global clip plane defined on a GraphicControl.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Frames">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.FrameCollection"/> object that represents all the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame"/>s on this object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.PhysicsMotionControl">
            <summary>
            Gets or sets the physical behavior of this <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/>.
            </summary>
            <remarks>
            Only supported in 64-bit build.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Copy">
            <summary>
            Creates a deep copy of the object.
            </summary>
            <returns>The copy of the object.</returns>
            <example>Copy.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.CopyInstance">
            <summary>
            Creates a copy but keeps a connection to the definition of the GraphicComponent, typically in a Library definition.
            </summary>
            <returns>The instance copy of the object.</returns>
            <example>CopyInstance.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.MoveDefinitionToLibrary">
            <summary>
            Moves the definition to a new Library.
            </summary>
            <returns>The new Library containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> as RootComponent.</returns>
            <example>MoveDefinitionToLibrary.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Delete">
            <summary>
            Deletes this object permanently.
            </summary>
            <remarks>
            The object must first be removed from its parent. Any subsequent attempts to access
            the object or its children will fail. Use with caution. The operation is not undoable.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Highlight(System.Boolean)">
            <summary>
            Highlights the object using the default highlight style and color.
            </summary>
            <param name="value">True if the object should be highlighted, False to turn the highlighting off.</param>
            <example>Highlight.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Highlight(System.Boolean,System.Drawing.Color)">
            <summary>
            Highlights the object using a specified color.
            </summary>
            <param name="value">True if the object should be highlighted, False to turn the highlighting off.</param>
            <param name="color">Highlight color.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.DisconnectFromLibrary">
            <summary>
            Moves the definition to the Station or Project. This causes the Library property to return Null.
            </summary>
            <example>DisconnectFromLibrary.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
            <remarks>
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> will be closed if this is the only instance connected to it.
            This will cause any subsequent operations on the GraphicComponentLibrary to fail.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.DeleteGeometry">
            <summary>
            Recursively deletes all CAD geometry.
            </summary>
            <example>DeleteGeometry.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.GetNormalToSurface(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Face@)">
            <summary>Calculates the closest point and the corresponding normal.</summary>
            <param name="testPoint">The test point, in world coordinates.</param>
            <param name="hitPoint">The closest point, in world coordinates.</param>
            <param name="hitPointNormal">Normal to the closest point, in world coordinates. May contain NaN values on failure.</param>
            <param name="hitFace">The face of the closest point. If the closest point is on an edge or vertex, hitFace will be null.</param>
            <remarks>If this GraphicComponent does not contain geometric information the result will be an approximation, and hitFace will be null.</remarks>
            <example>GetNormalToSurface.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.TryGetNormalToSurface(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Face@)">
            <summary>Calculates the closest point and the corresponding normal.</summary>
            <param name="testPoint">The test point, in world coordinates.</param>
            <param name="hitPoint">The closest point, in world coordinates.</param>
            <param name="hitPointNormal">Normal to the closest point, in world coordinates.</param>
            <param name="hitFace">The face of the closest point. If the closest point is on an edge or vertex, hitFace will be null.</param>
            <returns>True on success</returns>
            <remarks>If this GraphicComponent does not contain geometric information the result will be an approximation, and hitFace will be null.</remarks>
            <example>GetNormalToSurface.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.GetBoundingBox(System.Boolean,ABB.Robotics.Math.Vector3@,ABB.Robotics.Math.Vector3@)">
            <summary>
            Computes the (axis-aligned) bounding box for this object.
            </summary>
            <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
            <param name="min">The first corner of the bounding box.</param>
            <param name="max">The second corner of the bounding box.</param>
            <example>GetBoundingBox.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.GetBoundingBox(System.Boolean)">
            <summary>
            Computes the (axis-aligned) bounding box for this object.
            </summary>
            <param name="global">Specifies that the bounding box should be in the global (world) coordinate system rather
            than in this object's local coordinate system.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportAsync(System.String)">
            <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the given CAD or graphics file.
            </summary>
            <remarks>
            Supports all formats available in the Import Geometry user interface of RobotStudio. 
            When importing a CAD file, avoid all modeling operations until the returned Task is completed.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportAsync(System.String,ABB.Robotics.RobotStudio.Stations.GraphicImportSettings,ABB.Robotics.RobotStudio.IProgressCallback)">
            <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the given CAD or graphics file.
            </summary>
            <remarks>
            Supports all formats available in the Import Geometry user interface of RobotStudio. 
            When importing a CAD file, avoid all modeling operations until the returned Task is completed.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.CanImport(System.String)">
            <summary>
            Returns true if the fileName refers to a file type that is possible to import using ImportAsync().
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportXmlAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from in-memory XML.
            </summary>
            <param name="xmlData"> The XML to compile. </param>
            <param name="referenceDirectory"> The directory to search for files referenced by the XML data. </param>
            <param name="defaultName"> The default name of the GraphicComponent. </param>
            <param name="defaultResource"> The defalt name of the file containing SmartComponent resources. </param>
            <returns> The compiled GraphicComponent. </returns>
            <remarks> The XML is validated against GraphicComponentSchema.xsd. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportXmlAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> specified in a Library XML file.
            </summary>
            <param name="libraryXmlFile">XML file that adheres to LibraryCompilerSchema.xsd.</param>
            <param name="libraryFileName">The 'fileName' attribute of the Library or Variant node that specifies the component.</param>
            <param name="replacements">Key-value pairs where {key} in the XML is replaced by the corresponding value.</param>
            <returns> The compiled GraphicComponent. </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportXmlAsync(System.String,System.String)">
            <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> specified in a Library XML file.
            </summary>
            <param name="libraryXmlFile">XML file that adheres to LibraryCompilerSchema.xsd.</param>
            <param name="libraryFileName">The 'fileName' attribute of the Library or Variant node that specifies the component.</param>
            <returns> The compiled GraphicComponent. </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ImportXmlAsync(System.String)">
            <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from an RSXML file.
            </summary>
            <param name="xmlFile"> The filename of the RSXML file to compile. </param>
            <returns> The compiled GraphicComponent. </returns>
            <remarks> The XML is validated against GraphicComponentSchema.xsd. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ExportXml(System.String,System.String)">
            <summary>
            Exports this to an XML file
            </summary>
            <param name="xmlFile">The path to the XML file to create.</param>
            <param name="referenceDirectory">The directory where parts and assets should be saved.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponent.ExportXml(System.String)">
            <summary>
            Exports this to an XML file
            </summary>
            <param name="xmlFile">The path to the XML file to create.</param>
            <remarks>Parts and assets are saved in the same directory as xmlFile.</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection">
            <summary>
            A collection of GraphicComponent objects.
            </summary>
            <example>GraphicComponent Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Item(System.String)">
            <summary>This is obsolete, use TryGetGraphicComponent instead.</summary>
            <returns>The first <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> with this name in the collection.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.TryGetGraphicComponent(System.String,ABB.Robotics.RobotStudio.Stations.GraphicComponent@)">
            <summary>Gets the GraphicComponent with the specified name.</summary>
            <param name="name">The name of the GraphicComponent to get.</param>
            <param name="graphicComponent">When this method returns, contains the GraphicComponent associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the GraphicComponentCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Add(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to the collection.
            </summary>
            <param name="graphicComponent">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to add to the collection.</param>
            <example>Add GraphicComponent.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Remove(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Remove a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the collection.
            </summary>
            <param name="graphicComponent">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to remove from the collection.</param>
            <remarks>If this is a mechanism and robot, the dummy task associated with this will also be removed.</remarks>
            <example>Remove GraphicComponent.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.Remove(ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Boolean)">
            <summary>
            Remove a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> from the collection.
            </summary>
            <param name="graphicComponent">The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> to remove from the collection.</param>
            <param name="dispose">Indicates if the <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> should be disposed
            when this change is no longer undoable. Set to true if the component will not be used subsequently. </param>
            <remarks>If this is a mechanism and robot, the dummy task associated with this will also be removed.
            Trying to remove a component from a Mechanism will cause an exception.</remarks>
            <example>Remove GraphicComponent.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection.AddLibraryComponent(System.String)">
            <summary>
            Loads a library component from a file and adds it to the collection.
            </summary>
            <param name="fileName">File name of the library file (.rslib) to load.</param>
            <returns>The added <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/>.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup">
            <summary>
            The GraphicComponentGroup is an assembly of GraphicComponent objects.
            </summary>
            <example>GraphicComponentGroup Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.#ctor">
            <summary>
            Creates and initializes a new GraphicComponentGroup object.
            </summary>
            <returns>The new GraphicComponentGroup object</returns>
            <example>GraphicComponentGroup Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.GraphicComponents">
            <summary>
            Gets a GraphicComponentCollection object that represents all the graphic components
            on this GraphicComponentGroup object.
            </summary>
            <value>The GraphicComponentCollection that represents all the graphic components on
            this GraphicComponentGroup object.</value>
            <example>GraphicComponentGroup Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Test if the supplied child can be attached.
            </summary>
            <param name="child">The child to be tested.</param>
            <returns>True, if the supplied child can be attached, false otherwise</returns>
            <example>GraphicComponentGroup Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
            <summary>
            Attaches a child object to this GraphicComponentGroup.
            </summary>
            <param name="child">The child to be attached.</param>
            <param name="mount">Specifies whether the child should be mounted, i.e. moved, on to the location of the parent</param>
            <param name="offset">Specifies the offset matrix to be used from the attachment point.
            This is only used when mount is set to True.</param>
            <returns>True, if the attachmet succeded</returns>
            <example>GraphicComponentGroup Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Detaches a child object from this GraphicComponentGroup.
            </summary>
            <param name="child">The child to be detached.</param>
            <returns>True, if the detachment succeded</returns>
            <example>GraphicComponentGroup Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentGroup.MergeToPart">
            <summary>
            Copies all geometry into a single <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/>.
            </summary>
            <returns></returns>
            <remarks>
            CAD geometry will be preserved only if <i>all</i> contained Parts have geometry.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary">
            <summary>
            A GraphicComponentLibrary allows you to save and load graphic components to and from a library file.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.#ctor">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary"/> object.
            </summary>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.RootComponent">
            <summary>
            Get the root <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> of the library.
            </summary>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" />
            </example>
            <remarks>
            Do not use the setter of this property, it is obsolete. Instead use GraphicComponent.MoveDefinitionToLibrary() 
            in order to move an object to this library.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.Classification">
            <summary>
            Gets or Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ComponentLibraryClassification"/> of the library.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.ReadOnly">
            <summary>
            Gets or sets a value indicating if the corresponding library file is readonly or in use.
            </summary>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" />
            </example>
            <remarks> The value can only be set to true. Trying to set the value to false will
            cause an exception. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,System.Boolean)">
            <summary>
            Creates and initializes a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> from a file.
            </summary>
            <param name="fileName">The filename of the library to load.</param>
            <param name="asReadOnly">Specifies whether or not the library should be loaded in read only mode.</param>
            <param name="progressDelegate">Specifies a <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> delegate to handle the progress notification events.</param>
            <param name="loadGeometry">Specifies whether or not the geometry should be loaded from the Library.</param>
            <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.</returns>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.LoadAsync(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,System.Boolean)">
            <summary>
            Creates and initializes a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> from a file.
            </summary>
            <param name="fileName">The filename of the library to load.</param>
            <param name="asReadOnly">Specifies whether or not the library should be loaded in read only mode.</param>
            <param name="progressDelegate">Specifies a <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> delegate to handle the progress notification events.</param>
            <param name="loadGeometry">Specifies whether or not the geometry should be loaded from the Library.</param>
            <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.</returns>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Creates and initializes a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> from a file.
            </summary>
            <param name="fileName">The filename of the libarary to load.</param>
            <param name="asReadOnly">Specifies whether or not the library should be loaded in read only mode.</param>
            <param name="progressDelegate">Specifies a <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> delegate to handle the progress notification events.</param>
            <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.</returns>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.Load(System.String,System.Boolean)">
            <summary>
            Creates and initializes a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> from a file.
            </summary>
            <param name="fileName">The filename of the libarary to load.</param>
            <param name="asReadOnly">Specifies whether or not the library should be loaded in read only mode.</param>
            <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.</returns>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.LoadAsync(System.String,System.Boolean)">
            <summary>
            Creates and initializes a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> from a file.
            </summary>
            <param name="fileName">The filename of the libarary to load.</param>
            <param name="asReadOnly">Specifies whether or not the library should be loaded in read only mode.</param>
            <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" />.</returns>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.SaveAs(System.String)">
            <summary>
            Saves a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary" /> to a file.
            </summary>
            <param name="fileName">The filename of the libarary to save.</param>
            <example>GraphicComponentLibrary Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="GraphicComponentGroup Properties Example" lang="cs" title="GraphicComponentGroup Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.GraphicComponentLibrary.CloseUnused">
            <summary>
            Close all unused libraries, e.g. that have no references from the outside world.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStream">
            <summary>
            Provides access to the Information Stream of the Virtual Controller. Currently only I/O signals are supported.
            The Information Stream is synchronized with Virtual Time, so you can use it together with the <see cref="T:ABB.Robotics.RobotStudio.Stations.Simulator" /> object in order to react on signal value changes during a simulation.
            Each change event is stamped with the virtual time when it occured.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.InformationStream.EventsAvailable">
            <summary>
            Occurs when events from the previous virtual time step are available.
            </summary>        
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStream.SubscribeIOSignals(System.Guid,System.String[])">
            <summary>
            Sets up a subscription to the specified signals.
            </summary>
            <param name="subscriptionId">Id that should be unique for each caller that wants to maintain their set of subscriptions. All previous subscriptions with the same Id will be removed, before subscribing to the ones specified.</param>
            <param name="signalNames">Signal names.</param>
            <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult" /> that gives subscription status for each signal.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStream.SubscribeIOSignal(System.Guid,System.String)">
            <summary>
            Sets up a subscription to the specified signal.
            </summary>
            <param name="subscriptionId">Id that should be unique for each caller that wants to maintain their set of subscriptions. All previous subscriptions with the same Id will be removed, before subscribing to the one specified.</param>
            <param name="signalName">Signal names.</param>
            <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult" /> that gives subscription status the signal.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStream.UnsubscribeIOSignals(System.Guid)">
            <summary>
            Removes the subscription to all signals, for this client.
            </summary>
            <param name="subscriptionId">Id that should be unique for each caller that wants to maintain their set of subscriptions. All previous subscriptions with the same Id will be removed, before subscribing to the one specified.</param>
            <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult" /> that gives subscription status the signal.
            </returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStreamEvent">
            <summary>
            The base class for all events that can be recieved from the <see cref="T:ABB.Robotics.RobotStudio.Stations.InformationStream" />.
            It contains a time stamp that is synchronized with virtual time.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.InformationStreamEvent.Timestamp">
            <summary>
            Gets the time stamp which denotes the the time when the event occured in the virtual controller.
            </summary>				
            <value>A <see cref="T:System.Double"/> representing the the time when the event occured in the virtual controller. The time is expressed in seconds. The virtual time clock only ticks when the virtual controller executes virtual time, and the clock is reset when the virtual controller is X-started.</value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStreamEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Stations.InformationStream.EventsAvailable" /> event.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStreamEventArgs.GetEvents">
            <summary>
            Gets the array of events that occured during the virtual time step.<see cref="E:ABB.Robotics.RobotStudio.Stations.InformationStream.EventsAvailable" /> event.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult">
            <summary>
            Represents the result of a subscription, to one or many channels.
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult.GetChannelNames">
            <summary>
            Gets the names of the channels to which a subscription attempt was made.
            </summary>
            <remarks>
            The <see cref="M:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult.GetChannelStatus" /> method contains the status for each channel name.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult.GetChannelStatus">
            <summary>
            Gets the resulting status of the subscription to each channel.
            </summary>
            <remarks>
            The <see cref="M:ABB.Robotics.RobotStudio.Stations.InformationStreamSubscriptionResult.GetChannelNames" /> method contains the name related to each status item in this array.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IOConnection">
            <summary>
            Represents a connection from from a source <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal">signal</see> to a
            target signal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnection.#ctor(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.ProjectObject,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the IOConnection class.
            </summary>
            <param name="sourceObject">The object that contains the source signal.
            <remarks> The object should be either a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals"/> or an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.</remarks>
            </param>
            <param name="sourceSignal">The name of the source signal.</param>
            <param name="targetObject">The object that contains the target signal.
            <remarks> The object should be either a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals"/> or an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.</remarks>
            </param>
            <param name="targetSignal">The name of the target signal.</param>
            <param name="allowCycle">Specifies if the target signal is allowed to be set more than once in
            the same execution context.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnection.#ctor(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.ProjectObject,System.String)">
            <summary>
            Creates a new instance of the IOConnection class.
            </summary>
            <param name="sourceObject">The object that contains the source signal.
            <remarks> The object should be either a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals"/> or an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.</remarks>
            </param>
            <param name="sourceSignal">The name of the source signal.</param>
            <param name="targetObject">The object that contains the target signal.
            <remarks> The object should be either a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasIOSignals"/> or an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.</remarks>
            </param>
            <param name="targetSignal">The name of the target signal.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnection.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.SourceObject">
            <summary>
            Returns the object on which the source <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal"/> can be found
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.SourceSignal">
            <summary>
            Returns the name of the signal that acts as the connection source
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.TargetObject">
            <summary>
            Returns the object on which target <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal"/> can be found
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.TargetSignal">
            <summary>
            Returns the name of the signal that acts as the connection target
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.AllowCycle">
            <summary>
            Returns a value indicating if the target signal is allowed to be set more than once in the same context.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.SourceObjectName">
            <summary>
            Returns the name of the source object. Typically used for debugging if the object has been removed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnection.TargetObjectName">
            <summary>
            Returns the name of the target object. Typically used for debugging if the object has been removed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnection.Update">
            <summary>
            Updates the target signal with the value of the source signal.
            </summary>
            <remarks>
            There is normally no need to call this method since the connection is updated
            automatically whenever the source signal changes.
            </remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Item(System.Int32)">
            <summary>
            Get the <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection"/> at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Changed">
            <summary>
            Raised when an item is added to or removed from the collection
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Add(ABB.Robotics.RobotStudio.Stations.IOConnection)">
            <summary>
            Adds an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection"/> to the collection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Insert(System.Int32,ABB.Robotics.RobotStudio.Stations.IOConnection)">
            <summary>
            Adds an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection"/> to the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="connection"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Remove(ABB.Robotics.RobotStudio.Stations.IOConnection)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.Contains(ABB.Robotics.RobotStudio.Stations.IOConnection)">
            <summary>
            Returns true if the <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection"/> exists in the collection.
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection.IndexOf(ABB.Robotics.RobotStudio.Stations.IOConnection)">
            <summary>
            Returns the index of an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection"/> in the collection.
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignal">
            <summary>
            Represents an I/O signal in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Station" /> or in a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.IsValidName(System.String)">
            <summary>
            Checks if a string is a valid name for an I/O signal.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.#ctor(System.String,ABB.Robotics.RobotStudio.Stations.IOSignalType)">
            <summary>
            Creates a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal"/> class.
            </summary>
            <param name="name">Name of the signal</param>
            <param name="type">Type of the signal</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.GetValueType">
            <summary>
            Returns the <see cref="T:System.Type" /> of the Value property for this signal.
            </summary>
            <returns>The <see cref="T:System.Type" /> of the Value property.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.GetValueType(ABB.Robotics.RobotStudio.Stations.IOSignalType)">
            <summary>
            Returns the <see cref="T:System.Type" /> of the Value property depending in the signal type.
            </summary>
            <param name="signalType">Type of signal</param>
            <returns>The <see cref="T:System.Type" /> of the Value property </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.GetConnections">
            <summary>
            Returns an array of I/O connections from this signal to other signals.
            </summary>
            <returns>
            An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnection" /> containing the connections.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.ValidateValue(System.Object)">
            <summary>
            Check if its possible to set the specified value on this signal, given the signal type and restrictions.
            </summary>
            <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo" /> that specifies the result of the validation.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.TrySetValue(System.Object)">
            <summary>
            Try to set the specified value on the signal. A value validation is performed. The value is set only if it is valid.
            </summary>
            <returns>
            A <see cref="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo" /> that specifies the result of the validation.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignal.Pulse">
            <summary> Sets the value of a digital signal to 1 and back to 0. </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalChangeEvent">
            <summary>
            Represents information about a I/O signal value change.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalChangeEvent.Name">
            <summary>
            Gets the name of the changed I/O signal.
            </summary>	
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalChangeEvent.Value">
            <summary>
            Gets the value of the changed I/O signal.
            </summary>	
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.IOSignalCollection">
            <summary>
            Represents a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal">IOSignals</see> attached to a
            <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" /></summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Item(System.String)">
            <summary>
            Gets the item with the specified name.
            </summary>
            <param name="name">The name of the item to get.</param>
            <exception cref="T:System.ArgumentException">
            The name value is not in the collection.</exception>
            <value>The item with the specified name.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index value is greater than the number of items in the collection.</exception>
            <value>The item at the specified index.</value>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Changed">
            <summary>
            Raised when an item is added to or removed from the collection
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Add(ABB.Robotics.RobotStudio.Stations.IOSignal)">
            <summary>
            Adds an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" /> to this IOSignalCollection object.
            </summary>
            <param name="signal">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" /> to be added.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Remove(System.String)">
            <summary>
            Removes an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal" /> from this IOSignalCollection object.
            </summary>
            <param name="name">The name of the IOSignal to be removed.</param>
            <exception cref="T:System.ArgumentException">
            An IOSignal with the specified name has not been added to the collection.
            </exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.Contains(System.String)">
            <summary>
            Determines if the <b>IOSignalCollection</b> contains a specific name.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.IOSignalCollection.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over the keys in the <b>IOSignalCollection</b>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> for the IOSignalCollection.
            </returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey">
            <summary>
            Contains attribute keys for use in the DynamicProperty.Attributes collection.
            Attributes with these keys are used for value validation and user interface hints.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.MinValue">
            <summary> Indicates the minium value for a numeric property. Value must be a number. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.MaxValue">
            <summary> Indicates the maximum value for a numeric property. Value must be a number. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AllowedValues">
            <summary> Indicates the allowed values for a numeric or string property. Value must be a list delimited by semicolons. </summary>
            <remarks> Properties with this attribute set will be displayed as a dropdown. </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.MinLength">
            <summary> Indicates the minimum length of a string property. Value must be an integer. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.MaxLength">
            <summary> Indicates the maximum length of a string property. Value must be an integer. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AllowedCharacters">
            <summary> Indicates the allowed characters in a string property. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.CustomValidation">
            <summary> Indicates that QueryPropertyValueValid() should be called to validate the value. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AllowedTypes">
            <summary> Indicates additional restrictions on the allowed type. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AllowParent">
            <summary> Indicates that the component that owns the property is a valid value (by default it is not). </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.ValueFilter">
            <summary> Specifies a regular expression used to verify the property value (converted to a string). </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.Quantity">
            <summary> Indicates the quantity that a numeric property represents. </summary>
            <remarks> Value must be a member of the <see cref="T:ABB.Robotics.RobotStudio.BuiltinQuantity"/> enumeration. </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AutoApply">
            <summary> Indicates that the property value should be applied immediately when it is changed
            in the GUI, rather than when the user clicks "Apply" or equivalent. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.Slider">
            <summary> Indicates that a numeric property should be displayed as a slider. </summary>
            <remarks> Requires that MinValue and MaxValue are also set. </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.AddToDisplayName">
            <summary> Indicates that the value of the property should be added to the
            DisplayName of the parent component. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.DisplayValues">
            <summary> Indicates alternative display values for a property. Value must be a list delimited by
            semicolons with the same number of elements as the AllowedValues attribute. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.VectorUsage">
            <summary> Indicates the usage of a Vector3 property. Valid values are Position and Direction. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.Reference">
            <summary>
            Indicates the reference coordinate system of a Vector3 or Matrix4 property. Valid values are Global and Local.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.KnownAttributeKey.Multiline">
            <summary> Indicates that a string property can have multiple lines. </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Loop">
            <summary>A Loop is a set of connected coedges. Normally it has no start or end points.<br /><img src="GeometryTopology.jpg" /></summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Loop.Coedges">
            <summary>
            Returns a <see cref="T:ABB.Robotics.RobotStudio.Stations.CoedgeCollection"/> object containing the coedges
            of the wire.
            </summary>
            <value>The <see cref="T:ABB.Robotics.RobotStudio.Stations.CoedgeCollection"/> object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Loop.Body">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Loop.Body"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Loop"/> belongs to.
            </summary>
            <value>The <see cref="P:ABB.Robotics.RobotStudio.Stations.Loop.Body"/> object.</value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Loop.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="!:T:ABB.Robotics.RobotStudio.Stations.Loop" /> that is closest to the provided point.</summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.LoopCollection">
            <summary>A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Loop" /> objects.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Material">
            <summary>
            Specifies the appearance of a surface in the 3D graphics.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.Material.Empty">
            <summary>
            An empty material.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Material.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> with the given color parameters
            </summary>
            <param name="ambient">Ambient color component. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Ambient"/>.</param>
            <param name="diffuse">Diffuse color component. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Diffuse"/>.</param>
            <param name="specular">Specular color component. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Specular"/>.</param>
            <param name="emissive">Emissive color component. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Emissive"/>.</param>
            <param name="shininess">Sets the shininess value. See <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.Shininess"/>.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Material.#ctor(ABB.Robotics.RobotStudio.Stations.Texture)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> with the given texture. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Material.#ctor(System.Drawing.Color)">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> with the given color.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Material.#ctor">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> with a default (gray) color.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Material.Clone">
            <summary>
            Creates a copy of this <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Ambient">
            <summary>
            Gets or sets the ambient color component. The ambient color is applied uniformly to an 
            object regardless of light and view direction.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Diffuse">
            <summary>
            Gets or sets the diffuse color component. The diffuse color represents the light reflected from a 
            matte surface.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Specular">
            <summary>
            Gets or sets the specular color component. The specular color represents the shiny effect resulting
            from a reflective surface.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Emissive">
            <summary>
            Gets or sets the emissive color component. It behaves similar to the ambient color, except it is independent
            of the color of the light source.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Shininess">
            <summary>
            Gets or sets the coefficent for specular lighting. It affects the tightness of the specular highlight.
            The value has to be between 0 and 128. The default value is 30.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.BaseTexture">
            <summary>
            Gets or sets the base color texture. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.TextureSize">
            <summary>
            Gets or sets a desired width and height, in meters, of the base texture and normal map when applied to a surface.
            </summary>
            <remarks>
            If TextureSize is nonzero, the texture coordinates of the surface will be modified when this
            Material is applied.
            TBD: Limitations
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.TextureLuminosity">
            <summary>
            Gets or sets the luminosity of the base texture, which defines how
            the texture is lighted.
            </summary>
            <remarks>
            A value of 0 (default) means that the texture brightness is defined only by the
            diffuse lighting of the surface, while 1 means the texture is entirely luminous.
            If <see cref="P:ABB.Robotics.RobotStudio.Stations.Material.BlendMode"/> is Modulate, this property is ignored.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.Blend">
            <summary>
            Gets or sets whether the result of the color properties (ambient, diffuse, specular, emissive, shininess) should be blended
            with the texture-based effects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.BlendMode">
            <summary>
            Gets or sets how the result of the color properties (ambient, diffuse, specular, emissive, shininess) should be blended
            with the texture-based effects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.EnvironmentMap">
            <summary>
            Gets or sets the environment map texture. The environment map is used to simulate a reflective surface. 
            The texture in the environment map will be reflected by the surface it is applied to.
            </summary>
            <remarks>
            Both sphere and cube map textures are supported.
            Requires advanced lighting.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.NormalMap">
            <summary>
            Gets or sets the normal map texture. The normal map contains perturbations of the surface normal encoded as RGB values.
            It is used by the various bump mapping effects.
            </summary>
            <remarks>
            Requires advanced lighting.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.TextureMatrix">
            <summary>
            Specifies and offset and rotation for the textures
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Material.IsEmpty">
            <summary>
            Returns true if this material is empty.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Material.GetSimpleColor">
            <summary>
            Gets the basic color from the material.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Material.SetSimpleColor(System.Drawing.Color)">
            <summary>
            Sets the basic color and automatically calculate material properties like specular color, diffuse color etc.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Mechanism">
            <summary>
            A mechanism is a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> that a number of joints controlling
            the movement of a number of links. A robot is the archetypal mechanism in RobotStudio,
            but it is not the only kind.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumActiveJoints">
            <summary>
            Gets the number of active joints, i.e. joints that are not dependant on other joints.
            This equals the number of values in the array when getting or setting joint values.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumTotalJoints">
            <summary>
            Gets the total number of joints in the mechanism, including dependant joints.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.GraphicComponents">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection"/> that contains all the links of the mechanism.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.AdditionalComponents">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection"/> that contains child components that are not mechanism links.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.MechanismType">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.Task">
            <summary>
            Gets the associated <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.ModelName">
            <summary>
            Gets the name of the model.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.Mass">
            <summary>
            The mass of the mechanism. Used when the mechanism is used as a tool.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.TraceTCP">
            <summary>
            Enables or disables a graphical trace of the active TCP during simulation.
            </summary>
            <remarks>
            Only valid for TCP robots.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.TraceColor">
            <summary>
            Gets or sets the color used to trace the TCP during simulation.
            </summary>
            <remarks>
            This value is not persisted.
            If null, the color specified by the user in the TCP Trace dialog is used.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.UsesCfx">
            <summary>
            Returns true if the Cfx parameter is used by this robot model, otherwise false.
            The performance of GetAllConfigurations is better for robots that does not use Cfx since the number of possible configurations are smaller.
            </summary>
            <value>True if Cfx is used, otherwise false.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.MultiAxisRobot">
            <summary>
            Returns true if this is a multi axis robot (more than six active joints)
            </summary>
            <value>True if multi axis robot.</value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CreateFromScriptAsync(System.String)">
            <summary>
            This method is for internal use only.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.AttachToFlange(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
            <summary>
            Attaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to the first flange of the Mechanism.
            </summary>
            <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to attach to the link of this flange.</param>
            <param name="mount">Specifies if the position of the child shall be affected by the attachment or not. 
            See <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details.</param>
            <param name="offset">Specifies the offset from the parent to the child.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.AttachToFlange(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean)">
            <summary>
            Attaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to the flange of the Mechanism.
            The Mechansim must have exactly one flange.
            </summary>
            <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to attach to the link of this flange.</param>
            <param name="mount">Specifies if the position of the child shall be affected by the attachment or not. 
            See <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetFlange(System.Int32)">
            <summary>
            Get a <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/> to which other entities can be attached.
            </summary>
            <param name="index">The index of the flange to be retrieved.</param>
            <returns>A <see cref="T:ABB.Robotics.RobotStudio.Stations.Flange"/></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mechanism.ModelBaseFrame">
            <summary>
            Returns the nominal base frame of this model
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetHomePosition">
            <summary>
            Returns the defined home position in form of a collection of values. The
            number of values vary depending on the number of joints in the mechanism.
            </summary>
            <returns>
            An array of home position for each joint.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetSyncPosition">
            <summary>
            Returns the defined sync position in form of a collection of values. The
            number of values are 0-6 depending on the number of joints used for
            corresponding mechanism.
            </summary>
            <returns>An array of sync position for each joint.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetSyncPosition(System.Double[])">
            <summary>
            Sets the defined sync position in form of a collection of values. The
            number of values are 0-6 depending on the number of joints used for
            corresponding mechanism.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetToolDataInfo">
            <summary>
            Returns the tool datas for a mechanism that is a tool.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointValues">
            <summary>
            Returns the current joint values.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValues(System.Double[],System.Boolean)">
            <summary>
            Sets the mechanism joint values and updates joint values in the VC.
            </summary>
            <returns>True if the joint values are valid.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValuesAsync(System.Double[],System.Boolean)">
            <summary>
            Sets the mechanism joint values and asynchronously updates joint values in the VC.
            </summary>
            <returns>True if the joint values are valid.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValues(System.Double[],System.Boolean,System.Boolean)">
            <summary>
            ABB Internal use
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValues(System.Double[],System.Boolean,System.Collections.Generic.List{System.Threading.Tasks.Task})">
            <summary>
            Returns the commit task rather than waiting for it. Used to speed up view robot at target (WI15220)
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValues(System.Double[],System.Boolean,System.Double)">
            <summary>
            ABB Internal use
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointValuesInternal(System.Double[],System.Double,System.Boolean)">
            <summary>
            ABB Internal use
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetDenavitHartenbergParameters">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters"/> for all joints.
            </summary>
            <remarks>
            Denavit and Hartenberg parameters are only available for serial manipulators. The 
            FlexPicker is an example of a cloosed loop manipulator for which the kinematics 
            cannot be described using Denavit and Hartenberg parameters.
            </remarks>
            <returns>An array with all <see cref="T:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters"/> or null when none are available.</returns>
            <seealso cref="T:ABB.Robotics.RobotStudio.Stations.DenavitHartenbergParameters"/>
            <see cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointValues"/>
            <see cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateForwardKinematics"/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointLimits(System.Double[],System.Double[]@,System.Double[]@)">
            <summary>
            Get joint limits given a set of joint values.
            </summary>
            <param name="jointValues">Joint values to use when evaluating limits. Must have length equal to <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumActiveJoints"/></param>
            <param name="minLimits">Out parameter giving the minimum limits.</param>
            <param name="maxLimits">Out parameter giving the maximum limits.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointLimits(System.Double[]@,System.Double[]@)">
            <summary>
            Get joint limits.
            </summary>
            <param name="minLimits">Out parameter giving the minimum limits.</param>
            <param name="maxLimits">Out parameter giving the maximum limits.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetStaticJointLimits(System.Double[]@,System.Double[]@)">
            <summary>
            Get static joint limits.
            </summary>
            <param name="minLimits">Out parameter giving the minimum limits.</param>
            <param name="maxLimits">Out parameter giving the maximum limits.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.InsideLimits(System.Double[])">
            <summary>
            Evaluates if a set of joint values are inside the joint limits.
            </summary>
            <param name="jointValues">Joint values, must have length equal to <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumActiveJoints"/></param>
            <returns>Returns true if inside joint limits.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointTypes">
            <summary>
            Get an array containing the type for each contained joint. For a mechanism with <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.MechDef"/> equal to null
            or without forward kinematics an empty array is returned.
            </summary>
            <returns>An array with length 0 or an array with length equal to <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumActiveJoints"/></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetActiveJoints">
            <summary>
            This method returns the indices of the joints used by this mechanism, as an array of <see cref="T:System.Int32">integers</see>.
            The length of the array depends on how many joints are used. Some mechnism models have less than six axis.
            The indices can be used together with the result from <see cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointValues" />
            </summary>
            <returns>
            An array containing the indices of each joint that is used by this mechanism.
            </returns><seealso cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointValues" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetActiveJoints(System.Int32[])">
            <summary>
            This method sets the indices of the joints used by this mechanism, as an array of <see cref="T:System.Int32">integers</see>.
            The length of the array depends on how many joints are used. Some mechanism models has less than six axis.
            </summary>
            <param name="jointMask">The indices of the joints used by this mechanism.</param>
            <seealso cref="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetJointMask(System.Int32[])" />
            <seealso cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetActiveJoints" />
            <seealso cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointValues" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateForwardKinematics(System.Double[],ABB.Robotics.RobotStudio.Stations.ForwardKinematicsResult@)">
            <summary>
            Calculates forward kinematics for the mechanism. Given the specified mechanism joint values, the resulting TCP (tool0) transform is returned.
            </summary>
            <param name="jointValues">Array of mechanism joint values, for which to calculate forward kinematics.</param>
            <param name="insideLimits">Out parameter that specifies if the forward kinematics calculation failed or succeded.</param>
            <returns>The transform of the TCP (tool0) if the mechanism were positioned according to the specified joint values.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematics(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean,System.Double[]@)">
            <summary>
            Calculates inverse kinematics for the mechanism. Given the specified 
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> and 
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" />, this method returns 
            the joint values the mechanism would have if it was moved to the pose.
            A mechanism can often reach the specified pose with different arm configurations. 
            Using the <b>useConfiguration</b> you force the arm configuration stored in the 
            <b>RsTarget</b> to be used.
            </summary>
            <param name="target">The target position. This is the position that shall coincide 
            with the tool.</param>
            <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b>
            property is used to determince if the tool is stationary or held by the robot.</param>
            <param name="useConfiguration">Specifies if the exact arm configuration stored in the 
            target shall be used for the calculation. If set to true, the arm configuration is used.
            In this case this method returns true only if the mechanism can move to the specified 
            target with its specified arm configuration. If the parameter is set to false, the arm 
            configuration that is closes to the current mechanism joint values is returned, if the 
            target is reachable.</param>
            <param name="resultJointVector">Out parameter that contains the joint values, the 
            mechanism would have if it was moved to the target position. If this method returns 
            false, the joint values are undefined.</param>
            <returns> True, if the mechanism can move to the target position, otherwise false.</returns>
            <remarks>When using this overload the target position shall not be converted to to 
            mechanism base frame coordinates.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematics(ABB.Robotics.RobotStudio.Stations.RsRobTarget,ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Int32[],System.Double[]@)">
            <summary>
            Calculates inverse kinematics for the mechanism given a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget"/>, 
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> and <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/>.
            </summary>
            <param name="robTarget"></param>
            <param name="workObject"></param>
            <param name="tool"></param>
            <param name="cfg"></param>
            <param name="resultJointVector">Out parameter that contains the joint values, the mechanism 
            would have if it was moved to the target position. If this method returns false, the joint 
            values are undefined.</param>
            <returns>True, if the mechanism can move to the target position, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematicsAsync(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean)">
            <summary>
            Calculates inverse kinematics for the mechanism. Given the specified 
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> and 
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" />, this method returns the 
            joint values the mechanism would have if it was moved to the pose. A mechanism can 
            often reach the specified pose with different arm configurations. Using the 
            <b>useConfiguration</b> you force the arm configuration stored in the <b>RsTarget</b> to be used.
            </summary>
            <param name="target">The target position. This is the position that shall coincide with the tool.</param>
            <param name="tool">The tool that should coincide with the target. 
            The <b>RobotHold</b> property is used to determince if the tool is stationary or held by the robot.</param>
            <param name="useConfiguration">Specifies if the exact arm configuration stored in the 
            target shall be used for the calculation. If set to true, the arm configuration is used.
            In this case this method returns true only if the mechanism can move to the specified 
            target with its specified arm configuration. If the parameter is set to false, the 
            arm configuration that is closes to the current mechanism joint values is returned, 
            if the target is reachable.</param>
            <returns>Joint values if the mechanism can move to the target position, otherwise null.</returns>
            <remarks>When using this overload the target position shall not be converted to to 
            mechanism base frame coordinates.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematicsAsync(ABB.Robotics.RobotStudio.Stations.RsRobTarget,ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Int32[])">
            <summary>
            Calculates inverse kinematics for the mechanism given a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget"/>, 
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> and <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/>.
            </summary>
            <param name="robTarget"></param>
            <param name="workObject"></param>
            <param name="tool"></param>
            <param name="cfg"></param>
            <returns>Joint values if the mechanism can move to the target position, otherwise null.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematics(ABB.Robotics.Math.Matrix4,System.Double[],System.Double[],ABB.Robotics.Math.Matrix4,System.Boolean,System.Double[]@)">
            <summary>
            Calculate inverse kinematics given a pose and a starting set of joint values.
            </summary>
            <param name="pose"></param>
            <param name="referenceJointValues"></param>
            <param name="integratedUnitsJointValues"></param>
            <param name="toolMat"></param>
            <param name="fixedObject"></param>
            <param name="resultJointVector">Out parameter containing the result.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematicsAsync(ABB.Robotics.Math.Matrix4,System.Double[],System.Double[],ABB.Robotics.Math.Matrix4,System.Boolean)">
            <summary>
            Calculate inverse kinematics given a pose and a starting set of joint values.
            </summary>
            <param name="pose"></param>
            <param name="referenceJointValues"></param>
            <param name="integratedUnitsJointValues"></param>
            <param name="toolMat"></param>
            <param name="fixedObject"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CalculateInverseKinematicsAsync(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Matrix4,System.Boolean)">
            <summary>
            Calculate inverse kinematics from a pose.
            </summary>
            <param name="pose"></param>
            <param name="toolMat"></param>
            <param name="fixedObject"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CanReachAsync(ABB.Robotics.RobotStudio.Stations.RsRobTarget,ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsToolData)">
            <summary>
            Checks if the specified target position can be reached with the specified tool.
            A mechanism can often reach the specified target with different arm configurations. 
            This method returns true as long as there is at least one arm configuration with 
            which the robot can reach the target.
            </summary>
            <param name="robTarget">The target position. This is the position that shall coincide with the tool.</param>
            <param name="workObject">The workobject to use.</param>
            <param name="tool">The tool that should coincide with the target. The 
            <b>RobotHold</b> property is used to determine if the tool is stationary or held by the robot.</param>
            <returns> True, if the mechanism can move to the target position, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.CanReachAsync(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Matrix4)">
            <summary>
            Checks if the specified target position can be reached with the specified tool.
            A mechanism can often reach the specified target with different arm configurations. 
            This method returns true as long as there is at least one arm configuration with 
            which the robot can reach the target.
            </summary>
            <param name="pose">The target position. This is the position that shall coincide with the tool.</param>
            <param name="toolMat">The tool frame that should coincide with the target.</param>
            <returns> True, if the mechanism can move to the target position, otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurationsAsync(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Int32[],System.Boolean)">
            <summary>
            Returns reachable arm configurations for the specified target.
            </summary>
            <param name="target">The target for which to find reachable configurations.</param>
            <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b>
            property is used to determince if the tool is stationary or held by the robot.</param>				
            <param name="cfxFilter">An array of integers which specifies Cfx values to be included
            in the resulting array. This parameter is only applicable for a bending bacwards robot.
            Cfx values which are not specified in the filter will not be considered, which will 
            improve performance. Often you know that you are only interested in configurations where,
            for example, the wrist is in front of axis 1. , for<b>RobotHold</b> property is used to
            determince if the tool is stationary or held by the robot.</param>				
            <param name="includeTurns">Only the base configurations will be returned if this
            parameter is set to false. If true, the turns of the base configurations will be added.</param>				
            <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData"/> with which the mechanism can reach 
            the specified target.</returns>		
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurations(ABB.Robotics.RobotStudio.Stations.RsMoveInstruction)">
            <summary>
            Returns reachable arm configurations for the specified move instruction.
            </summary>
            <param name="moveInstruction">The move instruction for which to find reachable 
            configurations. The target, tool and workobject specified in the instruction 
            is used.</param>				
            <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData"/> with which the mechanism 
            can reach the specified target.</returns>		
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurationsAsync(System.Boolean)">
            <summary>
            Returns reachable arm configurations for the current pose.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurationsAsync(ABB.Robotics.RobotStudio.Stations.RsMoveInstruction,System.Boolean)">
            <summary>
            Returns reachable arm configurations for the specified move instruction.
            </summary>
            <param name="moveInstruction">The move instruction for which to find reachable 
            configurations. The target, tool and workobject specified in the instruction 
            is used.</param>				
            <param name="includeTurns">Only the base configurations will be returned if 
            this parameter is set to false. If true, the turns of the base configurations will be added.</param>				
            <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData"/> with which the mechanism 
            can reach the specified target.</returns>		
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurations(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData)">
            <summary>
            Returns reachable arm configurations for the specified target.
            </summary>
            <param name="target">The target for which to find reachable configurations.</param>
            <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b>
            property is used to determince if the tool is stationary or held by the robot.</param>				
            <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData"/> with which the mechanism can reach the specified target.</returns>		
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetAllConfigurationsAsync(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean)">
            <summary>
            Returns reachable arm configurations for the specified target.
            </summary>
            <param name="target">The target for which to find reachable arm configurations.</param>
            <param name="tool">The tool that should coincide with the target. The <b>RobotHold</b>
            property is used to determince if the tool is stationary or held by the robot.</param>				
            <param name="includeTurns">Only the base configurations will be returned if this parameter 
            is set to false. If true, the turns of the base configurations will be added.</param>				
            <returns>An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.ConfigurationData"/> with which the mechanism can reach 
            the specified target.</returns>		
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetConfiguration">
            <summary>
            Returns the current configuration.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetConfiguration(System.Double[])">
            <summary>
            Returns the configuration that corresponds to the given joint values.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.ClearTrace">
            <summary>
            Removes the graphical trace of the TCP.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetUserDefinedJointPositions">
            <summary>
            Get user defined joint positions.
            </summary>
            <returns>A dictionary containing user defined joint positions.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetUserDefinedJointPositions(System.Collections.Generic.Dictionary{System.String,System.Double[]})">
            <summary>
            Sets user defined joint positions.
            </summary>
            <param name="value">A dictionary containing user defined joint positions. Each array should
            have the same length as <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumActiveJoints"/> </param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetTransitionTimes">
            <summary>
            Gets transition times.
            </summary>
            <returns>A dictionary mapping pairs of position names to transition times.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetTransitionTimes(System.Collections.Generic.Dictionary{System.String[],System.Double})">
            <summary>
            Sets transition times.
            </summary>
            <param name="value">A dictionary mapping pairs of position names to transition times.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.MoveToPose(System.String)">
            <summary>
            Moves the mechanism to a named pose.
            </summary>
            <param name="jointPosition">The name of the pose.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.SetJointLimits(System.Int32,System.Double,System.Double)">
            <summary>
            Sets the joint limits for a joint.
            </summary>
            <param name="jointIndex">The index of the joint.</param>
            <param name="minLimit">The minimum limit.</param>
            <param name="maxLimit">The maximum limit.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetParentJoint(ABB.Robotics.RobotStudio.Stations.GraphicComponent,System.Int32@)">
            <summary>
            Returns the joint index of a link, or -1.
            </summary>
            <param name="link">The link.</param>
            /// <param name="jointIndex">Zero-based joint index.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetParentLink(System.Int32,ABB.Robotics.RobotStudio.Stations.GraphicComponent@)">
            <summary>
            Returns the parent link of a joint.
            </summary>
            <param name="jointIndex">Zero-based joint index. Must be less than <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumTotalJoints"/></param>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointTransform(System.Int32)">
            <summary>
            Get the transform for a joint using the current joint values
            <param name="jointIndex">The index of the joint for which the transform shall be retrieved. 
            Must be a value between 0 and <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumTotalJoints"/>.</param>
            <returns>Returns the transform of the specified joint, in <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism"/> coordinates.</returns>
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointTransform(System.Int32,System.Double[],ABB.Robotics.Math.Matrix4@)">
            <summary>
            Get the transform for a joint using specified joint values
            <param name="jointIndex">The index of the joint for which the transform shall be retrieved. Must be a value between 0 and <see cref="P:ABB.Robotics.RobotStudio.Stations.Mechanism.NumTotalJoints"/> - 1.</param>
            <param name="jointValues"></param>
            <param name="jointTransform">Returns the transform of the specified joint, in <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism"/> coordinates.</param>
            <returns>True on success</returns>
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetCalibrationPosition(System.Int32)">
            <summary>
            Returns the calibration transform for a joint.
            </summary>
            <param name="jointIndex"></param>
            <returns>Calibration transform (relative to model zero position)</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MechanismBuilder">
            <example>Build a mechanism.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Build the model of the IRB140" lang="cs" title="Build the model of the IRB140" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.BaseLink">
            <summary>
            Gets or sets the base link. This is where the "calculation chain" starts.
            </summary>
            <remarks>
            Link must be added with AddLink before setting it as base link.
            </remarks>
            <value> Name of the base link.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.Name">
            <summary>
            Gets or sets the name of mechanism.
            </summary>
            <value>Name of mechanism.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.ModelName">
            <summary>
            Gets or sets the model name.
            </summary>
            <value>Name of model.</value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.AddLink(System.String,ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Adds a link to be a member of the mechanism.
            </summary>
            <param name="linkName">A name to identify the link.</param>
            <param name="linkPart">A component which will become a link.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetJointLimit(System.String,System.Double,System.Double,RobotStudio.API.Internal.PolynomialLimit)">
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetSyncJointPosition(System.Double[])">
            <summary>
            Sets the defined sync position in form of a collection of values. The
            number of values are 0-6 depending on the number of joints used for the
            mechanism beeing built.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetJointMask(System.Int32[])">
            <summary>
            This method sets a mask that defines which joints that are used for mechanism being built. The mask is specified as an array of <see cref="T:System.int">integers</see>.
            The length of the array must be between 6 and 12. Each element specifies if the corresponding axis is used or not. The value 0 means not used and the value 1 means used.
            For example the array {1,1,1,1,0,1} means that all axis except axis 5 are used.
            </summary>
            <param name="maskValues">An array of <see cref="T:System.int">integers</see> with mask values that specifies if a joint with the same number as the position in the array is used or not.</param><seealso cref="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetJointMask(System.int[])" /><seealso cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetActiveJoints" /><seealso cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetJointValues" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetDependency(System.String,System.String)">
            <summary>
            Sets an expression to calculate a joints value that depend on other joint values.
            </summary>
            <param name="jointName"> A name to identify the joint.</param>
            <param name="expression">A string containig an expression.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.CompileMechanism">
            <summary>
            When all data, Links, Joints etc. are set to the modeler call CompileMechanism.
            </summary>
            <returns>The mechanism instance.</returns>
            <example>Build a mechanism.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Build the model of the IRB140" lang="cs" title="Build the model of the IRB140" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetAttachmentPoints(ABB.Robotics.Math.Matrix4[])">
            <summary>
            Sets an array of matrices that will become the frames used for attaching parts and workobjects on a conveyor tracking mecahnism.
            </summary>
            <param name="attachmentPoints">An array of <see cref="T:ABB.Robotics.Math.Matrix4" /> representing the positions of the attachment points of the conveyor mechanism.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MechanismBuilder.SetCustomKinematics(System.String,System.Double[])">
            <summary>
            ABB Internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Mesh">
            <summary>
            A collection of MeshParts representing different detail levels of a Part.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.#ctor">
            <summary>
            Creates an empty <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.#ctor(RobotStudio.API.Internal.IGfxGeoShape)">
            <summary>
            ABB internal use
            </summary>
            <param name="shape"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mesh.Shape">
            <summary>
            ABB internal use
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Mesh.Item(ABB.Robotics.RobotStudio.Stations.DetailLevels)">
            <summary>
            Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/> for the specified detail level, if it exists.
            </summary>
            <param name="detailLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Closest(ABB.Robotics.RobotStudio.Stations.DetailLevels)">
            <summary>
            Returns the available detail level, which is as close as possible to the one specified.
            </summary>
            <param name="detailLevel"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Rebuild">
            <summary>
            Rebuilds the mesh.
            </summary>
            <remarks>
            Call Rebuild() after modifying or building a mesh to update the internal
            data structures used by the graphics subsystem.
            Rebuild() automatically calls Clear() to unreference cached vertex data.
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the structure of the mesh is not valid.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Rebuild(ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Rebuilds the mesh.
            </summary>
            <remarks>
            Call Rebuild() after modifying or building a mesh to update the internal
            data structures used by the graphics subsystem.
            Rebuild() automatically calls Clear() to unreference cached vertex data.
            Note that the order of faces within each body may be different after a call to this method.
            </remarks>
            <exception cref="T:System.ApplicationException">Thrown if the structure of the mesh is not valid.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Clear">
            <summary>
            Clears managed vertex data cached by this Mesh.
            </summary>
            <remarks>
            Does not delete the internal data structures used by the graphics subsystem.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Clear(System.Boolean)">
            <summary>
            Clears managed vertex data cached by this Mesh, and optionally discards all <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>, <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/> and <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> objects.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.GetInfo">
            <summary>
            Returns the size and memory usage of this Mesh.
            </summary>
            <remarks>
            If the mesh has been modified, Rebuild() should be called before GetInfo().
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Transform(ABB.Robotics.Math.Matrix4)">
            <summary>
            Transforms all vertices and normals in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Transform(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Transforms all vertices and normals in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.TraverseFaces(System.Action{ABB.Robotics.RobotStudio.Stations.MeshFace})">
            <summary>
            Performs an action on all MeshFaces in this Mesh
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Load(System.String)">
            <summary>
            Loads a Mesh from an .rsgfx file
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Save(System.String)">
            <summary>
            Saves this Mesh to an .rsgfx file
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.Optimize(ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Merges faces and vertices to improve memory usage and rendering performance.
            </summary>
            <remarks>
            All MeshBody/MeshFace objects will be reconstructed.
            Call <see cref="M:ABB.Robotics.RobotStudio.Stations.Mesh.Rebuild"/> to update the internal data used by the graphics subsystem.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> of all faces in this mesh.
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.GetCollisionGeometryAsync(System.Boolean,System.Int32)">
            <summary>
            Returns a <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/> that encapsulates the mesh, consisting of convex <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/> objects.
            </summary>
            <param name="create">Create the collision geometry if it does not already exist.</param>
            <param name="quality">Quality of the collision geometry from 0 (lowest) to 3 (highest), or
            -1 to use the default.</param>
            <returns>A <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/> consisting of convex <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/> objects.</returns>
            <remarks>
            Can be quite time consuming for a large mesh and/or high quality.
            If the collision geometry does not already exist and create is false, null will be returned.
            If the collision geometry already exists, the quality flag is ignored. Call <see cref="M:ABB.Robotics.RobotStudio.Stations.Mesh.RemoveCollisionGeometry"/> first to
            recreate the collision geometry with the desired quality.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Mesh.RemoveCollisionGeometry">
            <summary>
            Removes the collision geometry from the persisted data.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters">
            <summary>
            Specifies the behavior of <see cref="M:ABB.Robotics.RobotStudio.Stations.Mesh.Optimize(ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters,ABB.Robotics.RobotStudio.ProgressNotification)"/>
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.Default">
            <summary>
            Default parameters.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.MergeVertices">
            <summary>
            Merge vertices with the similar position and normal (see <see cref="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.VertexTolerance"/> and <see cref="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.NormalTolerance"/>).
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.MergeBodies">
            <summary>
            Merge body primitives.
            </summary>
            <remarks>
            Face primitives (<see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/>) with the same color and other properties are always merged.
            Set this to true to discard existing body primitives (<see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>) and merge them too.
            </remarks>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.PreserveTextureCoordinates">
            <summary>
            Preserve texture coordinates.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.PreserveWireframe">
            <summary>
            Preserve the edge wireframe on surfaces.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.PreserveSnapPoints">
            <summary>
            Preserve snap points.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.MaxVerticesPerFace">
            <summary>
            Maximum number of vertices on each generated face.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.VertexTolerance">
            <summary>
            Maximum distance between positions for two vertices to be considered equal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.NormalTolerance">
            <summary>
            Maximum angle between normals for two vertices to be considered normal.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.VertexCoherence">
            <summary>
            Number of vertices to search for an equal vertex. Affects performance.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.ExactMaterial">
            <summary>
            Specifies if <see cref="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Material"/> must match exactly when merging face primitives.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters.MaxFaceSize">
            <summary>
            Specifies the maximum face size (in meters) when merging face primitives.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MeshHelpers">
            <summary>
            Contains helper/extension methods for building <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh"/> primitives.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshHelpers.AddRectangle(ABB.Robotics.RobotStudio.Stations.MeshFace,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector2,ABB.Robotics.Math.Vector2)">
            <summary>
            Adds a rectangle to the given MeshFace. 
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MeshBody">
            <summary>
            Graphical representation of a Body.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshBody.BodyId">
            <summary>
            Internal use
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.MeshFace})">
            <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/> that contains <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> objects from the specified collection.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.#ctor">
            <summary>
            Creates an empty <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshBody.Faces">
            <summary>
            Gets the list of <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> objects contained in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshBody.Body">
            <summary>
            Gets the geometric <see cref="P:ABB.Robotics.RobotStudio.Stations.Body"/> that this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/> corresponds to.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.Transform(ABB.Robotics.Math.Matrix4)">
            <summary>
            Transforms all vertices and normals in the <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.Transform(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Transforms all vertices and normals in the <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.GetBoundingBox">
            <summary>
            Calculates the <see cref="T:ABB.Robotics.Math.BoundingBox"/> of this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.Clone">
            <summary>
            Returns a deep clone of this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <returns>The cloned <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateBox(ABB.Robotics.Math.Vector3)">
            <summary>
            Creates a box-shaped <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="size">Length, width and height of the box.</param>
            <remarks>
            The box extends from (0,0,0) to (size).
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateBox(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Vector3)">
            <summary>
            Creates a box-shaped <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="origin">Defines the origin position and rotation of the box.</param>
            <param name="size">Length, width and height of the box.</param>       
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateCylinder(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a cylinder-shaped <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="radius">Radius of the cylinder</param>
            <param name="height">Height of the cylinder.</param>
            <param name="precision">Number of vertices along the circumference.</param>
            <remarks>
            The cylinder is centered around the z axis with the base at (0,0,0).
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateSphere(System.Double,System.Int32)">
            <summary>
            Creates a sphere-shaped <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="radius">Radius of the sphere</param>
            <param name="precision"></param>
            <remarks>The sphere is centered around (0,0,0).</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateCone(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a cone-shaped <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="radius">Radius of the cone base</param>
            <param name="height">Height of the cone</param>
            <param name="precision">Number of vertices along the circumference.</param>
            <remarks>
            The cone is centered around the z axis with the base at (0,0,0).
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateTruncatedCone(System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a truncated cone <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="bottomRadius">Radius of the cone base</param>
            <param name="topRadius">Radius of the top surface</param>
            <param name="height">Height of the cone</param>
            <param name="precision">Number of vertices along the circumference.</param>
            <remarks>
            The cone is centered around the z axis with the base at (0,0,0).
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreatePyramid(System.Double,System.Double,System.Int32)">
            <summary>
            Creates a pyramid-shaped <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="centerToSide">Distance from the center to one side of the pyramid</param>
            <param name="height">Height of the pyramid</param>
            <param name="numSides">Number of sides</param>
            <remarks>
            The pyramid is centered around the z axis with the base at (0,0,0).
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateSurfaceCircle(System.Double,System.Int32)">
            <summary>
            Creates a surface circle <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="radius">Circle radius</param>
            <param name="precision">Number of vertices along the circumference.</param>
            <remarks>
            The circle is created in the x-y plane and centered at (0,0,0).
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateSurfaceCircleSector(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates a surface circular sector <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="innerRadius">Inner radius (typically 0)</param>
            <param name="outerRadius">Outer radius</param>
            <param name="startAngle">Sector start angle</param>
            <param name="endAngle">Sector end angle</param>
            <param name="precision">Number of vertices along the circumference for the full circle.</param>
            <remarks>
            The circle sector is created in the x-y plane and centered at (0,0,0).
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateSurfaceRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a surface rectangle <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>
            </summary>
            <param name="x">Position of the rectangle in the x direction</param>
            <param name="y">Position of the rectangle in the y direction</param>
            <param name="dx">Size of the rectangle in the x direction</param>
            <param name="dy">Size of the rectangle in the y direction</param>
            <remarks>
            The rectangle is created in the x-y plane.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateSurfaceRectangle(ABB.Robotics.Math.Matrix4,System.Double,System.Double)">
            <summary>
            Creates a surface rectangle <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>
            </summary>
            <param name="origin">Origin of the rectangle</param>        
            <param name="dx">Size of the rectangle in the x direction of origin</param>
            <param name="dy">Size of the rectangle in the y direction of origin</param>        
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> of all <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> objects in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreateSurfaceTriangle(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3)">
            <summary>
            Creates a surface triangle <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>.
            </summary>
            <param name="v1">First triangle vertex</param>
            <param name="v2">Second triangle vertex</param>
            <param name="v3">Third triangle vertex</param>        
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshBody.CreatePolyline(ABB.Robotics.Math.Vector3[])">
            <summary>
            Creates a polyline <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/>
            </summary>
            <param name="vertices">Defines the vertices of the polyline.</param>                
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MeshFace">
            <summary>
            Graphical representation of a Face.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshFace.#ctor">
            <summary>
            Creates an empty <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.BodyId">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.FaceId">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Vertices">
            <summary>
            Gets the list of vertices in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Normals">
            <summary>
            Gets the list of normals in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/>.
            </summary>
            <remarks>
            For triangular faces, the number of normals must equal the number of vertices.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.TextureCoordinates">
            <summary>
            Gets the list of texture coordinates in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/>.
            </summary>
            <remarks>
            For triangular faces, the number of texture coordinates must be either zero or
            equal to the number of vertices.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.TriangleIndices">
            <summary>
            Gets the list of indices for the surface representation of this mesh.
            </summary>
            <remarks>
            Each triangle is defined by three indices into the vertex list.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.WireIndices">
            <summary>
            Gets the list of indices for the wire representation of this mesh.
            </summary>
            <remarks>
            Wire indices can be defined in two ways:
            - Either as continuous segments ending with -1, e.g [0, 1, 2, -1, 3, 4, 5, -1]
            - or as individual wires, e.g. [0, 1, 1, 2, 3, 4, 4, 5]
            When retrieveing values from an existing mesh, the second reprentation is always used.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.CenterPoints">
            <summary>
            Gets a list of <see cref="T:ABB.Robotics.Math.Vector3"/> that correspond to the center points of a geometric primitive.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.MidPoints">
            <summary>
            Gets a list of <see cref="T:ABB.Robotics.Math.Vector3"/> that correspond to the mid points of a geometric primitive.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.EndPoints">
            <summary>
            Gets a list of <see cref="T:ABB.Robotics.Math.Vector3"/> that correspond to the end points of a geometric primitive.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.VertexWeights">
            <summary>
            ABB Internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.VertexWeightIndices">
            <summary>
            ABB Internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Material">
            <summary>
            Gets or sets the <see cref="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Material"/> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshFace.UpdateMaterial">
            <summary>
            Updates the rendered Material for an existing mesh without having to rebuild it
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Flags">
            <summary>
            Gets or sets <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFlags"/> that control how the <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> is rendered.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.BoundingBox">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.MeshFace.BoundingBox"/> of this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshFace.Face">
            <summary>
            Gets the geometric <see cref="P:ABB.Robotics.RobotStudio.Stations.Face"/> that this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> corresponds to.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshFace.Transform(ABB.Robotics.Math.Matrix4)">
            <summary>
            Transforms all vertices and normals in the <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshFace.Clone">
            <summary>
            Returns a deep clone of this MeshFace.
            </summary>
            <returns>The cloned face.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshFace.GenerateNormals(System.Double)">
            <summary>
            Generate new normals for this MeshFace.
            </summary>
            <param name="splitAngle">
            The maximum angle for sharing normal between triangles.
            </param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MeshInfo">
            <summary> Contains quantitative information about a Mesh. </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.DetailLevels">
            <summary>
            Gets the detail levels present in the mesh.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfDetailLevels">
            <summary>
            Gets the number of detail levels of the mesh.
            </summary>
            <value>
            The number of <see cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels">detail levels</see> present in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh" />.
            </value>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfBodies">
            <summary>
            Gets the number of bodies in the mesh.
            </summary>
            <value>
            The number of <see cref="T:ABB.Robotics.RobotStudio.Stations.Body">bodies</see> in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" /> represented by the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh" />.
            </value>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfFaces">
            <summary>
            Gets the number of faces in the mesh.
            </summary>
            <value>
            The number of <see cref="T:ABB.Robotics.RobotStudio.Stations.Face">faces</see> in the <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" /> represented by the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh" />.
            <seealso cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels" /></value>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfVertices">
            <summary>
            Gets the number of vertices in the mesh.
            </summary>
            <value>
            The total number of vertices in the the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh" />. The number is the sum of all vertices for all level of details.
            <seealso cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels" /></value>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfTriangles">
            <summary>
            Gets the number of triangles in the mesh.
            </summary>
            <value>
            The total number of triangles in the the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh" />. The number is the sum of all triangles for all level of details..
            <seealso cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels" /></value>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.NumberOfWires">
            <summary>
            Gets the number of wires in the mesh.
            </summary>
            <value>
            The total number of wires in the the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mesh" />. The number is the sum of all wires for all level of details.
            <seealso cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels" /></value>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.PersistentBytes">
            <summary>
            Gets the amount of memory in bytes, which is used to store persistent information about the mesh.
            </summary>
            <value>
            The number of bytes, which is used to store persistent information about the mesh. The persistent information is stored in the station or library when it is saved to disk.
            <seealso cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels" /></value>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.MeshInfo.BoundingBoxBytes">
            <summary>
            Gets the amount of memory in bytes, which is used to store the bounding box heierarchy of the mesh.
            </summary>
            <value>
            The number of bytes, which is used to store the bounding box heierarchy of the mesh. This information is not persistent and will not be saved to disk, when a station or library is saved.
            <seealso cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels" /></value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.MeshPart">
            <summary>
            Represents the graphical representation of a Part.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.#ctor">
            <summary>
            Creates an empty <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.#ctor(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.MeshBody})">
            <summary>
            Creates a <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/> that contains <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/> objects from the specified collection.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.MeshPart.Bodies">
            <summary>
            Gets the list of <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/> objects contained in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.Transform(ABB.Robotics.Math.Matrix4)">
            <summary>
            Transforms all vertices and normals in the <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.Transform(ABB.Robotics.Math.Matrix4,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Transforms all vertices and normals in the <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.TraverseFaces(System.Action{ABB.Robotics.RobotStudio.Stations.MeshFace})">
            <summary>
            Performs an action on all <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> objects in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.GetAllFaces">
            <summary>
            Returns all <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> objects in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.GetBoundingBox">
            <summary>
            Calculates the <see cref="T:ABB.Robotics.Math.BoundingBox"/> of this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.Optimize(ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Merges faces and vertices to improve memory usage and rendering performance.
            </summary>
            <remarks>All <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshBody"/> and <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> objects will be reconstructed.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.SetMaterial(ABB.Robotics.RobotStudio.Stations.Material)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Material"/> of all <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshFace"/> objects in this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.
            </summary>
            <param name="material"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.MeshPart.Clone">
            <summary>
            Returns a deep clone of this <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.
            </summary>
            <returns>The cloned <see cref="T:ABB.Robotics.RobotStudio.Stations.MeshPart"/>.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ParameterRange">
            <summary>
            Represents the range of a spline surface in U or V direction.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ParameterRange.Start">
            <summary>
            Gets the start of the valid parameter range.
            </summary>
            <value>
            The start of the valid parameter range.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ParameterRange.End">
            <summary>
            Gets end of the valid parameter range.
            </summary>
            <value>
            The end of the valid parameter range.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Part">
            <summary>
            A Part is a container for bodies, and can hold zero or more bodies. A Part also contains an orientation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.#ctor">
            <summary>
            Creates a new empty Part
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Bodies">
            <summary>Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.BodyCollection"/> that belongs to this <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/>.</summary>
            <example>Add a body to the part.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Part.HasGeometry">
            <summary>
            True if the part has CAD geometry, false otherwise.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Visible">
            <summary> Gets or sets whether the part is visible or not in the graphics.</summary>
            <example>Set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Part Properties Example" lang="cs" title="Part Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Mesh">
            <summary>
            Returns the graphic representation of this <see cref="T:ABB.Robotics.RobotStudio.Stations.Part"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Source">
            <summary>
            Gets or sets the file that was the source of this part.
            </summary>
            <remarks>
            This property is not set by the Part.Load() method, it has to be
            set manually. 
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Part.SourceDateTime">
            <summary>
            Gets or sets a time stamp of the last update from Part.Source (in UTC)
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.GetPhysicsMaterial">
            <summary>
            Gets bulk and surface properties for physics simulation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.SetPhysicsMaterial(ABB.Robotics.RobotStudio.Stations.PhysicsMaterial)">
            <summary>
            Sets bulk and surface properties for physics simulation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.GetPhysicsCollisionProperties">
            <summary>
            Gets settings for collision detection during physics simulation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.SetPhysicsCollisionProperties(ABB.Robotics.RobotStudio.Stations.PhysicsCollisionProperties)">
            <summary>
            Sets settings for collision detection during physics simulation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.GetPhysicsSurfaceVelocity">
            <summary>
            Gets properties for physics simulation of surface movement.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.SetPhysicsSurfaceVelocity(ABB.Robotics.RobotStudio.Stations.PhysicsSurfaceVelocity)">
            <summary>
            Gets properties for physics simulation of surface movement.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Load(System.String,ABB.Robotics.RobotStudio.ProgressNotification,System.Boolean,System.Boolean,System.Boolean,ABB.Robotics.RobotStudio.Stations.DetailLevels)">
            <summary>
            Loads a part from file.
            </summary>
            <param name="fileName">Specifies the file to load.</param>
            <param name="progressDelegate">A delegate of type <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> that receives notifications about the progress of the load operation.</param>
            <param name="surfaceModel">If true, backfacing surfaces will not be culled when the part is rendered.</param>
            <param name="translateHidden">Controls whether hidden entities are translated or discarded when importing a non-Acis CAD file.</param>
            <param name="healing">Controls whether an attempt is made to automatically <see cref="M:ABB.Robotics.RobotStudio.Stations.Body.Heal(ABB.Robotics.RobotStudio.Stations.Body)">heal</see> geometric entitites.</param>
            <param name="detail">Specifies the <see cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels">detail level(s)</see> to use when creating the graphical representation of geometric entities.</param>
            <returns>The loaded Part, or null if the file was loaded successfully but no valid entities were found.</returns>
            <remarks>Supported file formats are Acis (.sat) and other CAD file formats that have a valid license.
            Also supports visualization formats such as VRML, STL, JT, 3DS and PLY.</remarks>
            <exception cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">Failed to acquire a valid license for the specified file format.</exception>
            <exception cref="T:System.ApplicationException">Failed to load the file. The exception object contains a description of the problem.</exception>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Load(System.String,ABB.Robotics.RobotStudio.IProgressCallback,System.Boolean,System.Boolean,System.Boolean,ABB.Robotics.RobotStudio.Stations.DetailLevels)">
            <summary>
            Loads a part from file.
            </summary>
            <param name="fileName">Specifies the file to load.</param>
            <param name="progressCallback">An interface that receives notifications about the progress of the load operation.</param>
            <param name="surfaceModel">If true, backfacing surfaces will not be culled when the part is rendered.</param>
            <param name="translateHidden">Controls whether hidden entities are translated or discarded when importing a non-Acis CAD file.</param>
            <param name="healing">Controls whether an attempt is made to automatically <see cref="M:ABB.Robotics.RobotStudio.Stations.Body.Heal(ABB.Robotics.RobotStudio.Stations.Body)">heal</see> geometric entitites.</param>
            <param name="detail">Specifies the <see cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels">detail level(s)</see> to use when creating the graphical representation of geometric entities.</param>
            <returns>The loaded Part, or null if the file was loaded successfully but no valid entities were found.</returns>
            <remarks>Supported file formats are Acis (.sat) and other CAD file formats that have a valid license.
            Also supports visualization formats such as VRML, STL, JT, 3DS and PLY.</remarks>
            <exception cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">Failed to acquire a valid license for the specified file format.</exception>
            <exception cref="T:System.ApplicationException">Failed to load the file. The exception object contains a description of the problem.</exception>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Load(System.String,ABB.Robotics.RobotStudio.ProgressNotification,System.Boolean,ABB.Robotics.RobotStudio.Stations.DetailLevels)">
            <summary>
            Loads a part from file.
            </summary>
            <param name="fileName">Specifies the file to load.</param>
            <param name="progressDelegate">A delegate of type <see cref="T:ABB.Robotics.RobotStudio.ProgressNotification" /> that receives notifications about the progress of the load operation.</param>
            <param name="surfaceModel">If true, backfacing surfaces will not be culled when the part is rendered.</param>
            <param name="detail">Specifies the <see cref="T:ABB.Robotics.RobotStudio.Stations.DetailLevels">detail level(s)</see> to use when creating the graphical representation of geometric entities.</param>
            <returns>The loaded Part, or null if the file was loaded successfully but no valid entities were found.</returns>
            <remarks>Supported file formats are Acis (.sat) and other CAD file formats that have a valid license.
            Also supports visualization formats such as VRML, STL, JT, 3DS and PLY.</remarks>
            <exception cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">Failed to acquire a valid license for the specified file format.</exception>
            <exception cref="T:System.ApplicationException">Failed to load the file. The exception object contains a description of the problem.</exception>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Load(System.String)">
            <summary>
            Loads a part from file.
            </summary>
            <param name="fileName">Specifies the file to load.</param>
            <returns>The loaded Part, or null if the file was loaded successfully but no valid entities were found.</returns>
            <remarks>Supported file formats are Acis (.sat) and other CAD file formats that have a valid license.
            Also supports visualization formats such as VRML, STL, JT, 3DS and PLY.</remarks>
            <exception cref="T:ABB.Robotics.RobotStudio.RobotStudioLicenseException">Failed to acquire a valid license for the specified file format.</exception>
            <exception cref="T:System.ApplicationException">Failed to load the file. The exception object contains a description of the problem.</exception>
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.SaveAs(System.String)">
            <summary>
            Saves (exports) the Part to the specified format.
            </summary>
            <param name="fileName">A string that contains the name of the file to which to save the Part.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.SaveAs(System.String,System.Int32)">
            <summary>
            Saves (exports) the Part to the specified format.
            </summary>
            <param name="fileName">A string that contains the name of the file to which to save the Part.</param>
            <param name="version">The version of the chosen format, if supported (0 means default).</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.IntersectRay(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3@,ABB.Robotics.RobotStudio.Stations.Face@)">
            <summary>Checks a if ray instersects with this part and return the closest intersection point.</summary>
            <param name="rayStart">Starting point of the ray (in global coordinates).</param>
            <param name="rayDirection">Direction of the ray (in global coordinates).</param>
            <param name="hitPoint">Returns the intersection point closest to rayStart.</param>
            <param name="hitFace">Returns the face corresponding to the closest intersection point.</param>
            <returns>True if the ray intersects with this part, false otherwise.</returns>
            <remarks>The result is an approximation based on the graphical representation.
            If the part does not contain geometry, hitFace will be null.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.IntersectVolume(ABB.Robotics.Math.BoundingBox,ABB.Robotics.Math.Matrix4)">
            <summary>
            Checks if this parts intersects with a volume defined by a <see cref="T:ABB.Robotics.RobotStudio.Stations.BoundingBox"/>.
            </summary>
            <param name="box"></param>
            <param name="boxTransform"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Loop" /> that is closest to the provided point.</summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>Test if the supplied child can be attached.</summary>
            <param name="child">The child to test for attachment.</param>
            <remarks>This is always true for parts.</remarks>
            <returns>True.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
            <summary>Attach the supplied child to this <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" />.</summary>
            <param name="child">The child to be attached.</param>
            <param name="mount">Set to <b>true</b> if you want to mount the child to the parent. False to keep the current position.</param>
            <param name="offset">Only to be used when mount is set to <b>true</b>. This is the transform from the parent to the child.</param>
            <returns>True if the attachment is not <b>null</b>. Otherwise false.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>Detach the supplied child from this <see cref="T:ABB.Robotics.RobotStudio.Stations.Part" />. If the child was mounted to the parent when the attachment was created, the child will move back to its original position.</summary>
            <param name="child">The child to be detached.</param>
            <returns><b>True</b> if the child could be detached. <b>False</b> if the child never was attached to the parent.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Facet(ABB.Robotics.RobotStudio.Stations.DetailLevels)">
            <summary>
            Re-creates the graphical representation of this Part.
            </summary>
            <param name="detailLevels"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Facet(ABB.Robotics.RobotStudio.Stations.DetailLevels,System.Boolean)">
            <summary>
            Re-creates the graphical representation of this Part.
            </summary>
            <param name="detailLevels"></param>
            <param name="surfaceModel"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.Facet(ABB.Robotics.RobotStudio.Stations.DetailLevels,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Re-creates the graphical representation of this Part.
            </summary>
            <param name="detailLevels"></param>
            <param name="surfaceModel"></param>
            <param name="progress"></param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Part.Skeleton">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.RemoveInternalGeometry">
            <summary>
            Reduces the model by removing all bodies and faces in this Part that are not visible from the outside
            The visible items are found by 'looking' at the part from a number of different directions.
            </summary>
            <remarks>
            Requires an active GraphicControl.
            Faces will not be removed from the geometric representation, only from the graphics.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.OnShapeReplaced">
            <summary>
            Called when the shape on the PartDef has been replaced.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.OnShapeModified">
            <summary>
            Call when the native shape has been modified.
            Invalidates the cached Mesh and physics collision geometry.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Part.TryGetMesh">
            <summary>
            Get Mesh if it's already created.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection">
            <summary>
            Represents a collection of key-value <see cref="T:System.String" /> pairs attached to a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty" />.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.Add(System.String,System.String)">
            <summary> Adds the specified key and value to the collection. </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.Clear">
            <summary> Removes all keys and values from the collection. </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.GetEnumerator">
            <summary> Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates over the key/value pairs in the collection. </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.Remove(System.String)">
            <summary> Removes the value with the specified key from the collection. </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.ContainsKey(System.String)">
            <summary> Determines whether the collection contains the specified key. </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyAttributeCollection.TryGetValue(System.String,System.String@)">
            <summary> Gets the value associated with the specified key. </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding">
            <summary>
            Represents a binding from a source <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty">property</see> to
            a target property.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBinding.#ctor(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.ProjectObject,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the PropertyBinding class.
            </summary>
            <param name="sourceObject">The object that contains the source property.
            <remarks> The object should be a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties"/>.</remarks>
            </param>
            <param name="sourceProperty">The id of the source property.</param>
            <param name="targetObject">The object that contains the target property.</param>
            <param name="targetProperty">The id of the target property.
            <remarks> The value should be either the Id of a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty"/> or the name
            of a CLR property.</remarks>
            </param>
            <param name="allowCycle">Indicates if the target property is allowed to be set twice in the same context.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBinding.#ctor(ABB.Robotics.RobotStudio.ProjectObject,System.String,ABB.Robotics.RobotStudio.ProjectObject,System.String)">
            <summary>
            Creates a new instance of the PropertyBinding class.
            </summary>
            <param name="sourceObject">The object that contains the source property.
            <remarks> The object should be a <see cref="T:ABB.Robotics.RobotStudio.Stations.IHasDynamicProperties"/>.</remarks>
            </param>
            <param name="sourceProperty">The id of the source property.</param>
            <param name="targetObject">The object that contains the target property.</param>
            <param name="targetProperty">The id of the target property.
            <remarks> The value should be either the Id of a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty"/> or the name
            of a CLR property.</remarks>
            </param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBinding.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.SourceObject">
            <summary>
            Returns the object on which <see cref="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.SourceProperty"/> can be found
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.SourceProperty">
            <summary>
            Returns the name of the property that acts as the binding source
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.TargetObject">
            <summary>
            Returns the object on which <see cref="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.TargetProperty"/> can be found
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.TargetProperty">
            <summary>
            Returns the name of the property that acts as the binding target
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.AllowCycle">
            <summary>
            Returns a value indicating if the target property is allowd to be set more than once in the same context
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.SourceObjectName">
            <summary>
            Returns the name of the source object. Typically used for debugging if the object has been removed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBinding.TargetObjectName">
            <summary>
            Returns the name of the target object. Typically used for debugging if the object has been removed.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding"/> at the specified index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Changed">
            <summary>
            Raised when an item is added to or removed from the collection
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Add(ABB.Robotics.RobotStudio.Stations.PropertyBinding)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding"/> to the collection.
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Insert(System.Int32,ABB.Robotics.RobotStudio.Stations.PropertyBinding)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding"/> to the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="binding"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Remove(ABB.Robotics.RobotStudio.Stations.PropertyBinding)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding"/> from the collection.
            </summary>
            <param name="binding"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.Contains(ABB.Robotics.RobotStudio.Stations.PropertyBinding)">
            <summary>
            Returns true if the <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding"/> exists in the collection.
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection.IndexOf(ABB.Robotics.RobotStudio.Stations.PropertyBinding)">
            <summary>
            Returns the index of a <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBinding"/> in the collection.
            </summary>
            <param name="binding"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues">
            <summary>
            Represents the axis positions in radians of the robot axes.
            This class contains the same information as the RAPID data type <b>robjoint</b>.
            </summary><seealso cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /><seealso cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget" />
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_1">
            <summary>
            Gets/sets the position for robot axis 1.		
            </summary>
            <value>
            The position for robot axis 1 in radians.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_2">
            <summary>
            Gets/sets the position for robot axis 2.
            </summary>
            <value>
            The position for robot axis 2 in radians.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_3">
            <summary>
            Gets/sets the position for robot axis 3.
            </summary>
            <value>
            The position for robot axis 3 in radians.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_4">
            <summary>
            Gets/sets the position for robot axis 4.
            </summary>
            <value>
            The position for robot axis 4 in radians.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_5">
            <summary>
            Gets/sets the position for robot axis 5.
            </summary>
            <value>
            The position for robot axis 5 in radians.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.Rax_6">
            <summary>
            Gets/sets the position for robot axis 6.
            </summary>
            <value>
            The position for robot axis 6 in radians.
            </value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.SetAxisValues(ABB.Robotics.RobotStudio.Stations.RobotAxisValues@,System.Double[],System.Int32[])">
            <summary>
            Sets only the values of the active axes. One array contains the values for the active axes, and another arrays specifies the position in the <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" />, where the values will be set.
            This method is used when setting axes values for robots that has less than 6 axes.
            </summary>
            <param name="robotAxes">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> which values shall be set. Which axes (Rax_1 - Rax_6), that will be affected depends on <b>activeJoints</b>.</param>
            <param name="activeAxisValues">An array of double that contains the values to set.</param>
            <param name="activeJoints">An array of int that specifies in which positions (Rax_1 to Rax_6) the values shall be set.</param>
            <exception cref="T:System.ArgumentException">
            The different reasons are:
            The axisValue is not of the same length as the activeJoints array.
            The arrays have a length that is not between 1 and 6.
            The values in the activeJoints array are not in the range 1 to 6. Since they are used to define which values from Rax_1 to Rax_6 that are set, it must be in the range 1 to 6.
            </exception>
            <remarks />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.SetAxisValues(ABB.Robotics.RobotStudio.Stations.RobotAxisValues@,System.Double[])">
            <summary>
            Sets the values of the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" />, given the specified array of doubles.
            </summary>
            <exception cref="T:System.ArgumentException">
            The axisValue array is not of length 6.
            </exception>
            <remarks>
            The length of axisValues must be 6.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.GetAxisValues(System.Int32[])">
            <summary>
            Returns the axes values for the active axes in Rax_1 to Rax_6 as an array.
            This method is used when getting axes values for robots that has less than 6 axes.
            </summary>
            <param name="activeJoints">An array of int that specifies for which positions (Rax_1 to Rax_6) the values shall be get.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RobotAxisValues.GetAxisValues">
            <summary>
            Returns the axes values in Rax_1 to Rax_6 as an array.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsActionInstruction">
            <summary>
            Represents a generic RAPID instruction.
            </summary>
            <remarks>
            The <see cref="P:ABB.Robotics.RobotStudio.ProjectObject.Name"/> property corresponds to the name of the RAPID instruction and should not be changed.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.String)">
            <summary>
            Initializes a new instance of the RsActionInstruction class, which is based on the specified instruction description and template.
            </summary>
            <param name="task">The task to create the Action instruction for</param>
            <param name="descriptionName">The name of the instruction description, that specifies which kind of Action Instruction that shall be created.</param>
            <param name="instructionTemplateName">The name of the instruction template to use. The template specifies default argument values for the instruction.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.InstructionTemplateName">
            <summary>
            Gets the instruction template name.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.FrameSize">
            <summary>
            Gets or sets the size of RsActionInstructions that have a graphical representation, e.g. SetBrush. 
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.TrigValidity">
            <summary>
            Gets or sets the validity of an action instruction triggered by a condition, e.g. SetBrush.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstruction.Visible">
            <summary>
            Gets or sets if this RsActionInstruction should be visible in the graphics,
            if it has a graphical representation (e.g. SetBrush).
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription">
            <summary>
            Defines the parameters and other properties of an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsActionInstruction"/>.
            Also contains templates for creating new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsActionInstruction"/> instances.
            </summary>
            <remarks>
            The <see cref="P:ABB.Robotics.RobotStudio.ProjectObject.Name"/> property corresponds to the name of the RAPID instruction.
            </remarks>
            <example>RsActionInstructionDescription Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsActionInstructionDescription Example" lang="cs" title="RsActionInstructionDescription Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription"/> class.
            </summary>
            <param name="name">The name of the corresponding RAPID instruction.</param>
            <example>Create a ActionInstructionDescription.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsActionInstructionDescription Example" lang="cs" title="Create RsActionInstructionDescription Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription.InstructionTemplates">
            <summary>
            Gets the collection of instruction templates contained within this Action Instruction Description.
            </summary>
            <example>Get InstructionTemplateCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsActionInstructionDescription Example" lang="cs" title="RsActionInstructionDescription Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription.ActiveTemplate">
            <summary>
            Gets or sets the active instruction template.
            </summary>
            <example>Get/Set Active Instruction Template.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsActionInstructionDescription Example" lang="cs" title="RsActionInstructionDescription Example" />
            </example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration">
            <summary>
            This is an abstract base class for <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/>, <see cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget"/>, <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/>,
            <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> and <see cref="T:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration"/>.
            It corresponds to a RAPID variable instance, like num or tooldata.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.Name">
            <summary>
            Gets or sets the name of the DataDeclaration
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.Synchronize">
            <summary>
            Gets or sets whether the DataDeclaration should be synchronized to the VC when the referencing <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/> is.
            </summary>
            <remarks>
            Use with caution, since unwise usage might cause errors in the RAPID code.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.ModuleName">
            <summary>
            Gets or sets the name of the RAPID module that the DataDeclaration will be synchronized to.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.StorageType">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RapidStorageType"/> of the DataDeclaration 
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.Local">
             <summary>
             Gets or sets if the DataDeclaration is declared local in a module. (Corresponds to the LOCAL keyword in RAPID).
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.DataType">
            <summary>
            Gets the RAPID data type of the Data Declaration.
            </summary>
            <example>Get DataType.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsGenericDataDeclaration Properties Example" lang="cs" title="RsGenericDataDeclaration Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.Copy">
            <summary>
            Creates a copy of the DataDeclaration.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.GetReferencingInstructions">
            <summary>
            Returns all <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstruction"/>s that are referencing this DataDeclaration.
            </summary>
            <returns>An array of all the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstruction"/>s that are referencing this object.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection">
            <summary>
            A collection of RsDataDeclaration objects.
            </summary>
            <example>RsDataDeclarationCollection Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsDataDeclarationCollection Example" lang="cs" title="RsDataDeclarationCollection Example" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Item(System.String)">
            <summary>Gets the declaration with the specified name.</summary>
            <param name="name">The name of the declaration to get.</param>
            <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration"/> mathcing the name.</returns>
            <exception cref="T:System.ArgumentException">Invalid name, if no mathcing <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration"/> is found.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Contains(System.String)">
            <summary>
            Checks if the the collecction contains a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" />.
            </summary>
            <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to look for.</param>
            <returns>True if the collection contains a DataDeclaration with the specified name.</returns>
            <example>Contains.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsDataDeclarationCollection Example" lang="cs" title="RsDataDeclarationCollection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.TryGetDataDeclaration(System.String,ABB.Robotics.RobotStudio.Stations.RsDataDeclaration@)">
            <summary>Gets the data declaration with the specified name.</summary>
            <param name="name">The name of the declaration to get.</param>
            <param name="dataDeclaration">When this method returns, contains the declaration associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsDataDeclarationCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Add(ABB.Robotics.RobotStudio.Stations.RsDataDeclaration)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to the collection.
            </summary>
            <param name="dataDeclaration">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to add to the collection.</param>
            <example>Add RsDataDeclaration.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsDataDeclarationCollection Example" lang="cs" title="RsDataDeclarationCollection Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsDataDeclarationCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsDataDeclaration)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> from the collection.
            </summary>
            <param name="dataDeclaration">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to remove from the collection.</param>
            <example>Remove RsDataDeclaration.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsDataDeclarationCollection Example" lang="cs" title="RsDataDeclarationCollection Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration">
            <summary>
            Represents a RAPID DataDeclaration that does not have dedicated class in the RobotStudio API,
            but that still should be possible to syncronize and/or modify.
            </summary>
            <example>Frame Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsGenericDataDeclaration Properties Example" lang="cs" title="RsGenericDataDeclaration Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration.#ctor(System.String,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration"/> class as an array with 1-3 dimensions.
            </summary>
            <param name="name">The RAPID name of the declaration.</param>
            <param name="dataType">The RAPID data type of the declaration.</param>
            <param name="dimensions">An array of length 1-3 that specifies the size of the array data in each dimension.</param>
            <example>Create RsGenericDataDeclaration.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsGenericDataDeclaration Properties Example" lang="cs" title="RsGenericDataDeclaration Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration"/> class.
            </summary>
            <param name="name">The RAPID name of the declaration.</param>
            <param name="dataType">The RAPID data type of the declaration</param>
            <example>Create RsGenericDataDeclaration.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsGenericDataDeclaration Properties Example" lang="cs" title="RsGenericDataDeclaration Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration.InitialExpression">
            <summary>
            Gets or sets the InitialExpression of the DataDeclaration.
            </summary>
            <example>Get/Set InitialExpression.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsGenericDataDeclaration Properties Example" lang="cs" title="RsGenericDataDeclaration Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsGenericDataDeclaration.GetDimensions">
            <summary>Gets the dimensions of the DataDeclaration.</summary>
            <returns>An array of length 0-3 that specifies the size of the data in each dimension.</returns>
            <example>GetDimensions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsGenericDataDeclaration Properties Example" lang="cs" title="RsGenericDataDeclaration Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstruction">
            <summary>
            Abstract base class for <see cref="T:ABB.Robotics.RobotStudio.Stations.RsActionInstruction"/> and <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction"/>.
            </summary>
            <remarks>
            The <see cref="P:ABB.Robotics.RobotStudio.ProjectObject.Name"/> property corresponds to the name of the RAPID instruction and should not be changed.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstruction.InstructionArguments">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection"/> of the RsInstruction.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.Copy">
            <summary>
            Creates a deep copy of the RsInstruction
            </summary>
            <returns>The new RsInstruction object</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.SetInstructionTemplate(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
            <summary>
            Sets the instruction template of the RsInstruction
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.GetInstructionDescription">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription"/> that defines this instruction.
            </summary>
            <returns></returns>
            <remarks>
            The instruction must be added to a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/>.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.GetArgumentsByDataType(System.String)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument"/>s of the specified data type.
            </summary>
            <param name="dataType">RAPID data type, see <see cref="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.DataType"/></param>
            <returns></returns>
            <remarks>
            The instruction must be added to a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/>. If it is not, use the <see cref="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.GetArgumentsByDataType(ABB.Robotics.RobotStudio.Stations.RsTask,System.String)"/> overload.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstruction.GetArgumentsByDataType(ABB.Robotics.RobotStudio.Stations.RsTask,System.String)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument"/>s of the specified data type.
            </summary>
            <param name="task">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/> that contains the instruction definition.</param>
            <param name="dataType">RAPID data type</param>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument">
            <summary>
            Represents an argument of a RsInstruction or a RsInstructionTemplate.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.#ctor(System.String,System.String)">
            <summary>
            Creates and initializes a new RsInstructionArgument object.
            </summary>
            <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument"/> to create.</param>
            <param name="value">The value of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument"/> to create.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument"/> object.</returns>
            <example>Create RsInstructionArgument.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsInstructionArgument Example" lang="cs" title="RsInstructionArgument Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.Value">
            <summary>
            Get or sets the value of the instruction argument
            </summary>
            <example>Get/Set Value.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsInstructionArgument Example" lang="cs" title="RsInstructionArgument Example" />
            </example>	
            <remarks>
            For optional arguments, <see cref="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.Enabled"/> must also be true for the argument to be used.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.Enabled">
            <summary>
            Gets or sets the Enabled. Set Enabled to false to not use the instruction argument.
            </summary>
            <remarks>
            Only relevant for optional arguments.
            Enabled is always true for non-optional arguments.
            </remarks>
            <example>Get/Set Enabled.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsInstructionArgument Example" lang="cs" title="RsInstructionArgument Example" />
            </example>	
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.Parent">
            <summary>
            Get the parent of the instruction argument		
            </summary>
            <example>Get Parent.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsInstructionArgument Example" lang="cs" title="RsInstructionArgument Example" />
            </example>	
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument.GetReferencedDataDeclaration">
            <summary>
            Gets the RAPID declaration referenced by this argument, if applicable.
            The data is cached.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> objects.
            </summary>
            <example>InstructionArguments Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsInstructionArgument Example" lang="cs" title="RsInstructionArgument Example" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Item(System.String)">
            <summary>
            Gets the named item in the collection
            </summary>
            <example>Get Item.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsInstructionArgument Example" lang="cs" title="RsInstructionArgument Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Contains(System.String)">
            <summary>
            Check to see if a named item is part of the collection.
            </summary>
            <param name="name">The name to look for.</param>
            <returns>True if the named item is part of the collection, false otherwise.</returns>
            <example>Contains.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsInstructionArgument Example" lang="cs" title="RsInstructionArgument Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.TryGetInstructionArgument(System.String,ABB.Robotics.RobotStudio.Stations.RsInstructionArgument@)">
            <summary>Gets the argument with the specified name.</summary>
            <param name="name">The name of the argument to get.</param>
            <param name="instructionArgument">When this method returns, contains the argument associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsInstructionArgumentCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
            <example>TryGetInstructionArgument.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsInstructionArgument Example" lang="cs" title="RsInstructionArgument Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionArgument)">
            <summary>
            Add a RsInstructionArgument to the collection.
            </summary>
            <remarks>
            This should only be used when handling the InstructionArguments collection of the RsInstructionTemplate class
            not when handling the collection of the RsInstruction classes, since they already containa complete set of arguments
            </remarks>
            <param name="instructionArgument">The instruction argument to be added.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionArgumentCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionArgument)">
            <summary>
            Removes a RsInstructionArgument from the collection.
            </summary>
            <remarks>
            This should only be used when handling the InstructionArguments collection of the RsInstructionTemplate class
            not when handling the collection of the RsInstruction classes, since they already containa complete set of arguments
            </remarks>
            <param name="instructionArgument">The instruction argument to be removed.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstruction" /> objects.
            </summary>
            <example>InstructionCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsMoveInstruction Example" lang="cs" title="Create RsMoveInstruction Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstruction,ABB.Robotics.RobotStudio.Stations.RsInstruction)">
            <summary>
            Add an instruction to a path procedure.
            </summary>
            <param name="instruction">The instruction to be added.</param>
            <param name="afterThisInstruction">The afterThisInstruction that instruction should be added after.
            If this null, instruction is added before the first instruction.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.Exception">Object must be removed from it's current parent first.</exception>
            <example>InstructionCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsMoveInstruction Example" lang="cs" title="Create RsMoveInstruction Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstruction)">
            <summary>
            Add an instruction to a path procedure.
            </summary>
            <param name="instruction">The instruction to be added.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.Exception">Object must be removed from it's current parent first.</exception>
            <example>InstructionCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsMoveInstruction Example" lang="cs" title="Create RsMoveInstruction Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstruction)">
            <summary>
            Removes an instruction from a path procedure.
            </summary>
            <param name="instruction">The instruction to be removed.</param>
            <example>InstructionCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsMoveInstruction Example" lang="cs" title="Create RsMoveInstruction Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription">
            <summary>
            Abstract base class for <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/> and <see cref="T:ABB.Robotics.RobotStudio.Stations.RsActionInstructionDescription"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription.InstructionParameterGroups">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection"/> that defines all possible parameters of the instruction.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription.InformationText">
            <summary>
            Gets or sets an informational text for the instruction description.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription.FindInstructionParameter(System.String)">
            <summary>
            Tries to find the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter"/> with the supplied name.
            </summary>
            <param name="parameterName">The name of the parameter to look for.</param>
            <returns>
            The RsInstructionParameter if a matching name exists, otherwise null.
            </returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription" /> objects.
            </summary>
            <remarks>
            Case insensitive with regards to instruction name.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Item(System.String)">
            <summary>
            Gets the named item.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Contains(System.String)">
            <summary>
            Checks to see if a named item is contained by the collection.
            </summary>
            <param name="name">The name of the item to look for.</param>
            <returns>
            True if the named item is a member, false otherwise.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.TryGetInstructionDescription(System.String,ABB.Robotics.RobotStudio.Stations.RsInstructionDescription@)">
            <summary>Gets the description with the specified name.</summary>
            <param name="name">The name of the description to get.</param>
            <param name="instructionDescription">When this method returns, contains the description associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsInstructionDescriptionCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionDescription)">
            <summary>
            Adds the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription" /> to the collection.
            </summary>
            <param name="instructionDescription">The Instruction Description to add to the collection.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionDescription)">
            <summary>
            Removes the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription" /> from the collection.
            </summary>
            <param name="instructionDescription">The Instruction Description to remove from the collection.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionDescriptionCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter">
            <summary>
            Describes the data type and other properties of an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument"/>.
            </summary>
            <example>RsInstructionParameter example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.#ctor(System.String)">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter"/> object.
            </summary>
            <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter"/>.</param>
            <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter"/> object.
            </returns>
            <example>Create a RsInstructionParameter.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.DataType">
            <summary>
            Get or sets the RAPID data type of the parameter.
            </summary>
            <example>Get/Set data type.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.Optional">
            <summary>
            Get or sets whether the parameter is an optional argument or not.
            </summary>
            <example>Get/Set Optional.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.Dimensions">
            <summary>
            Get or sets the dimension of the parameter.
            </summary>
            <example>Get/Set Dimensions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.AccessMode">
            <summary>
            Get or sets the access mode of the parameter.
            </summary>
            <example>Get/Set AccessMode.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.PointType">
            <summary>
            Get or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPointType"/> of the parameter.
            </summary>
            <example>Get/Set PointType.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter.SyncReferencedData">
            <summary>
            Get or sets whether the parameter should be syncronized to and from the VC.
            If set to true when syncing from the VC data declarations corresponding to the Parameter will be added to the station.
            </summary>
            <remarks>
            This property has no effect for ToolData, WorkObjects and for RobTargets with the PointType set, since these are always synchronized.
            </remarks>
            <example>Get/Set SyncReferencedData.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> objects.
            </summary>
            <example>RsInstructionParameterCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionParameter)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> object to the collection.
            </summary>
            <param name="instructionParameter">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> to add.</param>
            <example>Add.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionParameter)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> object from the collection.
            </summary>
            <param name="instructionParameter">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter" /> to remove.</param>
            <example>Remove.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup">
            <summary>
            Represents a group of one or more <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter"/> objects.
            This object defines either a single parameter, or a group of mutually exclusive parameters.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup.#ctor">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup"/> object.
            </summary>
            <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup"/> object.
            </returns>
            <example>Create a RsInstructionParameterGroup.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup.InstructionParameters">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameter"/> objects in the group.
            </summary>
            <example>Get InstructionParameters.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> objects.
            This collection defines all possible parameters of an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstruction"/>.
            Each <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup"/> object defines either a single parameter, or a group of mutually exclusive parameters.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup)">
            <summary>
            Add a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> object to the collection.
            </summary>
            <param name="instructionParameterGroup">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> to add.</param>
            <example>Add RsInstructionParameterGroup.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroupCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> object from the collection.
            </summary>
            <param name="instructionParameterGroup">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionParameterGroup" /> to remove.</param>
            <example>Remove RsInstructionParameterGroup.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate">
            <summary>
            Defines a set of argument values that are applied to the instructions created using the template.
            You can create templates for all instructions in the system running on the virtual controller.
            </summary>
            <example>RsInstructionTemplate Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsActionInstructionDescription Example" lang="cs" title="RsActionInstructionDescription Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate.#ctor">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate"/> object.
            </summary>
            <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate"/> object.
            </returns>
            <example>Create RsInstructionTemplate.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsActionInstructionDescription Example" lang="cs" title="Create RsActionInstructionDescription Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate.InstructionArguments">
            <summary>
            Gets the InstructionArguments collection of the template.
            </summary>
            <example>Get InstructionArguments.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsActionInstructionDescription Example" lang="cs" title="RsActionInstructionDescription Example" />
            </example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> objects.
            </summary>
            <example>RsInstructionTemplateCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsActionInstructionDescription Example" lang="cs" title="RsActionInstructionDescription Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.TryGetInstructionDescription(System.String,ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate@)">
            <summary>Gets the template with the specified name.</summary>
            <param name="name">The name of the template to get.</param>
            <param name="instructionTemplate">When this method returns, contains the template associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsInstructionTemplateCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.Add(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> object to the collection.
            </summary>
            <param name="instructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> to add.</param>
            <example>Add.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsActionInstructionDescription Example" lang="cs" title="RsActionInstructionDescription Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplateCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> object from the collection.
            </summary>
            <param name="instructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> to remove.</param>
            <example>Remove.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsActionInstructionDescription Example" lang="cs" title="RsActionInstructionDescription Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.#ctor(System.String)">
            <summary>
            Creates a new RsIrc5Controller
            </summary>
            <param name="systemPath">Path to the Virtual Controller system directory</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Parent">
            <summary>
            The Parent property returns a reference to the parent Station object.
            </summary>
            <remarks>
            You can use the Parent property to navigate up from the current object to
            the object one level higher.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Name">
            <summary>
            Gets or set the name for this RsIrc5Controller object.
            </summary>
            <value>The name for this object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.MechanicalUnits">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit"/>s in this controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Tasks">
            <summary>
            Gets the motion <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/>s in this controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.NonMotionTasks">
            <summary>
            Gets the background <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/>s in this controller.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemId">
            <summary>
            Gets the system id of the Virtual Controller instance that corresponds to this <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemPath">
            <summary>
            Gets the system path of the Virtual Controller that corresponds to this <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemState">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemState"/> of the Virtual Controller instance that corresponds to this <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.MappingState">
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.ProcessTime">
            <summary>
            Gets the time in seconds since RAPID execution was started.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.Visible">
            <summary>
            Gets or sets a value that indicates if the paths, targets and other frames in this controller should be visible in the graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.RunMode">
            <summary>
            The number of execution cycles to be used when running a simulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.StopAtBreakpoints">
            <summary>
            Returns if program execution shall stop at breakpoints or not.
            </summary>
            <returns>True if execution stops at breakpoints, false if not.</returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SuppressSimulationActions">
            <exclude/>
            <summary>
            Returns if some actions shall be ignored during simulations
            </summary>
            <returns>True if simulation actions are suppressed, false if not.</returns>
            <remarks>
            When simulation actions are suppressed, tasks will not be activated or deactivated when the
            simulation starts, and the RAPID program execution will not start when the siumulation starts,
            or stopped when the simulation stops.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.BrushIndicatorColors">
            <exclude/>
            <summary>
            For ABB Internal use only.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.InformationStream">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.InformationStream"/> objects which can be used to subscribe on events that are synchronized with robot motion.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.ControllerConnection">
            <summary>
            Internal use only
            </summary>
            <exclude/>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SetTaskFrameTransform(ABB.Robotics.RobotStudio.Stations.RsTask,ABB.Robotics.Math.Matrix4,System.Boolean)">
            <summary>
            Sets the task frame belonging to a task.
            </summary>
            <param name="task">The task that should have its task frame updated.</param>
            <param name="globalTransform">The new task frame in world coordinates.</param>
            <param name="updateBaseFrames"></param>
            <returns>An array of each <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/> that have been changed.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SetTaskFrameTransform(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.RsTask},ABB.Robotics.Math.Matrix4,System.Boolean)">
            <summary>
            Sets the task frame belonging to one or more tasks.
            </summary>
            <param name="tasksToUpdate">The tasks that should have its task frame updated.</param>
            <param name="globalTransform">The new task frame in world coordinates.</param>
            <param name="updateBaseFrames"></param>
            <returns>An array of each <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTask"/> that have been changed.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.StartAsync(ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode)">
            <summary>
            Starts or restarts the Virtual Controller.
            </summary>
            <param name="restartMode">Restart mode</param>
            <remarks>
            Please note that it is not possible to call Wait() on the returned Task from the UI thread - doing so will cause a deadlock.
            Use await or ContinueWith instead.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.StartAsync(ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode,System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Mechanism})">
            <summary>
            Starts or restarts the Virtual Controller.
            </summary>
            <param name="restartMode">Restart mode</param>
            <param name="mechanismsToMap">Mechanism(s) to be associated with the controller. Can be null,
            in which case the mapping is performed automatically.</param>
            <remarks>
            Please note that it is not possible to call Wait() on the returned Task from the UI thread - doing so will cause a deadlock.
            Use await or ContinueWith instead.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.StartAsync(ABB.Robotics.RobotStudio.Stations.VirtualControllerRestartMode,System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Mechanism},System.Boolean)">
            <summary>
            Starts or restarts the Virtual Controller.
            </summary>
            <param name="restartMode">Restart mode</param>
            <param name="mechanismsToMap">Mechanism(s) to be associated with the controller. Can be null,
            in which case the mapping is performed automatically.</param>
            <param name="checkBaseFrame">Check if the baseframe in the system coincides with the associated mechanism. If it does not,
            the user will be asked if the mechanism should be moved.</param>
            <remarks>
            Please note that it is not possible to call Wait() on the returned Task from the UI thread - doing so will cause a deadlock.
            Use await or ContinueWith instead.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.AssociateMechanismWithMechanicalUnits(ABB.Robotics.RobotStudio.Stations.Mechanism,ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit[],System.Boolean)">
            <summary>
            Associates a mechanism to one or several mechunits. 
            </summary> 
            <param name="mechanism">The mechanism to be associated with the mechanical units</param>
            <param name="mechanicalUnits">An array with the affected mechanical units</param>
            <param name="updateTransform">Boolean to be set to true if the mechanism should be alogned with the baseframe of the mechanical unit</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.ChangeMechanismInMechanicalUnits(ABB.Robotics.RobotStudio.Stations.Mechanism,ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit[])">
            <summary>
            Changes the association from one or several mechunits from a mechanism to an other mechanism
            </summary> 
            <param name="mechanism">The mechanism to be associated with the mechanical units</param>
            <param name="mechanicalUnits">An array with the affected mechanical units</param>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SystemStateChanged">
            <exlude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller.SimulationConfiguration">
            <summary>
            Returns the active simulation configuration for this controller.
            TODO: public?
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.RemoveAsync(ABB.Robotics.RobotStudio.Stations.RsIrc5Controller)">
            <summary>
            Removes the virtual controller from the station. If the controller is running, it will be stopped as a result.
            </summary>
            <remarks>
            Do not call Wait() on the returned Task - this may cause a deadlock. Use await instead.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsIrc5ControllerCollection.TryGetIrc5Controller(System.String,ABB.Robotics.RobotStudio.Stations.RsIrc5Controller@)">
            <summary>Gets the controller with the specified name.</summary>
            <param name="name">The name of the controller to get.</param>
            <param name="irc5Controller">When this method returns, contains the path associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsIrc5ControllerCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget">
            <summary>
            A RsJointTarget corresponds to a <c>jointtarget</c> declaration in RAPID.
            It defines each individual axis position, for both the robot and the external axes.
            Jointtargets are used to define the positions that the robot and the external axes
            will move to with the instruction MoveAbsJ.
            </summary>
            <example>RsJointTarget Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsJointTarget Example" lang="cs" title="RsJointTarget Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.#ctor">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget"/> object.
            </summary>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget"/> object.</returns>
            <example>Create RsJointTarget.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsJointTarget Example" lang="cs" title="RsJointTarget Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.Visible">
            <summary>
            Geta or sets a value specifying whether the joint target should be visible in the graphics or not.
            </summary>
            <example>Get/set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsJointTarget Example" lang="cs" title="RsJointTarget Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.FrameSize">
            <summary>
            Gets or set the size of the graphical representation of the RsToolData.
            </summary>
            <example>Get/set FrameSize.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsJointTarget Example" lang="cs" title="RsJointTarget Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.Name">
            <summary>
            Gets or sets the name of the object
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.ShowName">
            <summary>
            Gets or sets a value indicating whether the name of the JointTarge will
            be displayed in the graphics.
            </summary>
            <example>Get/set ShowName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsJointTarget Example" lang="cs" title="RsJointTarget Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.Highlight(System.Drawing.Color)">
            <summary>
            Sets the highlight color of the target.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.Highlight">
            <summary>
            Sets the highlight color of the target to the default highlight color.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.ResetHighlight">
            <summary>
            Resets the highlight color of the target to the default color.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsJointTarget.IsInline">
            <summary>
            Gets or sets whether the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget"/> will be decalared inline in the RAPID when syncronized.
            </summary>
            <example>Get/set IsInline.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsJointTarget Example" lang="cs" title="RsJointTarget Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.GetRobotAxes(System.Boolean)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> of the jointtarget.
            </summary>
            <param name="convertFromRapidDataToSI">Specifies whether the RobotAxisValues should be converted from the RAPID data format to SI or not.</param>
            <returns>
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> of the jointtarget
            </returns>
            <example>GetRobotAxes.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsJointTarget Example" lang="cs" title="RsJointTarget Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.SetRobotAxes(ABB.Robotics.RobotStudio.Stations.RobotAxisValues,ABB.Robotics.RobotStudio.Stations.Mechanism,System.Boolean)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues"/> of the jointtarget to the current values of the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism"/>.
            </summary>
            <param name="robotAxes">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> to be set for the jointtarget.
            Axis values that correspond to active joints of the specified Mechanism are ignored.
            </param>
            <param name="mechanism">The <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism"/> from which to get the current joint values.</param>
            <param name="convertFromSIToRapidData">Specifies whether the RobotAxisValues should be converted from SI to RAPID data format or not.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.SetRobotAxes(ABB.Robotics.RobotStudio.Stations.RobotAxisValues,System.Boolean)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> of the jointtarget.
            </summary>
            <param name="value">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RobotAxisValues" /> to be set for the jointtarget.</param>
            <param name="convertFromSIToRapidData">Specifies whether the RobotAxisValues should be converted from SI to RAPID data format or not.</param>
            <example>SetRobotAxes.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsJointTarget Example" lang="cs" title="RsJointTarget Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.GetExternalAxes(System.Boolean)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the jointtarget.
            </summary>
            <param name="convertFromRapidDataToSI">Specifies whether the ExternalAxisValues should be converted from the RAPID data format to SI or not.</param>
            <returns>
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the jointtarget.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.SetExternalAxes(ABB.Robotics.RobotStudio.Stations.ExternalAxisValues,System.Boolean)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the jointtarget.
            </summary>
            <param name="value">The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> to be set for the jointtarget.</param>
            <param name="convertFromSIToRapidData">Specifies whether the ExternalAxisValues should be converted from the SI to RAPID data format or not.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.JumpTo(System.Boolean)">
            <summary>
            Jumps the mechanism of the task that the jointtraget belongs to, to the position of the jointtarget. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
            <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
            <returns>
            True if it is possible to jump to the target and the jump succeded, otherwise false.
            </returns>
            <example>JumpTo.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Movement Methods Example" lang="cs" title="RsMoveInstruction Movement Methods Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsJointTarget.JumpTo">
            <summary>
            Jumps the mechanism of the task that the jointtraget belongs to, to the position of the jointtarget.
            </summary>
            <returns>
            True if it is possible to jump to the target and the jump succeded, otherwise false.
            </returns>
            <example>JumpTo.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Movement Methods Example" lang="cs" title="RsMoveInstruction Movement Methods Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsLoadData">
            <summary>
            Loaddata is used to describe loads attached to the mechanical interface of the robot
            Load data usually defines the payload (grip load is defined by the instruction Grip-
            Load) of the robot, i.e. the load held in the robot gripper.
            The tool load is specified in the tool data (tooldata) which includes load data.
            </summary>
            <example>RsLoadData Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.#ctor(System.Double,ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Quaternion,ABB.Robotics.Math.Vector3)">
             <summary> 
             Initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsLoadData"/> instance with the specified parameters.
             </summary>
             <param name="mass">The weight of the load.</param>
             <param name="cog">The centre of gravity of a tool load expressed in the wrist coordinate system.</param>
             <param name="aom">The orientation of the coordinate system defined by the inertial axes of the tool load.</param>
             <param name="inertia">The moment of inertia of the load around the x-, y- and z-axis of the tool load or payload
            coordinate system.</param>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsLoadData.Mass">
            <summary>
            Gets or Sets the weight of the load.
            </summary>
             <example>Get/Set Mass.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
             </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsLoadData.Cog">
            <summary>
            The centre of gravity of a tool load expressed in the wrist coordinate system.
            If a stationary tool is used, it means the centre of gravity for the tool holding the
            work object.
            </summary>
            <example>Get/Set Cog.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsLoadData.Aom">
            <summary>
            The orientation of the coordinate system defined by the inertial axes of the tool
            load. Expressed in the wrist coordinate system as a quaternion (q1, q2, q3, q4). If
            a stationary tool is used, it means the inertial axes for the tool holding the work
            object.
            </summary>
            <remarks>
            The orientation of the tool load coordinate system must coincide with the orientation
            of the wrist coordinate system. <b>It must always be set to 1, 0, 0, 0</b>.
            </remarks>
            <example>Get/Set Aom.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsLoadData.Inertia">
            <summary>
            The moment of inertia of the load around the x-, y- and z-axis of the tool load or payload
            coordinate system.
            </summary>
            <example>Get/Set Inertia.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><b>True</b> if <b>obj</b> and this instance are the same type and represent the same value; otherwise, <b>false</b>.
            </returns>
            <example>Equals.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.op_Equality(ABB.Robotics.RobotStudio.Stations.RsLoadData,ABB.Robotics.RobotStudio.Stations.RsLoadData)">
            <summary>
            Compares the two RsLoadData objects for equality.
            </summary>
            <param name="lhs">The first object to compare.</param>
            <param name="rhs">The second object to compare.</param>
            <returns>
            <b>True</b> if <b>lhs</b> and <b>rhs</b> represent the same values; otherwise, <b>false</b>.
            </returns>
            <example>.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsLoadData.op_Inequality(ABB.Robotics.RobotStudio.Stations.RsLoadData,ABB.Robotics.RobotStudio.Stations.RsLoadData)">
            <summary>
            Compares the two RsLoadData objects for inequality.
            </summary>
             <param name="lhs">The first object to compare.</param>
             <param name="rhs">The second object to compare.</param>
            <returns>
            <b>True</b> if <b>lhs</b> and <b>rhs</b> represent different values; otherwise, <b>false</b>.
            </returns>
            <example>Inequality.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit.GetFlange">
            <summary>
            Obsolete. Use <see cref="M:ABB.Robotics.RobotStudio.Stations.Mechanism.GetFlange(System.Int32)"/>  instead.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMechanicalUnitCollection.TryGetMechanicalUnit(System.String,ABB.Robotics.RobotStudio.Stations.RsMechanicalUnit@)">
            <summary>Gets the mechunit with the specified name.</summary>
            <param name="name">The name of the mechunit to get.</param>
            <param name="mechanicalUnit">When this method returns, contains the mechunit associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsMechanicalUnitCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction">
            <summary>
            Represents a RAPID instruction for moving the robot to a specified target in a specified manner.
            </summary>
            <remarks>
            The <see cref="P:ABB.Robotics.RobotStudio.ProjectObject.Name"/> property corresponds to the name of the RAPID instruction and should not be changed.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.String,System.String)">
            <summary>
            Creates and initializes a new RsMoveInstruction object that uses a joint position, no consideration is made regarding tool or workobject
            </summary>
            <param name="task">The task to create the Move Instruction for</param>
            <param name="processDefinitionName">The name of the process definition of the  Move Instruction</param>
            <param name="processTemplateName">The name of the process template of the  Move Instruction</param>
            <param name="jointTargetName">The name of a joint target in the station</param>
            <returns>
            The new RsMoveInstruction.
            </returns>
            <example>Create Move Instruction
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsMoveInstruction Example" lang="cs" title="Create RsMoveInstruction Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates and initializes a new RsMoveInstruction object with circular motiontype 
            </summary>
            <param name="task">The task to create the Move Instruction for</param>
            <param name="processDefinitionName">The name of the process definition of the  Move Instruction</param>
            <param name="processTemplateName">The name of the process template of the  Move Instruction</param>
            <param name="wobjName">The name of the work object of the Move Instruction</param>
            <param name="cirPointName">The name of the cir point ,i.e. the name of a RobTarget in the station, of the Move Instruction</param>
            <param name="toPointName">The name of the to point ,i.e. the name of a RobTarget in the station, of the Move Instruction</param>
            <param name="toolName">The name of the tool of the Move Instruction</param>
            <returns>
            The new RsMoveInstruction.
            </returns>
            <example>Create Move Instruction
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsMoveInstruction Example" lang="cs" title="Create RsMoveInstruction Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.String,ABB.Robotics.RobotStudio.Stations.MotionType,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the RsMoveInstruction class, which is based on the specified instruction description and template. 
            </summary>
            <param name="task">The task to create the Move Instruction for.</param>
            <param name="processDefinitionName">The name of the process definition of the Move Instruction.</param>
            <param name="processTemplateName">The name of the process template of the Move Instruction.</param>
            <param name="motionType">The <see cref="T:ABB.Robotics.RobotStudio.Stations.MotionType"/> of the Move Instruction.</param>
            <param name="wobjName">The name of the work object of the Move Instruction.</param>
            <param name="toPointName">The name of the to point ,i.e. the name of a RobTarget in the station, of the Move Instruction.</param>
            <param name="toolName">The name of the tool of the Move Instruction.</param>
            <returns>
            The new RsMoveInstruction.
            </returns>
            <example>Create Move Instruction.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create RsMoveInstruction Example" lang="cs" title="Create RsMoveInstruction Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.#ctor(ABB.Robotics.RobotStudio.Stations.RsTask,ABB.Robotics.RobotStudio.Stations.RsProcessDefinition,ABB.Robotics.RobotStudio.Stations.RsProcessTemplate,ABB.Robotics.RobotStudio.Stations.MotionType)">
            <summary>
            Used internally to create a placeholder for any type of Move Instruction.
            </summary>
            <param name="task">The task to create the Move Instruction for.</param>
            <param name="processDefinition">The process definition of the Move Instruction.</param>
            <param name="processTemplate">The template to use for this Move Instruction.</param>
            <param name="motionType">The <see cref="T:ABB.Robotics.RobotStudio.Stations.MotionType"/> of the Move Instruction.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Name">
            <summary>
            Gets or Sets the name of the Move Instruction 
            </summary>
            <example>Get/Set Name
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Color">
            <summary>
            Gets or sets the color of the path segment that this instruction corresponds to
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.ProcessDefinitionName">
            <summary>
            Gets the name of the Process Definition of the Move Instruction   
            </summary>
            <example>Get ProcessDefinitionName
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Visible">
            <summary>
            Gets or sets if the graphical representation of this instruction should be visible.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.ProcessTemplateName">
            <summary>
            Gets the name of the Process Template of the Move Instruction   
            </summary>
            <example>Get ProcessTemplateName
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Thickness">
            <summary>
            Gets or sets the thickness (in pixels) of the line, in the graphics, leading to the the Move Instruction   
            </summary>
            <example>Get Thickness
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Reachable">
            <summary>
            Gets whether the robot can reach the target(s) in the Move Instruction.
            </summary>
            <remarks>
            The value is automatically updated when instruction or target properties change.
            This property is not undoable.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.Highlight(System.Drawing.Color)">
            <summary>
            Sets a temporary color of the graphical representation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.ResetHighlight">
            <summary>
            Resets the graphical representation to the default color.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToPointArgument">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the ToPoint argument of the instruction.
            </summary>
            <returns>
            The RsInstructionArgument.
            </returns>
            <example>GetToPointArgument.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetWObjArgument">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the WObj argument of the instruction.
            </summary>
            <returns>
            The RsInstructionArgument.
            </returns>
            <example>GetWObjArgument.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetCirPointArgument">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the CirPoint argument of the instruction.
            </summary>
            <returns>
            The RsInstructionArgument.
            </returns>
            <example>GetCirPointArgument.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToJointPosArgument">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the ToJointPos argument of the instruction.
            </summary>
            <returns>
            The RsInstructionArgument.
            </returns>
            <example>GetToJointPosArgument.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToolArgument">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the to Tool argument of the instruction.
            </summary>
            <returns>
            The RsInstructionArgument.
            </returns>
            <example>GetToolArgument.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetViaPointArgument">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionArgument" /> corresponding to the to ViaPoint argument of the Move Instruction.
            </summary>
            <returns>
            The RsInstructionArgument.
            </returns>
            <example>GetViaPointArgument.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToRobTarget">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> corresponding to the ToPoint argument of the instruction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetAllRobTargets">
            <summary>
            Gets all <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/>s referenced by the instruction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToJointTarget">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsJointTarget"/> corresponding to the ToJointPos argument of the instruction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetCirRobTarget">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> corresponding to the CirPoint argument of the instruction.
            </summary>
            <returns>A <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> if there is a CirPoint argument, otherwise null.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetViaRobTarget">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> corresponding to the ViaPoint argument of the instruction.
            </summary>
            <returns>A <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> if there is a ViaPoint argument, otherwise null.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetToolData">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/> corresponding to the to Tool argument of the instruction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetWorkObject">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> corresponding to the WObj argument of the instruction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.GetProcessTemplate">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> corresponding to the to process template argument of the Move Instruction.
            </summary>
            <returns>
            The RsProcessTemplate.
            </returns>
            <example>GetProcessTemplate.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Properties Example" lang="cs" title="RsMoveInstruction Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.JumpToAsync(System.Boolean)">
            <summary>
            Jumps the mechanism, of corresponding task, to the position of the move instruction. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
            <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
            <returns>
            True if the operation is successful, otherwise false.
            </returns>
            <example><code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Movement Methods Example" lang="cs" title="RsMoveInstruction Movement Methods Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.JumpToAsync(System.Boolean,ABB.Robotics.RobotStudio.Stations.ConfigurationMode)">
            <summary>
            Jumps the mechanism, of corresponding task, to the position of the move instruction. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
            <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
            <param name="configurationMode">Specifies how the arm configuration stored in the target shall be used. In this case this method returns true
            only if the mechanism can move to the specified target with its specified arm configuration. Only valid for RsRobTargets.</param>
            <returns>
            True if the operation is successful, otherwise false.
            </returns>
            <example><code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Movement Methods Example" lang="cs" title="RsMoveInstruction Movement Methods Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.JumpTo">
            <summary>
            Jumps the mechanism, of corresponding task, to the position of the move instruction
            </summary>
            <returns>
            True if the operation is successfull, otherwise false.
            </returns>
            <example>JumpTo.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Movement Methods Example" lang="cs" title="RsMoveInstruction Movement Methods Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.MoveToAsync(System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage})">
            <summary>
            Moves the mechanism, of corresponding task, to the position of the move-
            instruction using its settings. A temporary RAPID program is created on
            the controller and is executed.
            The temporary RAPID program is created by using RapidSync. The synchronization log is returned from this overload.
            </summary>
            <param name="logMessageList">The list of log messages from the underlying RapidSync operation.</param>
            <returns>
            True if the operation succeeded, false if there was an error executing the RAPID program.
            Any other error will raise an exception.
            </returns>
            <example>MoveTo.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Movement Methods Example" lang="cs" title="RsMoveInstruction Movement Methods Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction.MoveToAsync">
            <summary>
            Moves the mechanism, of corresponding task, to the position of the move-
            instruction using its settings. A temporary RAPID program is created on
            the controller and is executed.
            </summary>
            <returns>
            True if the operation succeeded, false if there was an error executing the RAPID program.
            Any other error will raise an exception.
            </returns>
            <example>MoveTo.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstruction Movement Methods Example" lang="cs" title="RsMoveInstruction Movement Methods Example" />
            </example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription">
            <summary>
            Defines the parameters and other properties of an <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstruction"/>.
            </summary>
            <remarks>
            The <see cref="P:ABB.Robotics.RobotStudio.ProjectObject.Name"/> property corresponds to the name of the RAPID instruction.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.#ctor(System.String,ABB.Robotics.RobotStudio.Stations.MotionType,System.Boolean)">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/> object.
            </summary>
            <param name="name">The name of the corresponding RAPID instruction.</param>
            <param name="motionType">The <see cref="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.MotionType"/> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/>.</param>
            <param name="useBrush">Specifies if previous SetBrush instructions are used by the move instruction.</param>
            <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/> object.
            </returns>
            <example>Create a MoveInstructionDescription.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.#ctor(System.String,ABB.Robotics.RobotStudio.Stations.MotionType)">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/> object.
            </summary>
            <param name="name">The name of the corresponding RAPID instruction.</param>
            <param name="motionType">The <see cref="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.MotionType"/> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/>.</param>
            <returns>
            The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/> object.
            </returns>
            <example>Create a MoveInstructionDescription.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.MotionType">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.MotionType"/> of the move instruction.
            </summary>
            <example>Create a MoveInstructionDescription.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsMoveInstructionDescription Properties Example" lang="cs" title="RsMoveInstructionDescription Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription.UseBrush">
            <summary>
            Gets or sets if previous SetBrush instructions are used by the move instruction.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure">
            <summary>
            An RsPathProcedure is a sequence of move and action instructions. Paths are used to make the robot move along a sequence of targets.
            An RsPathsProcedure corresponds to a to RAPID procedure and is synchronized to the virtual controller.
            </summary>
            <example><see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.#ctor(System.String)">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/> object.
            </summary>
            <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/> to create.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/> object.</returns>
            <example>Create RsPathProcedure.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Instructions">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionCollection"/> objects.
            </summary>
            <example>Get Instructions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Name">
            <summary>
            Gets or Set the name of the PathProcedure.
            </summary>
            <example>Get/Set name.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Visible">
            <summary>
            Gets or sets a value indicating whether the RsPathProcedure will
            be displayed in the graphics
            </summary>
            <example>Get/Set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Synchronize">
            <summary>
            Gets or sets a value indicating whether the RsPathProcedure should
            be syncronized to the VC
            </summary>
            <example>Get/Set Syncronize.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.ModuleName">
            <summary>
            Gets or sets the RAPID module name that he RsPathProcedue will have 
            when its syncronized to the VC
            </summary>
            <example>Get/Set ModuleName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.ShowName">
            <summary>
            Gets or sets a value indicating whether the name of the path will
            be displayed in the graphics
            </summary>
            <example>Get/Set ShowName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.ZoneVisualization">
            <summary>
            Gets or sets how zone data for move instructions is visualized.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.ShowSpeeds">
            <summary>
            Gets or sets if speed data for instructions is visualized.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Local">
             <summary>
             Gets if the RsPathProcedue is declared local in a module. (Corresponds to the LOCAL keyword in RAPID).
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.Copy">
            <summary>
            Creates a deep copy of the RsPathProcedure
            </summary>
            <returns>The new RsPathProcedure object</returns>
            <example>Copy PathProcedure.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.MoveAlongAsync">
            <summary>
            Moves the mechanism, of corresponding task, along the path procedure by
            creating a temporary RAPID program on the controller and executing it.
            </summary>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task"/> will be marked as complete when the motion is finished.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedure.MoveAlongAsync(System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage})">
            <summary>
            Moves the mechanism, of corresponding task, along the path procedure by
            creating a temporary RAPID program on the controller and executing it.
            The temporary RAPID program is created by using RapidSync. The synchronization log is returned from this overload.
            </summary>
            <param name="logMessageList">RAPID synchronization log. Can be null.</param>
            <returns>
            True if the operation succeeded, false if there was an error executing the RAPID program.
            Any other error will raise an exception.
            </returns>
            <remarks>
            The returned <see cref="T:System.Threading.Tasks.Task"/> will be marked as complete when the motion is finished.
            </remarks>
            <example>MoveAlong Path.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Item(System.String)">
            <summary>
            Gets the named item.
            </summary>
            <example>RsPathProcedureCollection.Item().
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Contains(System.String)">
            <summary>
            Checks to see if a named item is contained by the collection.
            </summary>
            <param name="name">The name of the item to look for</param>
            <returns>
            True if the named item is a member, false otherwise
            </returns>
            <example>Contains.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.TryGetPathProcedure(System.String,ABB.Robotics.RobotStudio.Stations.RsPathProcedure@)">
            <summary>Gets the path with the specified name.</summary>
            <param name="name">The name of the path to get.</param>
            <param name="pathProcedure">When this method returns, contains the path associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsPathProcedureCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
            <example>TryGetPathProcedure.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Add(ABB.Robotics.RobotStudio.Stations.RsPathProcedure)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to the collection.
            </summary>
            <param name="pathProcedure">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to be added.</param>
            <example>Add RsPathProcedure.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsPathProcedureCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsPathProcedure)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> from the collection.
            </summary>
            <param name="pathProcedure">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to be removed.</param>
            <example>Remove RsPathProcedure.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsPathProcedure Example" lang="cs" title="RsPathProcedure Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition">
            <summary>
            A process definition is a group of 1-3 RsMoveInstructionDescriptions and
            a collection of their corresponding RsProcessTemplates.
            For instance the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> representing the 'Arc' process would
            contain references to the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" />s of 'ArcC' and 'ArcL' and their templates.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition"/> object.
            </summary>
            <param name="jointInstructionName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/>s corresponding to the joint motion.</param>
            <param name="linearInstructionName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/>s corresponding to the linear motion.</param>
            <param name="circularInstructionName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription"/>s corresponding to the circular motion.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition"/> object.</returns>
            <example>Create RsProcessDefinition.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.ProcessTemplates">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate"/> objects.
            </summary>
            <example>Get RsProcessTemplateCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.ActiveProcessTemplate">
            <summary>
            Gets or Sets the ActiveProcessTemplate.
            </summary>
            <example>Gets/Sets ActiveProcessTemplate.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition.GetMoveInstructionDescriptionName(ABB.Robotics.RobotStudio.Stations.MotionType)">
            <summary>
            Gets the name of the description name.
            </summary>
            <param name="motionType">The MotionType to find corresponding <see cref="T:ABB.Robotics.RobotStudio.Stations.RsMoveInstructionDescription" /> for.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> objects.
            </summary>
            <example>RsProcessDefinitionCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Contains(System.String)">
            <summary>
            Check to see if a named item is part of the collection.
            </summary>
            <param name="name">The name to look for.</param>
            <returns>True if the named item is part of the collection, false otherwise.</returns>
            <example>RsProcessDefinitionCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Add(ABB.Robotics.RobotStudio.Stations.RsProcessDefinition)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> to the collection.
            </summary>
            <param name="processDefinition">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> to be added.</param>
            <example>Add RsProcessDefinition.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsProcessDefinition)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> from the collection.
            </summary>
            <param name="processDefinition">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" /> to be removed.</param>
            <example>Remove <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition" />.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.Clear">
            <summary>
            Removes all items from the collection
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessDefinitionCollection.TryGetProcessDefinition(System.String,ABB.Robotics.RobotStudio.Stations.RsProcessDefinition@)">
            <summary>Gets the definition with the specified name.</summary>
            <param name="name">The name of the definition to get.</param>
            <param name="processDefinition">When this method returns, contains the definition associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsProcessDefinitionCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
            <example>TryGetProcessDefinition.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate">
            <summary>
            An <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> is an instance of a process definition.
            It contains a collection of 1-3 RsInstructionTemplates.
            The templates corresponds to the RsMoveInstructionDescriptions
            of the RsProcessDefinition that the RsProcessTemplate is a memeber of.
            </summary>
            <example>RsProcessTemplate example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.#ctor(ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate,ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate,ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate"/> object.
            </summary>
            <param name="jointInstructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate"/> corresponding to the joint motion type of the RsMoveInstructionDescription.</param>
            <param name="linearInstructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate"/> corresponding to the linear motion type of the RsMoveInstructionDescription.</param>
            <param name="circularInstructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate"/> corresponding to the circular motion type of the RsMoveInstructionDescription.</param>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate"/> object.</returns>
            <example>Create RsProcessTemplate.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.ActiveMotionType">
            <summary>
            Gets or Sets the ActiveMotionType.
            </summary>
            <example>Gets/Sets ActiveMotionType.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.GetTemplate(ABB.Robotics.RobotStudio.Stations.MotionType)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> corresponding to the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.MotionType" />.
            </summary>
            <param name="motionType">The MotionType to find corresponding template for</param>
            <returns>The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> that corresponds to the MotionType, if there is none the it returns Null.</returns>
            <example>GetTemplate.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate.SetTemplate(ABB.Robotics.RobotStudio.Stations.MotionType,ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate)">
            <summary>
            Sets the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> as corresponding to the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.MotionType" />.
            </summary>
            <param name="motionType">MotionType to associate the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> with.</param>
            <param name="instructionTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionTemplate" /> to associate with the supplied MotionType</param>
            <example>SetTemplate.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection">
            <summary>
            A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> objects.
            </summary>
            <example>RsProcessTemplateCollection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.Add(ABB.Robotics.RobotStudio.Stations.RsProcessTemplate)">
            <summary>
            Adds a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> to the collection.
            </summary>
            <param name="processTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> to be added.</param>
            <example>Add RsProcessTemplate.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsProcessTemplate)">
            <summary>
            Removes a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> from the collection.
            </summary>
            <param name="processTemplate">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessTemplate" /> to be removed.</param>
            <example>Remove RsProcessTemplate.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsProcessDefinition Example" lang="cs" title="RsProcessDefinition Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsProcessTemplateCollection.TryGetProcessTemplate(System.String,ABB.Robotics.RobotStudio.Stations.RsProcessTemplate@)">
            <summary>Gets the template with the specified name.</summary>
            <param name="name">The name of the template to get.</param>
            <param name="processTemplate">When this method returns, contains the template associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsProcessTemplateCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget">
            <summary>
            A RsRobTarget corresponds to a <c>robtarget</c> declaration in RAPID.
            A <c>robtarget</c> is used to define the position of a robot and external axes.
            </summary>
            <example>RsRobTarget Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsRobTarget Example" lang="cs" title="RsRobTarget Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.#ctor">
            <summary>
            Creates and initializes a new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> object.
            </summary>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> object.</returns>
            <example>Create RsRobTarget.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsRobTarget Example" lang="cs" title="RsRobTarget Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.Frame">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform"/> that defines the position of the robtarget relative to a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/>.
            </summary>
            <example>Get Frame.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsRobTarget Example" lang="cs" title="RsRobTarget Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.ConfigurationData">
            <summary>
            Gets or sets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.ConfigurationData"/> of the robtarget.
            </summary>
            <example>Get/Set ConfigurationData.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsRobTarget Example" lang="cs" title="RsRobTarget Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.SetConfiguration(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the configuration values of the robtarget.
            </summary>
            <param name="cf1"></param>
            <param name="cf4"></param>
            <param name="cf6"></param>
            <param name="cfx"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.SetExternalAxisValue(System.Int32,System.Double)">
            <summary>
            Sets a single external axis value of the robtarget in RAPID units.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.ConfigurationStatus">
            <summary>
            Gets or sets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.ConfigurationStatus"/> of the robtarget.
            </summary>
            <example>Get/Set ConfigurationStatus.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsRobTarget Example" lang="cs" title="RsRobTarget Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.IsInline">
            <summary>
            Gets or sets whether the robtarget will be decalared inline in the RAPID when synchronized.
            </summary>
            <example>Get/Set IsInline.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsRobTarget Example" lang="cs" title="RsRobTarget Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.GetExternalAxes(System.Boolean)">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the robtarget.
            </summary>
            <param name="convertFromRapidDataToSI">Specifies whether the ExternalAxisValues should be converted from the RAPID data format to SI or not.</param>
            <returns>
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the robtarget.
            </returns>
            <remark>The robtarget must belong to a controller if convertFromRapidDataTOSI is set to true.</remark>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsRobTarget.SetExternalAxes(ABB.Robotics.RobotStudio.Stations.ExternalAxisValues,System.Boolean)">
            <summary>
            Sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> of the robtarget.
            </summary>
            <param name="value">The <see cref="T:ABB.Robotics.RobotStudio.Stations.ExternalAxisValues" /> to be set for the robtarget.</param>
            <param name="convertFromSIToRapidData">Specifies whether the ExternalAxisValues should be converted from the SI to RAPID data format or not.</param>
            <remark>The robtarget must belong to a controller if convertSIToRapidData is set to true.</remark>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsTarget">
            <summary>
            Defines a target position by the combination of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> and a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.#ctor(ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsRobTarget)">
            <summary>
            Initializes a new instance of the RsTarget class.
            </summary>
            <param name="workObject">Workobject data declaration.</param>
            <param name="robTarget">Robtarget data declaration</param>
            <example>Create a target.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create Target Example" lang="cs" title="Create Target Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.WorkObject">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> associated with the target.
            </summary>
            <example>Get/Set WorkObject.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.RobTarget">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget"/> associated with the target.
            </summary>
            <example>Get/Set RobTarget.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Visible">
            <summary>
            Gets or sets whether a target frame is visible in the graphics.
            </summary>
            <example>Get/Set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Color">
            <summary>
            Gets or sets the color of the graphical target frame.
            Color.Empty means the target is color-coded in red/green/blue.
            </summary>
            <example>Get/Set Color.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.FrameSize">
            <summary>
            Gets or sets the size of the graphical target frame.
            </summary>
            <example>Get/Set FrameSize.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Name">
            <summary>
            Gets or sets the name of the object
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Transform">
            <summary>
            Gets a <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Transform"/> that specifies the position of the target.
            </summary>
            <remarks>
            The local <see cref="P:ABB.Robotics.RobotStudio.Stations.Transform.Matrix"/> is relative to the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTarget.WorkObject"/>.
            Changing the transform will change the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsRobTarget.Frame"/> of the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTarget.RobTarget"/>.
            </remarks>
            <example>Get Transform.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ReferenceFrame">
            <summary>
            Gets a <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTarget.Transform"/> that represents a user-defined reference frame for the target.
            </summary>
            <remarks>
            The local <see cref="P:ABB.Robotics.RobotStudio.Stations.Transform.Matrix"/> is relative to the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTarget.WorkObject"/>.
            </remarks>
            <example>Get ReferenceFrame.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ShowReferenceFrame">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ReferenceFrame"/> will be displayed in the graphics
            </summary>
            <example>Get/Set ShowReferenceFrame.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ShowName">
            <summary>
            Gets or sets whether the name of the target will be displayed in the graphics
            </summary>
            <example>Get/Set ShowName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTarget.ApproachVector">
            <summary>
            Gets or sets an <see cref="T:ABB.Robotics.RobotStudio.Stations.AxisDirection"/> that represents an approach vector for this target.
            </summary>
            <example>Get ApproachVector.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" />
            </example>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.RsTarget.WorkObjectChanged">
            <summary>
            Raised when the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTarget.WorkObject"/> property changes.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.Copy">
            <summary>
            Creates a deep copy of the target, with the same workobject and robtarget
            </summary>
            <example>Copy Target.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Copy Target Example" lang="cs" title="Copy Target Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData,ABB.Robotics.RobotStudio.Stations.ConfigurationData,System.Boolean)">
            <summary>
            Tries to jump the tool and the attached robot to the target with specified configuration, ignoring the configuration already defined on the target.
            </summary>
            <param name="tool">The tool data to perform the jump with</param>
            <param name="configuration">The suggested configuration to be used instead of the defined one.</param>
            <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
            <remarks>In order to be able to jump to a target there has to be a tool in the station. You also have to make sure the VC is running.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpToAsync(ABB.Robotics.RobotStudio.Stations.RsToolData,ABB.Robotics.RobotStudio.Stations.ConfigurationData,System.Boolean)">
            <summary>
            Tries to jump the tool and the attached robot to the target with specified configuration, ignoring the configuration already defined.
            </summary>
            <param name="tool">The tool data to perform the jump with</param>
            <param name="configuration">The suggested configuration to be used instead of the defined one.</param>
            <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
            <remarks>In order to be able to jump to a target there has to be a tool in the station. You also have to make sure the VC is running.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData,ABB.Robotics.RobotStudio.Stations.ConfigurationData)">
            <summary>
            Jumps the tool and the attached robot to the target with specified configuration. Completely ignores the configuration already defined.
            </summary>
            <param name="tool">The tool data to perform the jump with</param>
            <param name="configuration">The suggested configuration to be used instead of the defined one.</param>
            <remarks>In order to be able to jump to a target there has to be a tool in the station. You also have to make sure the VC is running.</remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean)">
            <summary>
            Jumps the tool and the attached robot to the target. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
            <param name="tool">The tool data to perform the jump with</param>
            <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
            <remarks>In order to be able to jump to a target there has to be a tool in the station. You also have to make sure the VC is running.</remarks>
            <example>JumpTo Target.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Jump To Target Example" lang="cs" title="Jump To Target Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpToAsync(ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean)">
            <summary>
            Jumps the tool and the attached robot to the target. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
            <param name="tool">The tool data to perform the jump with</param>
            <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
            <returns></returns>
            <example>JumpTo Target.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Jump To Target Example" lang="cs" title="Jump To Target Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpToAsync(ABB.Robotics.RobotStudio.Stations.RsToolData,System.Boolean,ABB.Robotics.RobotStudio.Stations.ConfigurationMode)">
            <summary>
            Jumps the tool and the attached robot to the target. Optionally updates the joint values in the virtual controller. Updating the joint values in the controller is time consuning compared to only updating the <see cref="T:ABB.Robotics.RobotStudio.Stations.Mechanism" /> joint value. If you need to frequently call this method, it is recomended to update the joint values in the controller, only for the last call.
            </summary>
            <param name="tool">The tool data to perform the jump with</param>
            <param name="updateController">Specifies if the joint values in the controller shall be updated in addition to the joint values of the mechanism.</param>
            <param name="cfgMode">Specifies how the arm configuration stored in the target shall be used. In this case this method returns true
            only if the mechanism can move to the specified target with its specified arm configuration.</param>
            <returns></returns>
            <example>JumpTo Target.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Jump To Target Example" lang="cs" title="Jump To Target Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.JumpTo(ABB.Robotics.RobotStudio.Stations.RsToolData)">
            <summary>
            Jumps the tool and the attached robot to the target.
            </summary>
            <param name="tool">The tool data to perform the jump with</param>
            <remarks>In order to be able to jump to a target there has to be a tool in the station. You also have to make sure the VC is running.</remarks>
            <example>JumpTo Target.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Jump To Target Example" lang="cs" title="Jump To Target Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.Highlight(System.Drawing.Color)">
            <summary>
            Sets a temporary color of the graphical frame.
            </summary>
            <param name="color">The color that should be used to highlight the frame</param>
            <example>Target Highlight.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.Highlight">
            <summary>
            Highlights the graphical frame in the default selection color.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTarget.ResetHighlight">
            <summary>
            Resets the graphical frame to the default color.
            </summary>
            <example>Reset Target Highlight.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" /></example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsTargetCollection">
            <summary>
            A collection of RsTargets.
            </summary>
            <example>Target Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Copy Target Example" lang="cs" title="Copy Target Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Add(ABB.Robotics.RobotStudio.Stations.RsTarget,ABB.Robotics.RobotStudio.Stations.RsTarget)">
            <summary>
            Add a target to a task.
            </summary>
            <param name="target">The target to be added.</param>
            <param name="afterThisTarget">The afterThisTarget that target should be added after.
            If this null, target is added before the first target.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.Exception">Object must be removed from it's current parent first.</exception>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Add(ABB.Robotics.RobotStudio.Stations.RsTarget)">
            <summary>
            Add a target to a task.
            </summary>
            <param name="target">The target to be added.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.Exception">Object must be removed from it's current parent first.</exception>
            <example>Add a target to a task.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Create Target Example" lang="cs" title="Create Target Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTargetCollection.Remove(ABB.Robotics.RobotStudio.Stations.RsTarget)">
            <summary>
            Removes a target to from a task.
            </summary>
            <param name="target">The target to be removed.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <example>Remove a target to a task.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Target Properties Example" lang="cs" title="Target Properties Example" /></example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.MechanismMovingTaskFrame">
            <summary>
            ABB internal use
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Name">
            <summary>
            Gets or sets the name of the Task.
            </summary>
            <example>Get/Set Name.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Parent">
            <summary>
            The Parent property returns a reference to the parent RsIrc5Controller object.
            </summary>
            <remarks>
            You can use the Parent property to navigate up from the current object to
            the object one level higher.
            </remarks>
            <example>Get Parent.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.IsMotionTask">
            <summary>
            Returns true if this is a motion task.
            </summary>
            <remarks>
            Non-motion task objects are only used to control simulation of the corresponding
            task in the controller. Only use the Simulate and EntryPoint properties on such objects.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.DataDeclarations">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration"/> objects.
            </summary>
            <example>Get DataDeclarations.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.PathProcedures">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/> objects in this task.
            </summary>
            <example>Get PathProcedures.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Targets">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget"/> objects in this task.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveTool">
            <summary>
            Gets or sets the active <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/>.
            </summary>
            <remarks>
            The active tool is used when creating new instructions and for other operations in the GUI.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveWorkObject">
            <summary>
            Gets or sets the active <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/>.
            </summary>
            <remarks>
            The active workobject is used when creating new instructions and for other operations in the GUI.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.InstructionDescriptions">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsInstructionDescription"/> objects in this task.
            </summary>
            <example>Get InstructionDescriptions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ProcessDefinitions">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition"/> objects in this task.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Mechanism">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.Mechanism"/> that corresponds to this task.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActivePathProcedure">
            <summary>
            Gets or sets the active <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure"/>.
            </summary>
            <remarks>
            The active path is used when adding new instructions, and for other operations in the GUI.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveProcessDefinition">
            <summary>
            Gets or sets the active <see cref="T:ABB.Robotics.RobotStudio.Stations.RsProcessDefinition"/>, which is used when creating new instructions.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.EntryPoint">
            <summary>
            Gets or sets the entry point for this task in the active <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.SimulationConfiguration"/>.
            </summary>
            <remarks>
            This property is a shortcut to <see cref="P:ABB.Robotics.RobotStudio.Stations.TaskSimulationConfiguration.EntryPoint"/> in the active <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.SimulationConfiguration"/>.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Visible">
            <summary>
            Gets or sets if the graphical objects in ths task (paths and frames) are visible in the graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.Frame">
            <summary>
            Gets the task frame in global coordinates.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.RsTask.RapidSynchronized">
            <summary>
            Occurs when RAPID synchronization is finished. This event is raised from the methods
            <see cref="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncPathProcedure(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.ArrayList,ABB.Robotics.RobotStudio.ProgressNotification,System.Double,System.Double)" /> and <see cref="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncData(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage})" />.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.RsTask.ActivePathProcedureChanged">
            <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActivePathProcedure" /> property has changed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveToolChanged">
            <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveTool" /> property has changed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveWorkObjectChanged">
            <summary>
            Occurs when the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsTask.ActiveWorkObject" /> property has changed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidCharacter(System.Char)">
            <summary>
            Checks if the specified character is valid in a RAPID name, according to RAPID syntax.
            </summary>
            <param name="character">Character to check for validity.</param>
            <returns>
            true/false for a valid/non-valid RAPID character.
            </returns>
            <example>IsValidRapidCharacter.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidName(System.String)">
            <summary>
            Checks if the specified string is a valid RAPID name, according to RAPID syntax.
            </summary>
            <param name="name">Name to check for validity.</param>
            <returns>
            true/false for a valid/non-valid RAPID name.
            </returns>
            <example>IsValidRapidName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidNameInTaskScope(System.String,System.String)">
            <summary>
            Checks if the specified string is a valid RAPID name in the RsTask scope.
            </summary>
            <param name="name">Name to check for validity.</param>
            <param name="moduleName">Name of module in which to check.</param>
            <returns>
            true/false for a valid/non-valid RAPID name.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidNameInTaskScope(System.String)">
            <summary>
            Checks if the specified string is a valid RAPID name in the RsTask scope.
            </summary>
            <param name="name">Name to check for validity.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.IsValidRapidNameInModuleScope(System.String,System.String)">
            <summary>
            Checks if the specified string is a valid RAPID name in the specified module scope.
            </summary>
            <param name="moduleName">Name of module in which to check.</param>
            <param name="name">Name to check for validity.</param>
            <returns>
            true/false for a valid/non-valid RAPID name.
            </returns>
            <example>IsValidRapidNameInModuleScope.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindDataDeclarationsByType(System.String)">
            <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration"/>s matching the supplied RAPID data type.
            </summary>
            <param name="type">
            "robtarget", "jointtarget", "wobjdata", "tooldata" or data type of generics.
            See <see cref="P:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration.DataType"/>.
            </param>
            <returns>An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration"/>s matching the supplied type.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindDataDeclarationsByType(System.Type)">
            <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" />s matching the supplied object type.
            </summary>
            <param name="type">The <b>Type</b> of objects to find.</param>
            <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration"/>s matching the supplied type.
            </returns>
            <example>FindDataDeclarationsByType.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargetsByWorkObject(System.String)">
            <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </summary>
            <param name="workObjectName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
            <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied name.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargetsByWorkObject(ABB.Robotics.RobotStudio.Stations.RsWorkObject)">
            <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </summary>
            <param name="workObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
            <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </returns>
            <example>FindTargetsByWorkObject.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargetsByRobTarget(System.String)">
            <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for the supplied name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </summary>
            <param name="robTargetName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for.</param>
            <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied name.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargetsByRobTarget(ABB.Robotics.RobotStudio.Stations.RsRobTarget)">
            <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </summary>
            <param name="robTarget">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
            <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </returns>
            <example>FindTargetsByRobTarget.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargets(ABB.Robotics.RobotStudio.Stations.RsWorkObject,ABB.Robotics.RobotStudio.Stations.RsRobTarget)">
            <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> and <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </summary>
            <param name="workObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
            <param name="robTarget">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
            <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s matching the supplied names.
            </returns>
            <example>FindTargets.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindTargets(System.String,System.String)">
            <summary>
            Finds the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for the supplied name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> and the name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" />.
            </summary>
            <param name="workObjectName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
            <param name="robTargetName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsRobTarget" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s for.</param>
            <returns>
            An array containing the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" />s matching the supplied names.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindFirstTargetByWorkObject(ABB.Robotics.RobotStudio.Stations.RsWorkObject)">
            <summary>
            Finds the first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for the supplied <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </summary>
            <param name="workObject">The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for.</param>
            <returns>
            The first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> matching the supplied work objects.
            </returns>
            <example>FindFirstTargetByWorkObject.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindFirstTargetByWorkObject(System.String)">
            <summary>
            Finds the first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for the supplied name of a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" />.
            </summary>
            <param name="workObjectName">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for.</param>
            <returns>
            The first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> matching the supplied names.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindFirstDataDeclarationByType(System.Type)">
            <summary>
            Finds the first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> methcing the supplied <see cref="T:System.Type" />.
            </summary>
            <param name="type">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject" /> to find <see cref="T:ABB.Robotics.RobotStudio.Stations.RsTarget" /> for.</param>
            <returns>
            The first <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> matching the supplied type.
            </returns>
            <example>FindFirstDataDeclarationByType.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindDataDeclarationFromModuleScope(System.String,System.String)">
            <summary>
            Find the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> from the specified module scope.
            </summary>
            <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> to find.</param>
            <param name="moduleName">The name of the module, which look from.</param>
            <returns><see cref="T:ABB.Robotics.RobotStudio.Stations.RsDataDeclaration" /> if find, othererwise null.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.FindPathProcedureFromModuleScope(System.String,System.String)">
            <summary>
            Find the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> from the specified module scope.
            </summary>
            <param name="name">The name of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> to find.</param>
            <param name="moduleName">The name of the module, which look from.</param>
            <returns><see cref="T:ABB.Robotics.RobotStudio.Stations.RsPathProcedure" /> if find, othererwise null.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.ImportProcessDefinitions(System.String)">
            <summary>
            Imports Process Definitions from the supplied xml file.
            </summary>
            <param name="xmlFileName">The file name of the xml file to import Process Definitions from.</param>
            <example>ImportProcessDefinitions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.ImportProcessDefinitions(System.String,ABB.Robotics.RobotStudio.CollectionConflictPolicy)">
            <summary>
            Imports Process Definitions from the supplied xml file.
            </summary>
            <param name="xmlFileName">The file name of the xml file to import Process Definitions from.</param>
            <param name="policy">Specifies what to do if a Process Definition with the same name already exists in the task.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.ImportProcessDefinitions(System.Xml.XmlReader)">
            <summary>
            Imports Process Definitions from the supplied <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="xmlReader">The <b>XmlReader</b> to import Process Definitions from.</param>
            <example>ImportProcessDefinitions.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.ImportProcessDefinitions(System.Xml.XmlReader,ABB.Robotics.RobotStudio.CollectionConflictPolicy)">
            <summary>
            Imports Process Definitions from the supplied <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="xmlReader">The <b>XmlReader</b> to import Process Definitions from.</param>
            <param name="policy">Specifies what to do if a Process Definition with the same name already exists in the task.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncToControllerAsync(System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage},ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Synchronizes all PathProcedures and DataDeclarations that have the Synchronize flag set.
            </summary>
            <param name="logMessageList">A list that will contain the log messages after method has returned.</param>
            <param name="progressDelegate">A delegate that will handle the progeress notifications.</param>
            <returns>
            True if the operation succeded, false otherwise.
            </returns>
            <example>SyncToController.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncDataAsync(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage})">
            <summary>
            Synchronizes the specified DataDeclaration to or from the controller/file.
            </summary>
            <param name="dataId">The dataId consists of two parts, the module name and the DataDeclaration name seperated by a <i>slash</i>
            or the dataId consists of a file description, as follows appearance 'file://full-path/dataDeclaration-name'.</param>
            <param name="direction">Specified the synchronization direction, to or from the VC.</param>
            <param name="logMessageList">A list that will contain the log messages after method has returned.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <example>SyncData.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" />
            </example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncPathProcedureAsync(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage},ABB.Robotics.RobotStudio.ProgressNotification,System.Double,System.Double)">
            <summary>
            Synchronizes a RsPathProcedure in the station with a RAPID procedure in the controller.
            The controller or the station is the master.
            </summary>
            <param name="pathProcedureId">The pathProcedureId consists of two parts, the module name and the PathProcedure name separated by a <i>slash</i>.</param>
            <param name="direction">Specified the synchronization direction, to or from the controller.</param>
            <param name="logMessageList">A list that will contain the log messages after method has returned.</param>
            <param name="progressDelegate">A delegate that will handle the progress notifications.</param>
            <param name="progressStart">Defines the start value sent to the progress delegate.</param>
            <param name="progressEnd">Defines the end value sent to the progress delegate.</param>
            <returns>
            True if the operation succeded, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <example>SyncPathProcedure.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SyncPathProcedureAsync(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage})">
            <summary>
            Synchronizes a RsPathProcedure in the station with a RAPID procedure in the controller.
            The controller or the station is the master.
            </summary>
            <param name="pathProcedureId">The pathProcedureId consists of two parts, the module name and the PathProcedure name separated by a <i>slash</i>.</param>
            <param name="direction">Specified the synchronization direction, to or from the controller.</param>
            <param name="logMessageList">A list that will contain the log messages after method has returned.</param>
            <returns>
            True if the operation succeded, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <example>SyncPathProcedure.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SynchronizeAsync(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.SyncLogMessage},ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Synchronizes multiple paths and data as a single operation.
            </summary>
            <returns>
            True if the operation succeded, false otherwise.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.JumpHome">
            <summary>
            Sets all axes of all mechanisms in the task to their corresponding home position.
            </summary>
            <returns>
            true/false for allowed/not allowed to execute the operation.
            </returns>
            <exception cref="T:System.ArgumentException" />
            <example>JumpHome.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.GetExternalAxisJointTypes">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.JointType" />s of the external axis joints in the Task.
            </summary>
            <returns>
            An array of <see cref="T:ABB.Robotics.RobotStudio.Stations.JointType" />s values specifying the joint types of the exterenal axis joints.
            </returns>
            <example>GetExternalAxisJointTypes.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.GetExternalAxisJointValues">
            <summary>
            Gets the joint values of the external axis joints in the Task.
            </summary>
            <returns>
            An array of joint values for the exterenal axis joints.
            </returns>
            <example>GetExternalAxisJointValues.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SetExternalAxisJointValues(System.Double[],System.Boolean)">
            <summary>
            Sets the joint values of the external axis joints in the Task.  
            </summary>
            <param name="jointValues">An array specifying the joint value to be set of the external axis joints.</param>
            <param name="notify">A bool to specify if changes are notified or not.</param>
            <returns>
            True if the operation succeded, false otherwise.
            </returns>
            <example>SetExternalAxisJointValues.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SetExternalAxisJointValues(System.Double[])">
            <summary>
            Sets the joint values of the external axis joints in the Task.
            </summary>
            <param name="jointValues">An array specifying the joint value to be set of the external axis joints.</param>
            <returns>
            True if the operation succeded, false otherwise.
            </returns>
            <example>SetExternalAxisJointValues.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SetExternalAxisJointValuesInternal(System.Double[],System.Boolean)">
            <summary>
            Sets the joint values of the external axis joints in the Task.
            </summary>
            <param name="jointValues">An array specifying the joint value to be set of the external axis joints.</param>
            <param name="notify">A bool to specify if changes are notified or not.</param>
            <returns>
            True if the operation succeded, false otherwise.
            </returns>
            <example>SetExternalAxisJointValues.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.GetValidRapidName(System.String,System.String,System.Int32)">
            <summary>
            Gets a RAPID name that is valid within the scope of the Task.
            </summary>
            <param name="baseName">The base of the name.</param>
            <param name="separator">The separator to be used between base and counter.</param>
            <param name="stepRate">The step rate to be used for the counter part of the name.</param>
            <remarks>
            This method traverses the whole Task each time it is called, and may cause performance problems for complex tasks.
            </remarks>
            <returns>
            The valid name.
            </returns>
            <example>GetValidRapidName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.RemoveUnusedDataDeclarations(System.String[])">
            <summary>
            Removes data declarations not belonging to any instruction.
            </summary>
            <param name="types">Array of declaration types to search for,
            "robtarget", "jointtarget", "wobjdata", "tooldata" and data type of generics.</param>
            <returns>An array containing the removed declarations.</returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsTask.SimulationConfiguration">
            <summary>
            Returns the active simulation configuration for this task. Will be null for dummy tasks.
            TODO: public?
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTask.SynchronizeModuleFileAsync(System.String,ABB.Robotics.RobotStudio.Stations.SyncDirection,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            ABB Internal use only.
            Synchronizes all or specified Procedures belonging to a module (specified in the file) to or from the station.
            </summary>
            <param name="filePath">The full path name to a module file.</param>
            <param name="direction">Specified the synchronization direction, to or from the station.</param>
            <param name="procedureNames">Procedure names to be synchronized or null to syncrhonize all procedures in the module.</param>
            <returns>The result of the sync operation.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RapidSyncResult">
            <summary>
            ABB Internal use only.
            Contains the results of a RAPID Sync operation
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RapidSyncResult.Success">
            <summary>
            True if all path procedures have been synchronized successfully.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RapidSyncResult.LogMessages">
            <summary>
            Collection of log messages resulting from the sync operation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RapidSyncResult.SynchronizedPathProcedures">
            <summary>
            Collection of synchronized RsPathProcedures.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsTaskCollection">
            <summary>
            A collection of RsTasks.
            </summary>
            <example>Task Collection.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsTask Example" lang="cs" title="RsTask Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsTaskCollection.TryGetTask(System.String,ABB.Robotics.RobotStudio.Stations.RsTask@)">
            <summary>Gets the task with the specified name.</summary>
            <param name="name">The name of the task to get.</param>
            <param name="task">When this method returns, contains the path associated with the specified name,
            if the name is found; otherwise, null.</param>
            <returns>true if the RsTaskCollection contains an element with the specified name; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">name is a null reference.</exception>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsToolData">
            <summary>
            Tooldata is used to describe the characteristics of a tool.
            It corresponds to the 'tooldata' data type in RAPID.
            </summary>
            <example>Create RsToolData.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsToolData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/> class.
            </summary>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData"/> object.</returns>
            <example>Create RsToolData.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.Frame">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform"/> that corresponds to the TCP of the tool.
            </summary>
            <example>Get Frame.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.RobotHold">
            <summary>
             Gets or sets a values specifying whether or not the robot is holding the tool:
             True if the robot is holding the tool, false otherwise.
            </summary>
             <example>Get/Set RobotHold.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
             </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.LoadData">
            <summary>
             Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsLoadData"/> of the tool.
            </summary>
             <example>Get/Set LoadData.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
             </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.Visible">
            <summary>
            Gets or set whether the TCP frame should be displayed in the graphics.
            </summary>
            <example>Get/Set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.FrameSize">
            <summary>
            Gets or set the size of the graphical representation of the TCP frame.
            </summary>
            <example>Get/Set FrameSize.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.Name">
            <summary>
            Gets or sets the name of the object
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsToolData.ShowName">
            <summary>
            Gets or sets whether the name of the tooldata will be displayed in the graphics.
            </summary>
            <example>Get/Set ShowName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsToolData Example" lang="cs" title="RsToolData Example" />
            </example>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject">
            <summary>
            A workobject is a coordinate system used to describe the position of a work piece.
            The workobject consists of two frames: a user frame and an object frame.
            All programed positions will be related to the object frame, which is related to the user frame,
            which is related to the world coordinate system.
            It corresponds to the 'workobject' data type in RAPID.
            </summary>
            <example>RsWorkObject Example.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" /></example>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.RsWorkObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> class.
            </summary>
            <returns>The new <see cref="T:ABB.Robotics.RobotStudio.Stations.RsWorkObject"/> object.</returns>
            <example>Create RsWorkObject.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.ObjectFrame">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform"/> that corresponds to the object frame of the work object.
            </summary>
            <example>Get ObjectFrame.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrame">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform"/> that corresponds to the user frame of the work object.
            </summary>
            <example>Get UserFrame.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrameProgrammed">
            <summary>
            Gets or sets a value that specifies whether or not the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrame"/> is a fixed coordinate system
            or that it is moveable, i.e. by a coordinated external axis.
            True means that the <see cref="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrame"/> is fixed and False that its is moveable.
            </summary>
            <example>Get/Set UserFrameProgrammed.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrameMechanicalUnit">
            <summary>
             Gets or sets the name of the mechanical unit with which the robot movements are coordinated. 
             Only specified in the case of movable user coordinate systems (<see cref="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.UserFrameProgrammed"/> is False).
            </summary>
             <example>Get/Set UserFrameMechanicalUnit.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
             </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.RobotHold">
            <summary>
             Gets or sets a values specifying whether or not the robot is holding the work object:
             True if the robot is holding the workobject, false otherwise.
            </summary>
             <example>Get/Set RobotHold.
             <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
             </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.Visible">
            <summary>
            Gets or sets whether the user and object frames should be displayed in the graphics.
            </summary>
            <example>Get/Set Visible.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.FrameSize">
            <summary>
            Gets or set the size of the user and object frames in the graphics.
            </summary>
            <example>Get/Set FrameSize.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.Name">
            <summary>
            Gets or sets the name of the object
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.ShowName">
            <summary>
            Gets or sets whether the name of the workobject will be displayed in the graphics
            </summary>
            <example>Get/Set ShowName.
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="RsWorkObject Example" lang="cs" title="RsWorkObject Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.RsWorkObject.GfxUserFrame">
            <summary>
            Overrides the user frame used by Gfx. Use when attachment is not suitable.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Shell">
            <summary>
            A Shell is a set of connected <see cref="T:ABB.Robotics.RobotStudio.Stations.Face">Faces</see> and <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire">Wires</see>.
            It is normally the outside of a solid body, but can also be the inside of a hollow body.<br /><img src="GeometryTopology.jpg" />
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Shell.Wires">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.WireCollection"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell"/> belongs to.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Shell.Faces">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.FaceCollection"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell"/> belongs to.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Shell.Body">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Shell.Body"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell"/> belongs to.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Shell.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>
            Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell" /> that is closest to the provided point.
            </summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ShellCollection">
            <summary>A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Shell" /> items.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration">
            <summary>
            Specifies the behavior of a simulation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.#ctor">
            <summary>
            Creates a new <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.Parent">
            <summary>
            The Parent property returns a reference to the parent Station object.
            </summary>
            <remarks>
            You can use the Parent property to navigate up from the current object to
            the object one level higher.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.SimulatedObjects">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/>s that will be simulated.
            </summary>
            <remarks>
            Objects that can be simulated include <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>, <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent"/> and <see cref="T:ABB.Robotics.RobotStudio.Stations.Conveyor"/>.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.Stopwatches">
            <summary>
            Gets a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationStopwatch"/> objects for the simulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.ControllerConfigurations">
            <summary>
            Gets a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.ControllerSimulationConfiguration"/> that specify simulation 
            configurations for individual <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/> objects.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.EventTable">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.EventTable"/> used by the simulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.VirtualTimeMode">
            <summary>
            Gets or sets the <see cref="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.VirtualTimeMode"/> that should be used for <see cref="T:ABB.Robotics.RobotStudio.Stations.RsIrc5Controller"/>s in th the simulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.InitialState">
            <summary>
            Gets or sets the name of the <see cref="T:ABB.Robotics.RobotStudio.SavedState"/> that will be loaded before the simulation is started. 
            </summary>
            <remarks>
            The name should match an item in the <see cref="P:ABB.Robotics.RobotStudio.Project.SavedStates"/> collection for the active station.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.DataRecordingEnabled">
            <summary>
            Gets or sets a value that indicates if the <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationDataRecorder"/> should be started
            when the simulation starts.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationObjCollection">
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.ActiveConfiguration">
            <summary>
            Gets or sets the <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration"/> that should be used for the next simulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.State">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationState"/> of the current simulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.Resolution">
            <summary>
            Gets or sets the desired virtual time step (in milliseconds).
            </summary>
            <remarks> Actual virtual time step may differ from the set value
            depending on controller configuration.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.SimulationSpeed">
            <summary>
            Gets or sets the desired simulation speed, defined as
            the ratio between virtual time and real time.
            </summary>
            <remarks>Actual simulation speed may be slower depending on 
            resolution and system performance.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.SimulationStepTimeout">
            <summary>
            ABB internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.FullSpeed">
            <summary>
            Gets or sets a value indicating if the simulation should run
            at maximum possible speed.
            </summary>
            <remarks>If this is true, SimulationSpeed is ignored.</remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.RecordingEnabled">
            <summary>
            ABB internal use.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.CurrentTime">
            <summary>
            Gets the current simulation time (in milliseconds).
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.ExecuteAction">
            <summary>
            Occurs when an event table action should be executed
            </summary>
            <remarks>
            Only occurs for actions that are not executed by the internal simulation engine.
            </remarks>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.EvaluateTrigger">
            <summary>
            Occurs when an event table trigger should be evaluated
            </summary>
            <remarks>
            Only occurs for actions that are not evaluated by the internal simulation engine.
            </remarks>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.Tick">
            <summary>
            Occurs when the simulation advances one tick.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.StateChanged">
            <summary>
            Occurs when the state of the simulator has changed, such as when started or stopped.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.ActiveConfigurationChanged">
            <summary>
            Raised when the ActiveConfiguration property changes. 
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.StartAsync">
            <summary>
            Starts the simulation.
            </summary>
            <remarks>
            If the <see cref="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.InitialState"/> of the <see cref="P:ABB.Robotics.RobotStudio.Stations.Simulator.ActiveConfiguration"/>
            is set to the name of a <see cref="T:ABB.Robotics.RobotStudio.SavedState"/> in the active station,
            it will be loaded automatically before simulation starts.
            If <see cref="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.DataRecordingEnabled"/> is true, the <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationDataRecorder"/> will
            be started automatically before simulation starts.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.StartAsync(System.Boolean)">
            <summary>
            Starts the simulation.
            </summary>
            <param name="paused">If true, the simulation will immediately go to paused state and will not run automatically.</param>
            <remarks>
            If the <see cref="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.InitialState"/> of the <see cref="P:ABB.Robotics.RobotStudio.Stations.Simulator.ActiveConfiguration"/>
            is set to the name of a <see cref="T:ABB.Robotics.RobotStudio.SavedState"/> in the active station,
            it will be loaded automatically before simulation starts.
            If <see cref="P:ABB.Robotics.RobotStudio.Stations.SimulationConfiguration.DataRecordingEnabled"/> is true, the <see cref="T:ABB.Robotics.RobotStudio.Stations.SimulationDataRecorder"/> will
            be started automatically before simulation starts.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.StopAsync">
            <summary>
            Stops the running simulation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.PauseAsync">
            <summary>
            Pauses the running simulation.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.StepAsync">
            <summary>
            Advances the current simulation one time step.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.ResumeAsync">
            <summary>
            Resumes the simulation if paused.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Simulator.DataRecorder">
            <summary>
            Gets the data recorder that records simulation data.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Simulator.Starting">
            <summary>
            Raised before the simulation starts, giving clients a chance to abort the start
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Simulator.WaitForState(ABB.Robotics.RobotStudio.Stations.SimulationState)">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that completes when simulation changes to a specified state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SmartComponent">
            <summary>
            Represents a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent" /> that contains <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicProperty">Properties</see>,
            <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignal">I/O Signals</see>, <see cref="T:ABB.Robotics.RobotStudio.Stations.Asset">Assets</see> and other
            <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent">GraphicComponents</see>.
            The behavior of the component is implemented by <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind">Code Behind</see>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.#ctor">
            <summary>
            Creates and initializes a new SmartComponent object.
            </summary>
            <returns>The new SmartComponent object</returns>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.GraphicComponents">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection"/> that represents all the graphic components
            in this SmartComponent object.
            </summary>
            <value>The <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponentCollection"/> that represents all the graphic components on
            this SmartComponent object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Properties">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection"/> that represents all the properties
            of this SmartComponent object.
            </summary>
            <value>The <see cref="T:ABB.Robotics.RobotStudio.Stations.DynamicPropertyCollection"/> that represents all the properties of
            this SmartComponent object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Assets">
            <summary>
            Gets an <see cref="T:ABB.Robotics.RobotStudio.Stations.AssetCollection"/> that represents all the assets
            of this SmartComponent object.
            </summary>
            <value>The <see cref="T:ABB.Robotics.RobotStudio.Stations.AssetCollection"/> that represents all the assets of
            this SmartComponent object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.CodeBehindLocation">
            <summary>
            Gets or sets the the location of the <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind"/> class associated with this component.
            </summary>
            <value>A string in the format [Type name],[Assembly name].</value>
            <seealso cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind"/>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IsBaseComponent">
            <summary>
            Returns true if this is a built-in base component.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.RoleObject">
            <summary>
            Gets or sets an object that defines the role of this SmartComponent.
            </summary>
            <value> A <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/> that must be a child of this SmartComponent. </value>
            <remarks> This property may be used in different scenarios to have the SmartComponent
            inherit certain characteristics of a child object.
            For example, attaching a SmartComponent with a Tool as RoleObject to a Robot should
            cause ToolData(s) to be created. </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Bindings">
            <summary>
            Gets an PropertyBindingCollection object that represents all the bindings
            of this SmartComponent object.
            </summary>
            <value>The <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection"/> that represents all the bindings of
            this SmartComponent object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignals">
            <summary>
            Gets an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOSignalCollection"/> that represents all the I/O signals on this
            SmartComponent object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Connections">
            <summary>
            Gets an <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection"/> that represents all the I/O connections on this
            SmartComponent object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Description">
            <summary>
            Gets a localized description for this SmartComponent object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Icon">
            <summary>
            Gets a <see cref="T:System.Drawing.Image"/> associated with this SmartComponent object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.StateCache">
            <summary> Returns a collection that can be used by code behind to cache
            state information for this SmartComponent object. </summary>
            <remarks> The cache is automatically cleared when Undo or Redo is performed. </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.CanBeSimulated">
            <summary>
            Gets or sets a value that indicates whether this SmartComponent
            object can be simulated, e.g. if the code behind implements the SimTime methods.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.LanguageOverride">
            <summary>
            Forces this component to use the specified language for resources rather than the language set in Options.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.SavedStates">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.SavedStateCollection"/> that contains saved states for this object.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignalChanged">
            <summary>
            Raised when any property except Value changes on one of the signals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignals" /> collection
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignalValueChanged">
            <summary>
            Raised when the Value property changes on one of the signals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignals" /> collection
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.PropertyChanged">
            <summary>
            Raised when any property except Value changes on one of the properties in the <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Properties" /> collection
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.PropertyValueChanged">
            <summary>
            Raised when the Value property changes on one of the properties in the <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.Properties" /> collection
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.CanAttachChild(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Test if the supplied child can be attached.
            </summary>
            <param name="child">The child to be tested.</param>
            <returns>True, if the supplied child can be attached, false otherwise</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean,ABB.Robotics.Math.Matrix4)">
            <summary>
            Attaches a child object to this SmartComponent.
            </summary>
            <param name="child">The child to be attached.</param>
            <param name="mount">Specifies whether the child should be mounted, i.e. moved, on to the location of the parent</param>
            <param name="offset">Specifies the offset matrix to be used from the attachment point.
            This is only used when mount is set to True.</param>
            <returns>True, if the attachmet succeded</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Detaches a child object from this SmartComponent.
            </summary>
            <param name="child">The child to be detached.</param>
            <returns>True, if the detachment succeded</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.InitializeCodeBehind">
            <summary>
            Initializes the associated <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind" />, if it exists.
            If this Smart Component has an associated Code Behind Assembly is necessary to call this method before a Smart Component is saved to library.
            The Code Behind assembly will be loaded, if its not already loaded, and the <see cref="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnInitialize(ABB.Robotics.RobotStudio.Stations.SmartComponent)" /> method will be called.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.GetResourceString(System.String)">
            <summary>
            Returns a localized resource string
            </summary>
            <param name="id">String id in the resource asset</param>
            <returns>Localized string, or String.Empty if the id was not found</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.GetCollectionObjects(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Returns the objects contained by a SmartComponent that represents a collection.
            </summary>
            <param name="projectObject" />
            <returns> Objects in the collection, or projectObject itself if it is not a collection </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.RaisePropertyChanged(ABB.Robotics.RobotStudio.Stations.DynamicProperty)">
            <summary>
            Raises the <see cref="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.PropertyChanged" /> event. Call this method to force update of the GUI of a property.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.RaiseIOSignalChanged(ABB.Robotics.RobotStudio.Stations.IOSignal)">
            <summary>
            Raises the <see cref="E:ABB.Robotics.RobotStudio.Stations.SmartComponent.IOSignalChanged" /> event. Call this method to force update of the GUI of a signal.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IsProtected">
            <summary>
            Gets or sets a value that indicates if the internal structure of this component should be hidden in the GUI,
            and if the component should be locked for editing.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IsEditable">
            <summary>
            Returns true if <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IsProtected"/> is false and <see cref="P:ABB.Robotics.RobotStudio.Stations.SmartComponent.IsBaseComponent"/> is false and <see cref="P:ABB.Robotics.RobotStudio.Stations.GraphicComponent.Library"/> is null.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind">
            <summary>
            Base class for code-behind that implements behavior of a <see cref="T:ABB.Robotics.RobotStudio.Stations.SmartComponent" />.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnInitialize(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
            <summary>
            Called from <see cref="M:ABB.Robotics.RobotStudio.Stations.SmartComponent.InitializeCodeBehind" />.
            </summary>
            <param name="component">Smart Component</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnLoad(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
            <summary>
            Called when the library or station containing the SmartComponent has been loaded
            </summary>
            <param name="component">Smart Component</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnLibraryReplaced(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
            <summary>
            Called if the library containing the SmartComponent has been replaced
            </summary>
            <param name="component">Smart Component</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnPropertyValueChanged(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty,System.Object)">
            <summary>
            Called when the component is added to the station
            </summary>
            <summary>
            Called when the component is removed from the station
            </summary>
            <summary>
            Called when the value of a dynamic property changes.
            </summary>
            <param name="component">Component that owns the changed property.</param>
            <param name="changedProperty">Changed property.</param>
            <param name="oldValue">Previous value of the changed property.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryPropertyValueValid(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty,System.Object)">
            <summary>
            Called to validate the value of a dynamic property with the CustomValidation attribute.
            </summary>
            <param name="component">Component that owns the changed property.</param>
            <param name="owningProperty">Property that owns the value to be validated.</param>
            <param name="newValue">Value to validate.</param>
            <returns> Result of the validation. </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryPropertyAttributeValue(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.DynamicProperty,System.String)">
            <summary>
            Called to retrieve the actual value of a property attribute with the dummy value '?'.
            </summary>
            <param name="component">Component that owns the property.</param>
            <param name="owningProperty">Property that owns the attribute.</param>
            <param name="attributeName">Name of the attribute to query.</param>
            <returns> Value of the attribute. </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnIOSignalValueChanged(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.IOSignal)">
            <summary>
            Called when the value of an I/O signal changes.
            </summary>
            <param name="component">Component that owns the changed signal.</param>
            <param name="changedSignal">Changed signal.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnSimulationStart(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
            <summary>
            Called when simulation is started.
            </summary>
            <param name="component">Simulated component.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnSimulationStop(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
            <summary>
            Called when simulation is stopped.
            </summary>
            <param name="component">Simulated component.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QuerySimulationState(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
            <summary>
            Called to determine the state of a simulated component.
            </summary>
            <param name="component">Simulated component.</param>
            <returns>Simulation state of the component.</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QuerySimulationStep(ABB.Robotics.RobotStudio.Stations.SmartComponent,System.Double)">
            <summary>
            Called to determine the duration of the next time step during simulation.
            </summary>
            <param name="component">Simulated component.</param>
            <param name="previousTime">Simulation time (in ms) for the previous step.</param>
            <returns>Returns the desired duration (in ms) of the next step, or 0 to use the default duration. </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.OnSimulationStep(ABB.Robotics.RobotStudio.Stations.SmartComponent,System.Double,System.Double)">
            <summary>
            Called when simulation steps to a new time.
            </summary>
            <param name="component">Simulated component.</param>
            <param name="simulationTime">Time (in ms) for the current simulation step.</param>
            <param name="previousTime">Time (in ms) for the previous simulation step.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryInternalConnections(ABB.Robotics.RobotStudio.Stations.SmartComponent,ABB.Robotics.RobotStudio.Stations.IOSignal)">
            <summary>
            Called to determine the output signals affected by an input signal.
            </summary>
            <param name="component">Component</param>
            <param name="input">Input signal</param>
            <returns> Returns the output signals that are directly affected by the value of the input signal. </returns>
            <remarks> This method is used to determine if an I/O connection can cause illegal cyclic behavior. </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SmartComponentCodeBehind.QueryCollection(ABB.Robotics.RobotStudio.Stations.SmartComponent)">
            <summary>
            Called to determine the objects contained by a SmartComponent that represents a collection.
            </summary>
            <param name="component"> Component </param>
            <returns> Objects in the collection, or the component itself if it is not a collection. </returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Station">
            <summary>
            The Station object is a set of objects with a spatial and/or logical relationship.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.#ctor">
            <summary>
            Creates and initiates a new Station object
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.#ctor(System.Boolean)">
            <summary>
            Creates and initiates a new Station object
            </summary>
            <param name="setAsActive">Set the new Station as Project.ActiveProject <b>if</b> Project.ActiveProject is currently null.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.GraphicComponents">
            <summary>
            Gets a GraphicComponentCollection object that represents all the graphic components
            on this Station object.
            </summary>
            <value>The GraphicComponentCollection that represents all the graphic components on
            this Station object./// </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.SimulationConfigurations">
            <summary>
            Gets a SimulationConfigurationCollection object that represents all the simulation configurations
            on this Station object.
            </summary>
            <value>The SimulationConfigurationCollection that represents all the simulation configurations on
            this Station object./// </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Name">
            <summary>
            Gets the name text of this Station object.
            </summary>
            <value>The name text of this Station object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Irc5Controllers">
            <summary>
            Gets a Irc5ControllerCollection object that represents all the simulation configurations
            on this Station object.
            </summary>
            <value>
            The SimulationConfigurationCollection that represents all the simulation configurations on
            this Station object.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Attachments">
            <summary>
            Gets a AttachmentCollection object that represents all the attachements
            on this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.CollisionSets">
            <summary>
            Gets a CollisionSetCollection object that represents all the CollisionSets
            on this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Frames">
            <summary>
            Gets a FrameCollection object that represents all the Frames
            on this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Tags">
            <summary>
            Gets a ProjectObjectTagCollection object that represents all the ProjectObjectTags
            on this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.PhysicsConstraints">
            <summary>
            Gets a PhysicsConstraintCollection object that represents all the PhysicsConstraints
            on this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.PhysicsSimulationProperties">
            <summary>
            Gets or sets global properties of the physics simulation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Annotations">
            <summary>
            Gets a AnnotationCollection object that represents all the Annotations in the station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ActiveTask">
            <summary>
            Gets the active RsTask of this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Transform">
            <summary>
            Gets the Transform of this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.UCS">
            <summary>
            Sets or returns the Transform object defining the UCS (User Coordinate System).
            The UCS is defined by setting the UCS property to an Transform object.
            </summary>
            <remarks>
            The UCS only affects the RobotStudio GUI and not the RobotStudio API. The UCS used in order to make
            manipulations in the GUI easier. So that the user can make manipulations relative to the UCS in stead
            of the WCS (World Coordinate System).
            </remarks>
            <value>The Transform object defining the UCS.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.DefaultTask">
            <summary>
            Gets the default RsTask of this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.TemporaryGraphics">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Forms.TemporaryGraphicCollection"/> that represents all the temporary graphic objects in the station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.VirtualSignals">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.VirtualSignalCollection"/> that represents all digital and analog signals in the station. The virtual signals are used together with the <see cref="T:EventManager"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Cameras">
            <summary>
            Gets a CameraCollection object that represents all the cameras
            on this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Lights">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.LightCollection"/> that contains all the light sources in the station.
            </summary>
            <remarks>
            For the light sources to be used, <see cref="P:ABB.Robotics.RobotStudio.Stations.Forms.GraphicControl.AdvancedLighting"/> must be enabled.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ClipPlanes">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.ClipPlaneCollection"/> that contains all the clip planes in the station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ParticleSystems">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.ParticleSystemCollection"/> that contains all the particle systems in the station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.PointClouds">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.PointCloudCollection"/> that contains all the point clouds in the station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Bindings">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.PropertyBindingCollection"/> that contains all the SmartComponent property bindings in the station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Connections">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.IOConnectionCollection"/> that contains all the I/O signal connections in the station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Markups">
            <summary>
            Gets a <see cref="T:ABB.Robotics.RobotStudio.Stations.MarkupCollection"/> object that contains all the markups in the station.
            on this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.Documents">
            <summary>
            Gets the collection of <see cref="T:ABB.Robotics.RobotStudio.ProjectDocument">ProjectDocuments</see> associated
            with this Station.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.IsLoading">
            <summary>
            Returns true if a station is currently being loaded, false otherwise
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ActiveStation">
            <summary>
            Gets the station that is currently active.
            </summary> 
            <value>
            The <b>Station</b> that is currently active, if any. Only one station can be active at a given time.
            </value>
            <remarks>
            This is equivalent to <code>Project.ActiveProject as Station</code>
            </remarks>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Station.IOSignalChanged">
            <summary>
            Raised whenever any property except Value changes on one of the signals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.Station.IOSignals" /> collection
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Station.IOSignalValueChanged">
            <summary>
            Raised whenever the Value property changes on one of the IOSignals in the <see cref="P:ABB.Robotics.RobotStudio.Stations.Station.IOSignals" /> collection
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Station.ActiveTaskChanged">
            <summary>
            Occurs when the <b>ActiveTask</b> property has changed.
            </summary>
        </member>
        <member name="E:ABB.Robotics.RobotStudio.Stations.Station.UCSChanged">
            <summary>
            Occurs when the <b>UCSObject</b> property has changed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Close">
            <summary>
            Closes this Station object.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.ClosingTask">
            <summary>
            Returns a Task that completes when any asynchronous operations initiated by <see cref="M:ABB.Robotics.RobotStudio.Stations.Station.Close"/> have completed.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.LoadAsync(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronous version of Station.Load
            </summary>
            <remarks>
            Calling .Wait() on the returned task will cause a deadlock. Use await instead.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,ABB.Robotics.RobotStudio.Stations.FileNotFoundNotification,System.Boolean)">
            <summary>
            Loads a station from a file.
            </summary>
            <returns>
            A Station object.
            </returns>
            <param name="fileName">The path of the station to be loaded.
            This must be an absolute path.</param>
            <param name="asReadOnly">If true, the station is loaded as read only.</param>
            <param name="progressDelegate">Callback delegate for load progress notification</param>
            <param name="fileNotFoundDelegate">Callback delegate for file not found notification</param>
            <param name="loadGeometry">If false, the station is loaded without gemoetries</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification,ABB.Robotics.RobotStudio.Stations.FileNotFoundNotification)">
            <summary>
            Loads a station from a file.
            </summary>
            <returns>
            A Station object.
            </returns>
            <param name="fileName">The path of the station to be loaded.
            This must be an absolute path.</param>
            <param name="asReadOnly">If true, the station is loaded as read only.</param>
            <param name="progressDelegate">Callback delegate for load progress notification</param>
            <param name="fileNotFoundDelegate">Callback delegate for file not found notification</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean,ABB.Robotics.RobotStudio.ProgressNotification)">
            <summary>
            Loads a station from a file.
            </summary>
            <returns>
            A Station object.
            </returns>
            <param name="fileName">The path of the station to be loaded.
            This must be an absolute path.</param>
            <param name="asReadOnly">If true, the station is loaded as read only.</param>
            <param name="progressDelegate">Callback delegate for load progress notification</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Load(System.String,System.Boolean)">
            <summary>
            Loads a station from a file.
            </summary>
            <returns>
            A Station object.
            </returns>
            <param name="fileName">The path of the station to be loaded.
            This must be an absolute path.</param>
            <param name="asReadOnly">If true, the station is loaded as read only.</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.Save">
            <summary>
            Saves the station to file.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.SaveAs(System.String)">
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
            <summary>
            Saves the station to a station file on a new location.
            </summary>
            <exception cref="T:System.ArgumentException">
            The specified file name is invalid.
            </exception>
            <remarks>
            If the station has been saved before, the old station file will remain on the file system. When <see cref="M:ABB.Robotics.RobotStudio.Stations.Station.Save" /> is called next time, the station will be saved to the new location.
            To make a copy of the station, but then continue to use the original file, use <see cref="M:ABB.Robotics.RobotStudio.Stations.Station.SaveCopyAs(System.String,System.Boolean)" />.
            <seealso cref="M:ABB.Robotics.RobotStudio.Stations.Station.SaveCopyAs(System.String,System.Boolean)" /></remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.SaveCopyAs(System.String,System.Boolean)">
            <summary>
            Saves a copy of the station to file, optionally removing CAD Geometry from the saved station.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.FindGraphicComponentsByType(System.Type)">
            <summary>
            Gets all <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/>s of a specified type in the station.
            </summary>
            <param name="type">Type that inherits from <see cref="T:ABB.Robotics.RobotStudio.Stations.GraphicComponent"/></param>
            <returns></returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.UpdateGraphics(System.Boolean)">
            <summary>
            Ensures that the graphics gets updated to reflect recent changes.
            </summary>
            <param name="forceRefresh">Forces a full and immediate refresh. Use only if absolutely needed!</param>
            <remarks>
            There is normally no need to call this function since the graphics
            are updated automatically during idle processing and simulation.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.UpdateGraphics">
            <summary>
            Ensures that the graphics gets updated to reflect recent changes.
            </summary>
            <remarks>
            There is normally no need to call this function since the graphics
            are updated automatically during idle processing and simulation.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Station.GetAllObjects">
            <summary>
            Returns an array of all ProjectObjects that are a part of this station (including the Station itself).
            For performance reasons, geometry objects (all objects below Part) are excluded.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Station.BuiltInDataRecorderSignals">
            <summary>
            Gets a <see cref="P:ABB.Robotics.RobotStudio.Stations.Station.BuiltInDataRecorderSignals"/> that gives access to the identities of the built in data recorder signals.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SweepOptions">
            <summary>
            Provides options for Body.Sweep and Body.Extrude.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.SweepOptions.#ctor">
            <summary>
            Create a new <see cref="T:ABB.Robotics.RobotStudio.Stations.SweepOptions"/> object with default settings.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SweepOptions.MakeSolid">
            <summary>
            If <b>true</b> the sweep will create a solid body. If <b>false</b> the sweep will create a sheet body.
            </summary>
            <example> Sweep Options. 
            <code source="..\ABB.Robotics.RobotStudio.Stations.Tests\DocumentExamples.cs" region="Body Extrude Example" lang="cs" title="Body Properties Example" />
            </example>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SweepOptions.Steps">
            <summary>
            Specifies to convert a circular sweep path into the specified number of linear segments.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessage">
            <summary>
            Represents a log message from the RAPIDSync system. The log message can be translated and displayed to the user, and also treated programmatically.
            The <see cref="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessage" /> contains a list of strings which should be combined with a translated message to make it complete. It can for example be the location and name of a data declaration that has been created using RAPIDSync.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SyncLogMessage.Id">
            <summary>
            Gets a code the describes the type of message.		
            </summary>
            <value>
            A value from the <see cref="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessageId"/> enumeration that describes the type of message.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SyncLogMessage.Severity">
            <summary>
            Gets the severity of the message. The severity ranges from informational to fatal error.
            </summary>
            <value>
            A value from the <see cref="T:ABB.Robotics.RobotStudio.Stations.SyncLogMessageSeverity"/> enumeration that describes the severity of the message.
            </value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.SyncLogMessage.StringArguments">
            <summary>
            Gets the string arguments of this message instance.
            </summary>
            <value>
            A collection of strings containing the arguments for this message. The number of arguments differs depending on the type of message.
            </value>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Texture">
            <summary>
            Represents a texture image that can be applied to surfaces in the 3D view
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.String,System.Drawing.Bitmap,ABB.Robotics.RobotStudio.Stations.TextureType)">
            <summary>
            Creates a texture from a Bitmap
            </summary>
            <remarks>
            The file name is only used as metadata, texture data is loaded
            from the Bitmap.
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.Drawing.Bitmap,ABB.Robotics.RobotStudio.Stations.TextureType)">
            <summary>
            Creates a texture from a Bitmap
            </summary>
            <param name="bitmap"></param>
            <param name="type"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.String,ABB.Robotics.RobotStudio.Stations.TextureType)">
            <summary>
            Creates a texture from a file
            </summary>
            <param name="fileName">Texture file, can be either an image or a video.</param>
            <param name="type"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.Drawing.Bitmap)">
            <summary>
            Creates a texture from a Bitmap
            </summary>
            <param name="bitmap"></param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor(System.String)">
            <summary>
            Creates a texture from a file
            </summary>
            <param name="fileName">Texture file, can be either an image or a video.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.#ctor">
            <summary>
            Creates an empty texture.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.NativeTexture">
            <summary>
            Internal use only.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.FileName">
            <summary>
            Gets or sets path of the bitmap file that this texture was originally created from.
            </summary>
            <remarks>
            Setting this property will not affect the actual texture image.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.TextureType">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Texture.TextureType"/> of this texture.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.DefaultEnvironmentMap">
            <summary>
            Returns a default texture suitable for simple environment mapping
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateCubeMap(System.String)">
            <summary>
            Creates a cube map texture from a single image with the six sides stacked
            horizontally
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateCubeMap(System.String[])">
            <summary>
            Creates a cube map texture from 6 individual images.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateCubeMap(System.Drawing.Bitmap[])">
            <summary>
            Creates a cube map texture from 6 individual bitmaps.
            </summary>
            <remarks>
            The order of the bitmaps are: posx, negx, posy, negy, posz, negz 
                   +y
               -x  +z  +x  -z
                   -y
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.CreateNormalMapFromHeightMap(System.String)">
            <summary>
            This method is obsolete. RobotStudio will automatically detect grayscale images and treat them as height maps
            if TextureType is set to NormalMap when creating new Textures.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.GetAllTextures">
            <summary>
            Returns an array containing all textures that are currently in memory.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.SetImage(System.Drawing.Bitmap)">
            <summary>
            Replaces the texture image with a new one
            </summary>
            <remarks>
            The new image must have the same width and height as the original!
            </remarks>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Texture.GetImage">
            <summary>
            Returns the texture as a Bitmap, if supported. Otherwise null is returned.
            </summary>
            <remarks>
            Only non-DDS 2D textures are supported. 
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.Size">
            <summary>
            Returns the size (in pixels) of the texture image
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Texture.IsCubeMap">
            <summary>
            Returns true if this texture is a cube map.
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.TickEventArgs">
            <summary>
            Provides data for the <see cref="E:ABB.Robotics.RobotStudio.Stations.Simulator.Tick"/> event
            </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ToolDataInfo">
            <summary>
            Represents the geometric information about a modeled tool. When modeling a mechanism it is possible
            to define information that can be used to create a <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" /> object. The tooldata is
            RobotStudios representation of the RAPID <b>tooldata</b> data type. The <see cref="T:ABB.Robotics.RobotStudio.Stations.RsToolData" /> contains
            information that is only relevant in the context of a RAPID program. For this reason all the inforamtion
            of a tooldata is not relvant to define when modeling a mechanism.
            </summary><seealso cref="T:ABB.Robotics.RobotStudio.Stations.MechanismBuilder" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.GetFrame">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.Stations.Frame" /> that is associated with the <see cref="T:ABB.Robotics.RobotStudio.Stations.ToolDataInfo" />.
            This frame always has the same name as the tooldata info.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.Attach(ABB.Robotics.RobotStudio.Stations.IAttachableChild,System.Boolean)">
            <summary>
            Attaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to the link of this flange.
            Please refer to the documentation of <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details about attaching objects to each other.
            </summary>
            <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to attach to the link of this flange.</param>
            <param name="mount">Specifies if the position of the child shall be affected by the attachment or not. See <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details.</param>
            <returns>True if an attachment could be created, false otherwise</returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.ToolDataInfo.Detach(ABB.Robotics.RobotStudio.Stations.IAttachableChild)">
            <summary>
            Detaches the specified <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> from the link of this flange.
            Please refer to the documentation of <see cref="T:ABB.Robotics.RobotStudio.Stations.Attachment" /> for details about detaching objects.
            </summary>
            <param name="child">The <see cref="T:ABB.Robotics.RobotStudio.Stations.IAttachableChild" /> to detach from the link of this flange.</param>
            <returns>True if the child could be detached, false otherwise</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Transform">
            <summary>
            Represents the translation and orientation of a graphical <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/>.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Parent">
            <summary>
            Gets the <see cref="T:ABB.Robotics.RobotStudio.ProjectObject"/> that is the owner of this transform.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.X">
            <summary>
            Gets or sets the local translation along the X axis.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Y">
            <summary>
            Gets or sets the local translation along the Y axis.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Z">
            <summary>
            Gets or sets the local translation along the Z axis.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Translation">
            <summary>
            Gets or sets the local translation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.RX">
            <summary>
            Gets or sets the local rotation around the X axis.
            </summary>
            <remarks>
            Uses the Euler ZYX convention.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.RY">
            <summary>
            Gets or sets the local rotation around the Y axis.
            </summary>
            <remarks>
            Uses the Euler ZYX convention.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.RZ">
            <summary>
            Gets or sets the local rotation around the Z axis.
            </summary>
            <remarks>
            Uses the Euler ZYX convention.
            </remarks>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.Matrix">
            <summary>
            Gets or sets the local translation and orientation.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Transform.GlobalMatrix">
            <summary>
            Gets or sets the translation and orientation in global coordinates.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Transform.GetRelativeTransform(ABB.Robotics.RobotStudio.Stations.Transform)">
            <summary>
            Gets a <see cref="T:ABB.Robotics.Math.Matrix4"/> that converts from this <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform"/> to a reference <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform"/>.
            </summary>
            <param name="relativeTo">Reference <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform"/>.</param>
            <returns>
            A <see cref="T:ABB.Robotics.Math.Matrix4"/> that converts from this coordinate system to the coordinate system of the reference object.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Transform.GetRelativeTransform(ABB.Robotics.RobotStudio.Stations.IHasTransform)">
            <summary>
            Gets a <see cref="T:ABB.Robotics.Math.Matrix4"/> that converts from this <see cref="T:ABB.Robotics.RobotStudio.Stations.Transform"/> to a reference object.
            </summary>
            <param name="relativeTo">Reference object.</param>
            <returns>
            A <see cref="T:ABB.Robotics.Math.Matrix4"/> that converts from this coordinate system to the coordinate system of the reference object.
            </returns>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Transform.SetRelativeTransform(ABB.Robotics.Math.Matrix4,ABB.Robotics.Math.Matrix4)">
            <summary>
            Sets the position and orientation relative to a reference frame.
            </summary>
            <param name="relativeToGlobal">Reference frame in global coordinates.</param>
            <param name="matrix">Position and orientation relative to the reference frame.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Transform.SetRelativeTransform(ABB.Robotics.RobotStudio.Stations.IHasTransform,ABB.Robotics.Math.Matrix4)">
            <summary>
            Sets the position and orientation relative to another object.
            </summary>
            <param name="relativeTo">Reference object.</param>
            <param name="matrix">Position and orientation relative to the reference object.</param>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo">
            <summary>
            Contains information about the result of a property/signal value validation.
            </summary>
        </member>
        <member name="F:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.Valid">
            <summary> Represents a successful validation. </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.Success">
            <summary> Returns true if the validation succeeded and the value was valid. </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.Result">
            <summary> Returns the result of the validation. </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.ValueValidationInfo.ErrorMessage">
            <summary> Returns a string that the validation errors. </summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Vertex">
            <summary>A Vertex refers to a point in object space, and is the corner of either a <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" /> or a <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" />.<br /><img src="GeometryTopology.jpg" /></summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Vertex.Body">
            <summary>
            Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Vertex.Body"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex"/> belongs to.
            </summary>
            <value>The <see cref="P:ABB.Robotics.RobotStudio.Stations.Vertex.Body"/> object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Vertex.Position">
            <summary>
            Gets the position of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex"/>.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Vertex.GetEdges">
            <summary>
            Returns an array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> objects that are connected by this <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.
            </summary>
            <value>The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> objects.</value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Vertex.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> that is closest to the provided point.</summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
            <remarks>This method always returns the provided point, since it is closest to itself.</remarks>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.Wire">
            <summary>A wire is a collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />s that are connected to each other, without being attached to a <see cref="T:ABB.Robotics.RobotStudio.Stations.Face" />.<br /><img src="GeometryTopology.jpg" /></summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Visible">
            <summary>Gets or sets if the <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire"/> is visible or not in the graphics.</summary>
            <value><b>True</b> if this object is visible; otherwise <b>false</b>.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Color">
            <summary>
            Gets or sets color of the wire in the graphics.
            </summary>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Body">
            <summary>Gets the <see cref="P:ABB.Robotics.RobotStudio.Stations.Wire.Body"/> that the <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire"/> belongs to.</summary>
            <value>The <see cref="P:ABB.Robotics.RobotStudio.Stations.Wire.Body"/> object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Closed">
            <summary>Returns true if the wire is closed, else false.</summary>
            <value>The <b>Boolean</b> indication.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Coedges">
            <summary>Returns a <see cref="T:ABB.Robotics.RobotStudio.Stations.CoedgeCollection" /> object containing the coedges
            of the wire.</summary>
            <value>The <see cref="T:ABB.Robotics.RobotStudio.Stations.CoedgeCollection" /> object.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.EndVertex">
            <summary>Returns the end <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</summary>
            <value>The end <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.Length">
            <summary>Returns the length of the wire.</summary>
            <value>The length of the wire.</value>
        </member>
        <member name="P:ABB.Robotics.RobotStudio.Stations.Wire.StartVertex">
            <summary>Returns the end <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</summary>
            <value>The end <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetEdges">
            <summary>Returns an array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> objects that the wire contains.
            </summary>
            <value>The array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" /> objects.</value>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetVertices">
            <summary>
            Returns an array containing the vertices of this wire.
            </summary>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetGlobalCurveIntersections(ABB.Robotics.RobotStudio.Stations.Wire[],System.Boolean)">
            <summary>Returns an array of <see cref="T:ABB.Robotics.Math.Vector3" /> elements that represent the
            intersections (as points) with supplied wires.</summary>
            <returns>An array of <see cref="T:ABB.Robotics.Math.Vector3" /> elements.</returns>
            <param name="wires">the array of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects.</param>
            <param name="withinBounds">If true, the intersections will be checked
            within the start- and endpoints of the source wire, else intersections
            will be calculated in the extent of the first- and last <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />.
            </param>
            <remarks>The first version of this method does not support checking the
            intersections in the extension of the first and last <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />. The
            value of <b>withinBounds</b> must therefore be <b>true</b>.</remarks>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetGlobalCurvesIntersections(System.Boolean)">
            <summary>Returns an array of <see cref="T:ABB.Robotics.Math.Vector3" /> elements that represent the
            intersections (as points) with supplied wires.</summary>
            <returns>An array of <see cref="T:ABB.Robotics.Math.Vector3" /> elements.</returns>
            <param name="withinBounds">If true, the intersections will be checked
            within the start- and endpoints of the source wire, else intersections
            will be calculated in the extent of the first- and last <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />.
            </param>
            <remarks>The first version of this method does not support checking the
            intersections in the extension of the first and last <see cref="T:ABB.Robotics.RobotStudio.Stations.Edge" />. The
            value of <b>withinBounds</b> must therefore be <b>true</b>.</remarks>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetLengthAtPoint(ABB.Robotics.Math.Vector3)">
            <summary>Returns the curve length from the start point of the wire to the
            supplied point on the wire.</summary>
            <returns>The curve length from start point to the supplied point.</returns>
            <param name="pointOnCurve">The point on curve to receive the length to.</param>
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.GetSection(ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3[])">
            <summary>Returns a section of the supplied wire, that is limited by two
            vertices of the wire. The edges that are contained in the section are
            returned. If test positions are supplied, the section will be limited by
            by one or two of them, if they can be found on the section and makes a
            smaller section. A section is determined as being a closed or open
            curvature that does not contain any branches - vertices that are connected
            to more than two edges must limit a section!</summary>
            <returns>The section found, or null.</returns>
            <param name="pointOnCurve">The point on curve to receive the length to.
            </param>
            <param name="testPoints">The test points.</param>
            <remarks>This version ignores <b>testPoints</b> and simply returns the
            coordinates of the vertices that limits the section.</remarks>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.IO.IOException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.ReverseDirection">
            <summary>Reverses the direction of the wire.</summary>
            <returns>A <b>Boolean</b> value of the success of the operation.</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="M:ABB.Robotics.RobotStudio.Stations.Wire.FindClosestVertex(ABB.Robotics.Math.Vector3)">
            <summary>Returns the <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" /> of the <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> that is closest to the provided point.</summary>
            <param name="testPoint">The point which to find the closest vertex to.</param>
            <returns>The closest <see cref="T:ABB.Robotics.RobotStudio.Stations.Vertex" />.</returns>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.WireCollection">
            <summary>A collection of <see cref="T:ABB.Robotics.RobotStudio.Stations.Wire" /> objects.</summary>
        </member>
        <member name="T:ABB.Robotics.RobotStudio.Stations.SimulationDataRecorder">
            <summary>
            A data recorder than can record signals from a simulation. It is synchronized with virtual time.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.GroupAttachment">
            <summary>
            Specifies that a set of objects belong togehter and shall be moved and deleted as one.
            If DisplayParent is not null, it should be shown as parent of the other objects in e.g. browsers.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.GroupAttachment.Add(ABB.Robotics.RobotStudio.ProjectObject,ABB.Robotics.Math.Matrix4)">
            <summary>
            Adds an object to the group
            </summary>
            <param name="obj"></param>
            <param name="offset">Offset relative to a common (but arbitrary) reference</param>
        </member>
        <member name="M:RobotStudio.API.Internal.ConveyorDef.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ForwardKinematicsDH.PolynomialLimits">
            <summary>
            Gets or sets a dictionary with joint index as key and a polynomial limit as value.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.ConveyorLayout">
            <summary>
            Manages entire setup of conveyor-, conveyor connection- and controller communication. 
            Manages the simulated motion of the conveyor.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ConveyorLayout.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ConveyorLayout.Conveyor">
            <summary>
            The conveyor that is controlled by this object.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ConveyorLayout.JogObjectTo(RobotStudio.API.Internal.ConveyorObject,System.Double)">
            <summary>
            Sets the travel distance of the conveyor so that the supplied conveyor object is moved 
            to the position specified by the travel offset.
            </summary>
            <param name="conveyorObject">The reference object.</param>
            <param name="travelOffset">Offset relative to the conveyor reference frame.</param>
        </member>
        <member name="M:RobotStudio.API.Internal.ConveyorObjectSource.GetObjects(System.Double,System.Double)">
            <summary>
            Gets all objects that should appear on the provided interval as well as their positions.
            </summary>
            <param name="startPosition"></param>
            <param name="endPosition"></param>
            <returns>Pairs of the GraphicComponents and their position in the interval [startPosition, endPosition[ </returns>
        </member>
        <member name="M:RobotStudio.API.Internal.ConveyorHelper.CopyAttachments(ABB.Robotics.RobotStudio.Stations.GraphicComponent,ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            Objects that are attached to the prototype are instead attached to the copy.
            </summary>
            <remarks>
            This WILL cause the same object to be attached to multiple parents, but that is handled by AttachmentHelper.
            The attachments are automatically deleted when the copy is removed (see Station.ProjectObject_InternalEvent).
            Only handles objects that are attached directly to the prototype, not to any of its descendants.
            </remarks>
        </member>
        <member name="P:RobotStudio.API.Internal.GfxData.ShowHidden">
            <summary>
            Used to override hidden state of objects
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.GfxPrimitiveHelper">
            <summary>
            Abstract base class for creating mesh primitives.
            Implemented by MeshPrimitiveHelper (Mesh API) and GfxSimpleShapeHelper (Temp Gfx etc.)
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.IVrPane">
            <summary>
            Interface for 2-dimensional VR User Interface.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.IVrPaneExtensions.GetCorners(RobotStudio.API.Internal.IVrPane)">
            <summary>
            Gets the corners of a <see cref="T:RobotStudio.API.Internal.IVrPane"/> in its local coordinate system
            </summary>
            <returns>Returned in order, top left, top right, bottom left, bottom right.
            </returns>
        </member>
        <member name="P:RobotStudio.API.Internal.RapidModel.RapidDeclaration.IsIndirect">
            <summary>
            Indicates that this is used as argument in a function (Offs, RelTool) and not directly
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.RapidModel.RapidPathDocument.GetTargetsFromSelection">
            <summary>
            Gets selected targets and targets of selected move instructions;
            </summary>
            <returns></returns>
        </member>
        <member name="P:RobotStudio.API.Internal.RapidModel.RapidMoveInstruction.Continuous">
            <summary>
            Indicates that a path should be drawn from the previons instruction's ToPoint
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.RsGfxGraphicConverter">
            <summary>
            Implementation of GraphicConverter for RobotStudio's internal .rsgfx format
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.TempGfxGroup">
            <summary>
            Convenience class to handle a set of related tempgfx objects
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.VrMenuCube">
            <summary>
            The main VR menu. Always attached to one <see cref="T:RobotStudio.API.Internal.VrController"/>.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCube.MenuPanes">
            <summary>
            The panes that belong to the cube.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCube.LeftAttachedPane">
            <summary>
            A pane that is attached to the left of the cube. Setting it will remove any previous panes.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCube.RightAttachedPane">
            <summary>
            A pane that is attached to the right of the cube. Setting it will remove any previous panes.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCube.Visible">
            <summary>
            The visiblity of the cube.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCube.Matrix">
            <summary>
            The relative transform between the controller and the cube.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCube.PaneSeparationAngle">
            <summary>
            The angle occupied by one pane.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCube.PaneCenterDistance">
            <summary>
            The distance from one pane to the center of the cube.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.VrMenuPane">
            <summary>
            A UI pane that can contain other UI controls.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.VrMenuPane.#ctor">
            <summary>
            Creates a new pane attached to the left controller.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.VrMenuPane.#ctor(RobotStudio.API.Internal.VrAttachedTo)">
            <summary>
            Creates a new pane of default size.
            </summary>
            <param name="attachedTo"></param>
        </member>
        <member name="M:RobotStudio.API.Internal.VrMenuPane.#ctor(RobotStudio.API.Internal.VrAttachedTo,System.Double,System.Double)">
            <summary>
            Creates a new pane.
            </summary>
            <param name="attachedTo">Where the pane should be attached.</param>
            <param name="width">Width of the pane.</param>
            <param name="height">Height of the pane.</param>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuPane.Items">
            <summary>
            The items that are displayed on the pane.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuPane.Width">
            <summary>
            The width of the pane.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuPane.Height">
            <summary>
            The height of the pane.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuPane.AttachedTo">
            <summary>
            Where the pane is attached.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuPane.Matrix">
            <summary>
            The transform of the pane relative to its attachment parent.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuPane.Visible">
            <summary>
            The visibility of the pane.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.VrMenuItem">
            <summary>
            ABB internal use only.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.VrMenuButton">
            <summary>
            A button on a <see cref="T:RobotStudio.API.Internal.VrMenuPane"/>.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.VrMenuButton.#ctor(System.String,System.Func{System.Boolean},System.Func{System.Boolean},System.Action)">
            <summary>
            Creates a new button.
            </summary>
            <param name="text">The text of the button.</param>
            <param name="updateChecked">A delegate that returns if the button should be checked.</param>
            <param name="updateEnabled">A delegate that returns if the button should be enabled.</param>
            <param name="execute">The action that should be executed when the button is pressed.</param>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuButton.Text">
            <summary>
            The text that is displayed on the button.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuButton.Checked">
            <summary>
            Gets if the button is checked.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuButton.Enabled">
            <summary>
            Gets if the button is enabled.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.VrMenuButton.Execute">
            <summary>
            Executes the buttons action.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.VrMenuCommandButton">
            <summary>
            A button on a <see cref="T:RobotStudio.API.Internal.VrMenuPane"/> referencing a CommandBarButton.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.VrMenuCommandButton.#ctor(System.String)">
            <summary>
            Creates a new button.
            </summary>
            <param name="commandId">The id of the CommandBarButton that should be referenced.</param>
        </member>
        <member name="M:RobotStudio.API.Internal.VrMenuCommandButton.#ctor(System.String,System.String)">
            <summary>
            Creates a new button.
            </summary>
            <param name="commandId">The id of the CommandBarButton that should be referenced.</param>
            <param name="text">The text to display on the button</param>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCommandButton.CommandId">
            <summary>
            Gets the command id of the CommandBarButton.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuCommandButton.Text">
            <summary>
            Gets the text. If null, the caption of the CommandBarControl is used.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.VrMenuInputModeButton">
            <summary>
            A button on a <see cref="T:RobotStudio.API.Internal.VrMenuPane"/> that enables an <see cref="T:RobotStudio.API.Internal.VrInputMode"/>.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.VrMenuInputModeButton.#ctor(RobotStudio.API.Internal.VrInputMode,System.String)">
            <summary>
            Creates a new button.
            </summary>
            <param name="inputMode">The input mode.</param>
            <param name="text">The text that will be displayed on the button.</param>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuInputModeButton.InputMode">
            <summary>
            Gets the input mode.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrMenuInputModeButton.Text">
            <summary>
            Gets the text.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.YumiKinematics">
            <summary>
            Pure functions adapted from RW for making kinematics calculations.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.YumiKinematics.GetMultiAxisRobotArmAngle(RobotStudio.API.Internal.YumiData,RobotStudio.API.Internal.RobotGravityParameters,System.Double[],System.Int32@,System.Double@)">
            <summary>
             GetMultiAxisRobotArmAngle -  calculates the arm angle (aka configuration angle)
             
             Given the tcp and elbow position, this function computes the arm angle. This
             angle is the angle formed between the plane defined by the shoulder, elbow and tcp
             and the plane aligned with a reference direction and passing through the shoulder
             and the tcp.
             
            
             ERROR if the position is singular with respect to the arm-angle, which happens if:
                 1) The TCP position is close to zero
                 2) The arm is fully stretched, that is, p_length is zero
                 3) The reference plane is undefined, that is, d_length is zero
                 
             The reference direction is currently hard-coded to coincide with axis 1, but itshould be CFG parameter
             that the user can decide.
             </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.MechanismExtensions.GetTrackAndOffset(ABB.Robotics.RobotStudio.Stations.Mechanism,ABB.Robotics.Math.Matrix4@)">
            <summary>
            Finds out if a mechanism (robot) is attached to another mechanism (a track)
            and returns the offset between flange and robot base.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.MechanismExtensions.GetCalibrationPositionInMechanismCoords(ABB.Robotics.RobotStudio.Stations.Mechanism,System.Int32)">
            <summary>
            Gets a calibation frame from the mechanism and transforms it to mechanism coordinates. Depends on current joint values.
            </summary>
            <param name="mechanism">A mechanism containing a calibration frame for the jointIndex.</param>
            <param name="jointIndex">The index of the joint for which to get the calibration frame.</param>
            <returns>The calibration frame in the coordinate system of the mechanism.</returns>
        </member>
        <member name="M:RobotStudio.API.Internal.MeshServices.FindFace(ABB.Robotics.RobotStudio.Stations.MeshPart,ABB.Robotics.RobotStudio.Stations.MeshBody,ABB.Robotics.RobotStudio.Stations.MeshFace,System.Int32,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Find or create a MeshFace corresponding to refFace, with room for the vertices of mf
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.MeshServices.OptimizeMesh(ABB.Robotics.RobotStudio.Stations.MeshPart,ABB.Robotics.RobotStudio.Stations.OptimizeMeshParameters,ABB.Robotics.RobotStudio.ProgressNotification,System.Double,System.Double)">
            <summary>
            Merges faces with similar properties and (optionally) merges vertices.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.PathGenerator.IsWithinMaxGapRange(RobotStudio.API.Internal.PathGenerator.PathSegment)">
            <summary>
            Checks if a segment is valid as the "next" segment to add. 
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.PathGenerator.OverlapPathSegment">
            <summary>
            Used for the extra path segments generated if start/end offset is negative to support overlaps for closed paths
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ConfigurationDistance.#ctor(ABB.Robotics.RobotStudio.Stations.ConfigurationData)">
            <summary>
            For sorting according to distance from a reference cfg.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ConfigurationDistance.#ctor">
            <summary>
            For generic sorting.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.Skeleton">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.StationsApiExtensionMethods.DefaultMesh(ABB.Robotics.RobotStudio.Stations.Part)">
            <summary>
            Gets the default MeshPart for export etc.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.StationsApiExtensionMethods.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            SequenceEqual with lambda instead of IEqualityComparer
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.StationsApiExtensionMethods.GetGraphicComponents(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Gets all child components, works for both Station and GraphicComponent. Includes Mechanism.AdditionalComponents.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.StationsApiExtensionMethods.IsLibraryChild(ABB.Robotics.RobotStudio.ProjectObject)">
            <summary>
            Returns true if the object is <b>inside</b> a library (thus should not be modified)
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.ArgumentListFormatter">
            <summary>
            Helper class for formatting the argument list string for RsInstruction.
            Used for tooltip.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ArgumentListFormatter.GetFormattedArgumentList(ABB.Robotics.RobotStudio.Stations.RsInstruction,System.String[])">
            <summary>
            Format the argument list and return a string with Rapid look syntax.
            </summary>
            <param name="instruction">The instruction</param>
            <param name="ShowDataType">optional parameter that specifies the datatypes to handle</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:RobotStudio.API.Internal.AssemblyModeler.CleanInstances(RobotStudio.API.Internal.AssemblyRoot)">
            <summary>
            Removes any instances that does not have a definition
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.BodyDefinition.EnumEntities">
            <summary>
            Enumerates over all entity-gfxid pairs, with the body first.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RobotStudio.API.Internal.CadConverter">
            <summary>
            Implementation of GraphicConverter for all file formats handled by ACIS.
            Typically instantiated and registered by the converter service (RobotStudio.Services.GraphicConverters)
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.CadConverter.FakeImport">
            <summary>
            Used by unit tests - all imports will result in empty parts (faster)
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ControllerHelper.RemoveIrc5ControllerFromStation(ABB.Robotics.RobotStudio.Stations.RsIrc5Controller)">
            <summary>
            Helper only for use by ControllerService.OnRemoveController. Use API to remove controller from station.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ControllerHelper.CreateMechUnit(ABB.Robotics.RobotStudio.Stations.RsIrc5Controller,System.String)">
            <summary>
            Creates a new RsMechanicalUnit and adds it to the controller
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.GfxProperties">
            <summary>
            Static methods for getting and setting properties like visibility and material on gfx objects
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.MechanismHelper.GetMechanicalUnitForRobot(ABB.Robotics.RobotStudio.Stations.Mechanism)">
            <summary>
            Returns the mechanical unit associated with a TCP robot mechanism.
            </summary>
            <param name="robot">A TCP robot mechanism.</param>
            <returns>The mechanical unit associated with the mechanism. The mechanical unit must be of type TCPRobot.</returns>
            <exception cref="T:System.InvalidOperationException">If a mechanism with more than one mechanical unit is supplied.</exception>
        </member>
        <member name="M:RobotStudio.API.Internal.MechanismHelper.GetMechanicalUnitsOfMode(ABB.Robotics.RobotStudio.Stations.RsTask,ABB.Robotics.RobotStudio.Stations.MechanicalUnitActivationMode)">
            <summary>
            Returns all active- or inactive mechanical units of supplied task. The user determines whether to
            return the active or inactive ones.
            </summary>
            <param name="task">The task that keeps the mechanical units.</param>
            <param name="activationMode">Determines which mechanical units to return.
            </param>
        </member>
        <member name="T:RobotStudio.API.Internal.MechanismSupport.ConfigurationSet">
            <summary>
            Set of unique configurations, ignoring joint values
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.MechanismSupport.JointValuesToCfg(ABB.Robotics.RobotStudio.Stations.Mechanism,System.Double[])">
            <summary>
            calc config
            Supported: IRB1400,1410,2400,3400,4400,4600,6400/140,6600,6650,7600/340/540,640/5400
            Not supported: IRB5404,5406/5413,5414,5423/840
            See confdata in rapid reference manual for more information
            </summary>
            <param name="mech"></param>
            <param name="jv"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.MechanismSupport.RandomJointValuesForCnf(ABB.Robotics.RobotStudio.Stations.Mechanism,System.Int32[],System.Double[]@)">
            <summary>
            Calc joint values uniformly and randomly distributed over a sub-range, rng, of the joint and
            config space (cf1/cf4/cf6). If the sub-range is set to 0 there will be no random component.
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.FreehandObjectSet">
            <summary>
            "Proxy" object for moving multiple objects simultaneously
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.GfxEvents">
            <summary>
            Static class responsible for updating the graphics
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.IRC5ControllerRoot.ActiveTask">
            <summary>
            Use by Station.ActiveTask and RAPIDData
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.RsMoveInstructionExtensions.GetSpeed(ABB.Robotics.RobotStudio.Stations.RsMoveInstruction,System.Boolean)">
            <summary>
            Tries to guess the speed of the move instruction.
            </summary>
            <param name="instr">Move instruction that is properly situated in a task.</param>
            <param name="useController">Try to get the real speed declaration from controller.</param>
            <returns>Speed(mm/s)</returns>
        </member>
        <member name="M:RobotStudio.API.Internal.StationsHelper.StationBoundingBox(RobotStudio.API.Internal.IGfxObject)">
            <summary>
            Get a bounding box containing some objects in the station.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.StationsHelper.StationVisibleBoundingBox(ABB.Robotics.RobotStudio.Stations.Station)">
            <summary>
            Get a bounding box containing all visible objects in the station.
            </summary>
            <param name="station"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.StationsHelper.CleanupAfterCloseStation">
            <summary>
            Clean up memory (ACIS mostly) after closing station from GUI
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.TaskHelper.CreateUniqueNameInTask(ABB.Robotics.RobotStudio.Stations.RsTask,System.String,System.Boolean)">
            <summary>
            Uses the supplied declaration name to determine a name unique in the scope
            of the task. If the name supplied is already used for any declaration, an
            index will help determining a new name.
            </summary>
            <returns>
            A unique declaration name if successful, empty string if not.
            </returns>
            <param name="task">The task</param>
            <param name="declarationBaseName">Name (or base of name) of the declaration.</param>
            <param name="alwaysAddIndex"> If set to true an index is added to the base name even if its not needed to make it unique.</param>
        </member>
        <member name="T:RobotStudio.API.Internal.VrEnvironment">
            <summary>
            Entry point for interaction with the Virtual Reality environment
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrEnvironment.Session">
            <summary>
            Gets the current VR session, or null if VR is not active
            </summary>
        </member>
        <member name="T:RobotStudio.API.Internal.VrSession">
            <summary>
            Represent a Virtual Reality session
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.VrSession.View">
            <summary>
            Internal ABB use only.
            </summary>
            <exlude/>
        </member>
        <member name="T:RobotStudio.API.Internal.VrController">
            <summary>
            Represents a hand-held tracked input device in a VR environment
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.WorkEnvelopeHelper.CalcRange(ABB.Robotics.RobotStudio.Stations.Mechanism,System.Nullable{ABB.Robotics.Math.Matrix4},System.Boolean)">
            <summary>
            Calculates the outline of the work envelope for j1 = 0.
            </summary>
            <param name="mech">Robot</param>
            <param name="tool">Tool frame. If null, the envelope is calculated for the center of the wrist.</param>
            <returns>List of points along the outline, in mechanism coordinates</returns>
            <param name="for3Dsweep"></param>
        </member>
        <member name="M:RobotStudio.API.Internal.WorkEnvelopeHelper.Create3DWorkEnvelope(ABB.Robotics.RobotStudio.Stations.Mechanism,System.Collections.Generic.List{ABB.Robotics.Math.Vector3})">
            <summary>
            Creates a volumetric mesh corresponding to the work envelope, by sweeping around (or extruding along) j1.
            </summary>
            <param name="mech">Robot</param>
            <param name="range">Work envelope outline from CalcRange()</param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.WorkEnvelopeHelper.Merge(System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.Body},System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Body},System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.Part})">
            <summary>
            Joins bodies int lst
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.WorkEnvelopeHelper.MaxAxis(ABB.Robotics.RobotStudio.Stations.Mechanism,ABB.Robotics.Math.Matrix4,System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calculates the jx value that gives the furthest reach for the given tool frame
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ConveyorObject.#ctor(RobotStudio.API.Persistence.PimDocument)">
            <summary>
            Only for use by persistence system.
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ConveyorObject.Position">
            <summary>
            The position relative to the zero position on the conveyor.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.ConveyorObject.AttachWorkObject(ABB.Robotics.RobotStudio.Stations.RsWorkObject)">
            <summary>
            Attaches a workobject to the conveyor object in programming/teaching mode.
            </summary>
            <param name="wobj">The workobject to be attached.</param>
            <exclude/>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiPhysicsService.MoveIndependently(ABB.Robotics.RobotStudio.Stations.GraphicComponent)">
            <summary>
            WI 21025 - Ignore constraints for this object the next time StepModelingSimulation() is run
            </summary>
        </member>
        <member name="P:RobotStudio.API.Internal.ApiServices.ThreadLock">
            <summary>
            Lock this object when accessing services from any backend thread
            (such as a finalizer) to ensure services aren't disposed.
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.IdentifyPaintableFaces(ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.Math.Vector3,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.Face}@,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.Face}@)">
            <summary>
            Identify Paintable faces on body using up vector
            </summary>
            <param name="body"></param>
            <param name="up"></param>
            <param name="paintableFaces"></param>
            <param name="nonPaintableFaces"></param>
            <returns></returns>
            TBD: This method is exposed from the spatial code for uPainting. Besides checking the normals of all faces of the input body it has some heuristics which cant really by generalised enough to fint in the public API.
            Without perforamnce considerations in mind: One approach could be to run a number of lambdas on all faces of the target body, and then expose each of the heuristics as a separate method so that the can be passed by the client.
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.CreateSheetBodyFromFaces(RobotStudio.API.Internal.GeoPart,ABB.Robotics.RobotStudio.Stations.Part,System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Face},ABB.Robotics.RobotStudio.Stations.Body@)">
            <summary>
            Create Sheet Body from Faces
            </summary>
            <param name="pPart"></param>
            <param name="pInstance"></param>
            <param name="paintableFaces"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.FireRaysAtBody(System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Ray},ABB.Robotics.RobotStudio.Stations.Body,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3}}@)">
            <summary>
            Get Number of hits by firing Rays at body 
            </summary>
            <param name="rays"></param>
            <param name="target"></param>
            <param name="hits"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.CreateWireFromPolygon(RobotStudio.API.Internal.GeoPart,ABB.Robotics.RobotStudio.Stations.Part,System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Vector3},ABB.Robotics.RobotStudio.Stations.Body@)">
            <summary>
            Create Wire from Polygon
            </summary>
            <param name="pInstance"></param>
            <param name="points"></param>
            <param name="body"></param>
            <param name="pPart"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.CreateWireByApproximation(RobotStudio.API.Internal.GeoPart,ABB.Robotics.RobotStudio.Stations.Part,System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Vector3},System.Double,ABB.Robotics.RobotStudio.Stations.Body@)">
            <summary>
            Create Wire by approximation with given tolerance 
            </summary>
            <param name="pPart"></param>
            <param name="pInstance"></param>
            <param name="points"></param>
            <param name="tol"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.CreateFenceSurfaceFromPolygon(RobotStudio.API.Internal.GeoPart,ABB.Robotics.RobotStudio.Stations.Part,System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Ray},ABB.Robotics.RobotStudio.Stations.Body,System.Double,ABB.Robotics.RobotStudio.Stations.Body@)">
            <summary>
            Create Fences Surface from rays 
            </summary>
            <param name="pPart"></param>
            <param name="pInstance"></param>
            <param name="rays"></param>
            <param name="target"></param>
            <param name="fenceHeight"></param>
            <param name="fence"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.CreateFenceSurfaceByInterpolation(RobotStudio.API.Internal.GeoPart,ABB.Robotics.RobotStudio.Stations.Part,System.Collections.Generic.IEnumerable{ABB.Robotics.Math.Ray},ABB.Robotics.RobotStudio.Stations.Body,System.Double,ABB.Robotics.RobotStudio.Stations.Body@)">
            <summary>
            Create Fences Surface from rays using interpolation
            </summary>
            <param name="pPart"></param>
            <param name="pInstance"></param>
            <param name="rays"></param>
            <param name="target"></param>
            <param name="fenceHeight"></param>
            <param name="fence"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.ImprintFence(RobotStudio.API.Internal.GeoPart,ABB.Robotics.RobotStudio.Stations.Part,ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.RobotStudio.Stations.Body,ABB.Robotics.RobotStudio.Stations.Body@)">
            <summary>
            Imprint fence on Body
            </summary>
            <param name="part"></param>
            <param name="instance"></param>
            <param name="target"></param>
            <param name="fence"></param>
            <param name="newBody"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.SelectRegion(ABB.Robotics.RobotStudio.Stations.Face,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.Face}@)">
            <summary>
            Select Region from face
            </summary>
            <param name="seed"></param>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.SelectRegionBoundaryLoops(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Face},System.Collections.Generic.List{System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.Edge}}@)">
            <summary>
            Select Region Boundary around Face
            </summary>
            <param name="region"></param>
            <param name="boundaryLoops"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.CreateOffsetBoundary(System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Face},ABB.Robotics.Math.Vector3,ABB.Robotics.Math.Vector3,System.Double,System.Double,System.Collections.Generic.List{ABB.Robotics.RobotStudio.Stations.Body}@)">
            <summary>
            Create Offset Wire boundary aroud a region
            </summary>
            <param name="region"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="offset"></param>
            <param name="approxTol"></param>
            <param name="offsetWires"></param>
            <returns></returns>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiGeoWiresFromSurfacesService.CreateSlicesAlongWire(RobotStudio.API.Internal.GeoPart,ABB.Robotics.RobotStudio.Stations.Part,System.Collections.Generic.IEnumerable{ABB.Robotics.RobotStudio.Stations.Face},ABB.Robotics.RobotStudio.Stations.Body,System.Double,ABB.Robotics.RobotStudio.Stations.Body@)">
            <summary>
            Create Slices along Wires
            </summary>
            <param name="part"></param>
            <param name="instance"></param>
            <param name="region"></param>
            <param name="wire"></param>
            <param name="distance"></param>
            <param name="slices"></param>
            <returns></returns>
        </member>
        <member name="T:RobotStudio.API.Internal.StationOperation">
            <summary>
            Used to prevent reentrancy in create/open/save/close station
            </summary>
        </member>
        <member name="M:RobotStudio.API.Internal.IApiSimulatorService.RegisterSimActorType(System.Type,System.Type)">
            <summary></summary>
            <remarks>
            Object type can include null ('static' actor), Station and SimulationConfiguration
            All non-static actors are disposed and re-created as needed
            One object type can have multiple actor types
            </remarks>
        </member>
    </members>
</doc>
